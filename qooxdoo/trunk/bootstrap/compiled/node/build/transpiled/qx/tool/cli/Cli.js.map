{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "path",
    "require",
    "fs",
    "tool",
    "utils",
    "Promisify",
    "semver",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "cli",
    "Cli",
    "__instance",
    "Error",
    "log",
    "appender",
    "NodeConsole",
    "members",
    "yargs",
    "argv",
    "_compilerApi",
    "_compileJsFilename",
    "_compileJsonFilename",
    "_parsedArgs",
    "__promiseParseArgs",
    "__librariesNotified",
    "__createYargs",
    "locale",
    "version",
    "strict",
    "showHelpOnFail",
    "help",
    "option",
    "describe",
    "type",
    "default",
    "alias",
    "__bootstrapArgv",
    "title",
    "repeat",
    "length",
    "config",
    "Utils",
    "getQxVersion",
    "usage",
    "debug",
    "Logger",
    "setLevel",
    "quiet",
    "setUseColors",
    "colorize",
    "__fullArgv",
    "nargs",
    "requiresArg",
    "array",
    "check",
    "regexp",
    "setEnv",
    "undefined",
    "some",
    "item",
    "test",
    "addYargsCommands",
    "demandCommand",
    "__notifyLibraries",
    "__notifyCommand",
    "cmd",
    "getCommand",
    "processArgs",
    "i",
    "arr",
    "getLibraryApis",
    "libraryApi",
    "load",
    "afterLibrariesLoaded",
    "processCommand",
    "command",
    "compiler",
    "Console",
    "getInstance",
    "setVerbose",
    "verbose",
    "setCompilerApi",
    "setCommand",
    "res",
    "process",
    "afterProcessFinished",
    "e",
    "error",
    "stack",
    "message",
    "exit",
    "getParsedArgs",
    "run",
    "args",
    "lang",
    "Array",
    "clone",
    "shift",
    "join",
    "__parseArgsImpl",
    "defaultConfigFilename",
    "Compile",
    "fileName",
    "configFile",
    "chdir",
    "dirname",
    "basename",
    "lockfileContent",
    "Lockfile",
    "getVersion",
    "compileJsFilename",
    "compileJsonFilename",
    "match",
    "existsAsync",
    "CompilerApi",
    "api",
    "compileJs",
    "__loadJs",
    "compilerApi",
    "set",
    "rootDir",
    "configFilename",
    "getConfiguration",
    "lockfile",
    "name",
    "Json",
    "loadJsonAsync",
    "ex",
    "schemaVersion",
    "coerce",
    "raw",
    "fileVersion",
    "major",
    "force",
    "save",
    "installer",
    "commands",
    "package",
    "Install",
    "filepath",
    "getLockfilePath",
    "backup",
    "copyFileAsync",
    "warn",
    "deleteLockfile",
    "lib",
    "libraries",
    "isInstalled",
    "uri",
    "repo_tag",
    "install",
    "existsSync",
    "installFromLocaPath",
    "info",
    "getLockfileData",
    "UserError",
    "packages",
    "forEach",
    "library",
    "m",
    "map",
    "v",
    "parseInt",
    "push",
    "needLibraries",
    "Type",
    "isArray",
    "_",
    "neededLibraries",
    "filter",
    "libData",
    "Manifest",
    "aPath",
    "libCompileJsFilename",
    "LibraryApi",
    "addLibraryApi",
    "initialize",
    "parsedArgs",
    "target",
    "outputPath",
    "locales",
    "writeAllTranslations",
    "environment",
    "kv",
    "key",
    "value",
    "targetType",
    "defaultTarget",
    "targets",
    "find",
    "mergeWith",
    "sass",
    "resources",
    "ScssConverter",
    "USE_V6_COMPILER",
    "copyOriginal",
    "COPY_ORIGINAL_FILES",
    "serve",
    "isExplicitArg",
    "listenPort",
    "module",
    "resolve",
    "lines",
    "split",
    "splice",
    "lineNumber",
    "getCompilerApi",
    "getCompileJsFilename",
    "getCompileJsonFilename",
    "searchForOption",
    "indexOf",
    "statics",
    "classNames",
    "packageName",
    "pkg",
    "seg",
    "window",
    "Clazz",
    "data",
    "getYargsCommand",
    "handler"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/Cli.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2018 Zenesis Ltd\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n\n************************************************************************ */\n\nconst path = require(\"upath\");\nconst fs = qx.tool.utils.Promisify.fs;\nconst semver = require(\"semver\");\n\n/**\n * Entry point for the CLI\n */\nqx.Class.define(\"qx.tool.cli.Cli\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n    if (qx.tool.cli.Cli.__instance) {\n      throw new Error(\"qx.tool.cli.Cli has already been initialized!\");\n    }\n    qx.tool.cli.Cli.__instance = this;\n    // include & register log appender\n    qx.log.appender.NodeConsole;\n  },\n\n  members: {\n    /** @type {yargs} the current yargs instance */\n    yargs: null,\n\n    /** @type {Object} the current argv */\n    argv: null,\n\n    /** @type {CompilerApi} the CompilerApi instance */\n    _compilerApi: null,\n\n    /** @type {String} the compile.js filename, if there is one */\n    _compileJsFilename: null,\n\n    /** @type {String} the compile.json filename, if there is one */\n    _compileJsonFilename: null,\n\n    /** @type {Object} Parsed arguments */\n    _parsedArgs: null,\n\n    /** @type {Promise} Promise that resolves to the _parsedArgs, but only when completely finished parsing them */\n    __promiseParseArgs: null,\n\n    /** @type {Boolean} Whether libraries have had their `.load()` method called yet */\n    __librariesNotified: false,\n\n    /**\n     * Creates an instance of yargs, with minimal options\n     *\n     * @return {yargs}\n     */\n    __createYargs() {\n      return (this.yargs = require(\"yargs\")\n        .locale(\"en\")\n        .version()\n        .strict(false)\n        .showHelpOnFail()\n        .help(false)\n        .option(\"force\", {\n          describe: \"Override warnings\",\n          type: \"boolean\",\n          default: false,\n          alias: \"F\"\n        })\n        .option(\"config-file\", {\n          describe: \"Specify the config file to use\",\n          type: \"string\",\n          alias: \"c\"\n        })\n        .option(\"verbose\", {\n          alias: \"v\",\n          describe: \"enables additional progress output to console\",\n          default: false,\n          type: \"boolean\"\n        })\n        .option(\"debug\", {\n          describe: \"enables debug output\",\n          default: false,\n          type: \"boolean\"\n        })\n        .option(\"quiet\", {\n          alias: \"q\",\n          describe: \"suppresses normal progress output to console\",\n          type: \"boolean\"\n        })\n        .option(\"colorize\", {\n          describe: \"colorize log output to the console using ANSI color codes\",\n          default: true,\n          type: \"boolean\"\n        }));\n    },\n\n    /**\n     * Initialises this.argv with the bare minimum required to load the config files and begin\n     * processing\n     */\n    async __bootstrapArgv() {\n      var title = \"qooxdoo command line interface\";\n      title = \"\\n\" + title + \"\\n\" + \"=\".repeat(title.length);\n\n      title += `\nVersion: v${await qx.tool.config.Utils.getQxVersion()}\n`;\n      title += \"\\n\";\n      title += `Typical usage:\n        qx <commands> [options]\n\n      Type qx <command> --help for options and subcommands.`;\n      let yargs = this.__createYargs().usage(title);\n      this.argv = yargs.argv;\n      // Logging - needs to be unified..\n      if (this.argv.debug) {\n        qx.log.Logger.setLevel(\"debug\");\n      } else if (this.argv.quiet) {\n        qx.log.Logger.setLevel(\"error\");\n      } else {\n        qx.log.Logger.setLevel(\"info\");\n      }\n      // use node console log appender with colors\n      qx.log.appender.NodeConsole.setUseColors(this.argv.colorize);\n    },\n\n    /**\n     * Reloads this.argv with the full set of arguments\n     */\n    async __fullArgv() {\n      let yargs = this.__createYargs()\n        .help(true)\n        .option(\"set\", {\n          describe: \"sets an environment value for the compiler\",\n          nargs: 1,\n          requiresArg: true,\n          type: \"string\",\n          array: true\n        })\n        .option(\"set-env\", {\n          describe: \"sets an environment value for the application\",\n          nargs: 1,\n          requiresArg: true,\n          type: \"string\",\n          array: true\n        })\n        .check(argv => {\n          // validate that \"set-env\" is not set or if it is\n          // set it's items are strings in the form of key=value\n          const regexp = /^[^=\\s]+=.+$/;\n          const setEnv = argv[\"set-env\"];\n\n          if (\n            !(setEnv === undefined || !setEnv.some(item => !regexp.test(item)))\n          ) {\n            throw new Error(\n              \"Argument check failed: --set-env must be a key=value pair.\"\n            );\n          }\n          return true;\n        });\n\n      qx.tool.cli.Cli.addYargsCommands(\n        yargs,\n        [\n          \"Add\",\n          \"Clean\",\n          \"Compile\",\n          \"Config\",\n          \"Deploy\",\n          \"Es6ify\",\n          \"Package\",\n          \"Pkg\", // alias for Package\n          \"Create\",\n          \"Lint\",\n          \"Run\",\n          \"Test\",\n          \"Serve\",\n          \"Migrate\"\n        ],\n\n        \"qx.tool.cli.commands\"\n      );\n\n      this.argv = await yargs.demandCommand().strict().argv;\n      await this.__notifyLibraries();\n    },\n\n    /**\n     * This is to notify the commands after loading the full args.\n     * The commands can overload special arg arguments here.\n     * e.g. Deploy will will overload the target.\n     */\n    __notifyCommand() {\n      let cmd = this._compilerApi.getCommand();\n      if (cmd) {\n        this._compilerApi.getCommand().processArgs(this.argv);\n      }\n    },\n\n    /**\n     * Calls the `.load()` method of each library, safe to call multiple times.  This is\n     * to delay the calling of `load()` until after we know that the command has been selected\n     * by Yargs\n     */\n    async __notifyLibraries() {\n      if (this.__librariesNotified) {\n        return;\n      }\n      this.__librariesNotified = true;\n      for (\n        let i = 0, arr = this._compilerApi.getLibraryApis();\n        i < arr.length;\n        i++\n      ) {\n        let libraryApi = arr[i];\n        await libraryApi.load();\n      }\n      await this._compilerApi.afterLibrariesLoaded();\n    },\n\n    /**\n     * Processes a command.  All commands should use this method when invoked by Yargs, because it\n     * provides a standard error control and makes sure that the libraries know what command has\n     * been selected.\n     *\n     * @param command {qx.tool.cli.Command} the command being run\n     */\n    async processCommand(command) {\n      qx.tool.compiler.Console.getInstance().setVerbose(this.argv.verbose);\n      command.setCompilerApi(this._compilerApi);\n      this._compilerApi.setCommand(command);\n      await this.__notifyLibraries();\n      try {\n        const res = await command.process();\n        await this._compilerApi.afterProcessFinished(command, res);\n        return res;\n      } catch (e) {\n        qx.tool.compiler.Console.error(\"Error: \" + (e.stack || e.message));\n        process.exit(1);\n        return null;\n      }\n    },\n\n    /**\n     * Returns the parsed command line and configuration data\n     *\n     * @return {Object}\n     */\n    async getParsedArgs() {\n      return await this.__promiseParseArgs;\n    },\n\n    /**\n     * Parses the command line and loads configuration data from a .js or .json file;\n     * if you provide a .js file the file must be a module which returns an object which\n     * has any of these properties:\n     *\n     *  CompilerApi - the class (derived from qx.tool.cli.api.CompilerApi)\n     *    for configuring the compiler\n     *\n     * Each library can also have a compile.js, and that is also a module which can\n     * return an object with any of these properties:\n     *\n     *  LibraryApi - the class (derived from qx.tool.cli.api.LibraryApi)\n     *    for configuring the library\n     *\n     */\n    async run() {\n      var args = qx.lang.Array.clone(process.argv);\n      args.shift();\n      process.title = args.join(\" \");\n      this.__promiseParseArgs = this.__parseArgsImpl();\n      await this.__promiseParseArgs;\n    },\n\n    /**\n     * Does the work of parsing command line arguments and loading `compile.js[on]`\n     */\n    async __parseArgsImpl() {\n      await this.__bootstrapArgv();\n\n      /*\n       * Detect and load compile.json and compile.js\n       */\n      let defaultConfigFilename = qx.tool.config.Compile.config.fileName;\n      if (this.argv.configFile) {\n        process.chdir(path.dirname(this.argv.configFile));\n        this.argv.configFile = path.basename(this.argv.configFile);\n        defaultConfigFilename = this.argv.configFile;\n      }\n\n      var lockfileContent = {\n        version: qx.tool.config.Lockfile.getInstance().getVersion()\n      };\n\n      let compileJsFilename = qx.tool.cli.Cli.compileJsFilename;\n      let compileJsonFilename = qx.tool.config.Compile.config.fileName;\n      if (defaultConfigFilename) {\n        if (defaultConfigFilename.match(/\\.js$/)) {\n          compileJsFilename = defaultConfigFilename;\n        } else {\n          compileJsonFilename = defaultConfigFilename;\n        }\n      }\n\n      if (await fs.existsAsync(compileJsonFilename)) {\n        this._compileJsonFilename = compileJsonFilename;\n      }\n\n      /*\n       * Create a CompilerAPI\n       */\n\n      let CompilerApi = qx.tool.cli.api.CompilerApi;\n      if (await fs.existsAsync(compileJsFilename)) {\n        let compileJs = await this.__loadJs(compileJsFilename);\n        this._compileJsFilename = compileJsFilename;\n        if (compileJs.CompilerApi) {\n          CompilerApi = compileJs.CompilerApi;\n        }\n      }\n      let compilerApi = (this._compilerApi = new CompilerApi(this).set({\n        rootDir: \".\",\n        configFilename: compileJsonFilename\n      }));\n\n      await compilerApi.load();\n      let config = compilerApi.getConfiguration();\n\n      /*\n       * Open the lockfile and check versions\n       */\n      if (defaultConfigFilename) {\n        let lockfile = qx.tool.config.Lockfile.config.fileName;\n        try {\n          var name = path.join(path.dirname(defaultConfigFilename), lockfile);\n          lockfileContent =\n            (await qx.tool.utils.Json.loadJsonAsync(name)) || lockfileContent;\n        } catch (ex) {\n          // Nothing\n        }\n        // check semver-type compatibility (i.e. compatible as long as major version stays the same)\n        let schemaVersion = semver.coerce(\n          qx.tool.config.Lockfile.getInstance().getVersion(),\n          true\n        ).raw;\n        let fileVersion =\n          lockfileContent && lockfileContent.version\n            ? semver.coerce(lockfileContent.version, true).raw\n            : \"1.0.0\";\n        if (semver.major(schemaVersion) > semver.major(fileVersion)) {\n          if (this.argv.force) {\n            let config = {\n              verbose: this.argv.verbose,\n              quiet: this.argv.quiet,\n              save: false\n            };\n\n            const installer = new qx.tool.cli.commands.package.Install(config);\n            let filepath = installer.getLockfilePath();\n            let backup = filepath + \".old\";\n            await fs.copyFileAsync(filepath, backup);\n            if (!this.argv.quiet) {\n              qx.tool.compiler.Console.warn(\n                `*** A backup of ${lockfile} has been saved to ${backup}, in case you need to revert to it. ***`\n              );\n            }\n            await installer.deleteLockfile();\n            for (let lib of lockfileContent.libraries) {\n              if (!(await installer.isInstalled(lib.uri, lib.repo_tag))) {\n                if (lib.repo_tag) {\n                  await installer.install(lib.uri, lib.repo_tag);\n                } else if (lib.path && fs.existsSync(lib.path)) {\n                  await installer.installFromLocaPath(lib.path, lib.uri);\n                }\n              } else if (this.argv.verbose) {\n                qx.tool.compiler.Console.info(\n                  `>>> ${lib.uri}@${lib.repo_tag} is already installed.`\n                );\n              }\n            }\n            lockfileContent = await installer.getLockfileData();\n          } else {\n            throw new qx.tool.utils.Utils.UserError(\n              `*** Warning ***\\n` +\n                `The schema of '${lockfile}' has changed. Execute 'qx clean && qx compile --force' to delete and regenerate it.\\n` +\n                `You might have to re-apply manual modifications to '${lockfile}'.`\n            );\n          }\n        }\n      }\n\n      /*\n       * Locate and load libraries\n       */\n\n      if (!config.libraries) {\n        if (fs.existsSync(\"Manifest.json\")) {\n          config.libraries = [\".\"];\n        }\n      }\n\n      if (lockfileContent.libraries) {\n        config.packages = {};\n        lockfileContent.libraries.forEach(function (library) {\n          if (library.uri == \"qooxdoo/qxl.apiviewer\") {\n            let m = library.repo_tag.match(/^v([0-9]+)\\.([0-9]+)\\.([0-9]+)$/);\n            if (m) {\n              m.shift();\n              m = m.map(v => parseInt(v, 10));\n              if (m[0] <= 1 && m[1] == 0 && m[2] < 15) {\n                qx.tool.compiler.Console.warn(\n                  \"***********\\n*********** API Viewer is out of date and must be upgraded - please run 'qx package update' and then 'qx package upgrade'\\n***********\"\n                );\n              }\n            }\n          }\n          config.libraries.push(library.path);\n          config.packages[library.uri] = library.path;\n        });\n      }\n      // check if we need to load libraries, needs more robust test\n      let needLibraries =\n        qx.lang.Type.isArray(this.argv._) && this.argv._[0] !== \"clean\";\n      // check if libraries are loaded\n      if (config.libraries && needLibraries) {\n        let neededLibraries = config.libraries.filter(\n          libData => !fs.existsSync(libData + \"/Manifest.json\")\n        );\n\n        if (neededLibraries.length) {\n          if (!fs.existsSync(qx.tool.config.Manifest.config.fileName)) {\n            qx.tool.compiler.Console.error(\n              \"Libraries are missing and there is no Manifest.json in the current directory so we cannot attempt to install them; the missing libraries are: \\n     \" +\n                neededLibraries.join(\"\\n     \")\n            );\n\n            process.exit(1);\n          }\n          qx.tool.compiler.Console.info(\n            \"One or more libraries not found - trying to install them from library repository...\"\n          );\n\n          const installer = new qx.tool.cli.commands.package.Install({\n            quiet: true,\n            save: false\n          });\n\n          await installer.process();\n        }\n\n        for (const aPath of config.libraries) {\n          let libCompileJsFilename = path.join(\n            aPath,\n            qx.tool.cli.Cli.compileJsFilename\n          );\n\n          let LibraryApi = qx.tool.cli.api.LibraryApi;\n          if (await fs.existsAsync(libCompileJsFilename)) {\n            let compileJs = await this.__loadJs(libCompileJsFilename);\n            if (compileJs.LibraryApi) {\n              LibraryApi = compileJs.LibraryApi;\n            }\n          }\n\n          let libraryApi = new LibraryApi().set({\n            rootDir: aPath,\n            compilerApi: compilerApi\n          });\n\n          compilerApi.addLibraryApi(libraryApi);\n          await libraryApi.initialize();\n        }\n      }\n\n      /*\n       * Now everything is loaded, we can process the command line properly\n       */\n      await this.__fullArgv();\n      this.__notifyCommand();\n\n      let parsedArgs = {\n        target: this.argv.target,\n        outputPath: null,\n        locales: null,\n        writeAllTranslations: this.argv.writeAllTranslations,\n        environment: {},\n        verbose: this.argv.verbose\n      };\n\n      if (this.argv.locale && this.argv.locale.length) {\n        parsedArgs.locales = this.argv.locale;\n      }\n\n      if (this.argv[\"set-env\"]) {\n        this.argv[\"set-env\"].forEach(function (kv) {\n          var m = kv.match(/^([^=\\s]+)(=(.+))?$/);\n          var key = m[1];\n          var value = m[3];\n          parsedArgs.environment[key] = value;\n        });\n      }\n      config.targetType = parsedArgs.target || config.defaultTarget || \"source\";\n\n      if (!config.locales) {\n        config.locales = [];\n      }\n      if (typeof parsedArgs.writeAllTranslations == \"boolean\") {\n        config.writeAllTranslations = parsedArgs.writeAllTranslations;\n      }\n\n      if (!config.environment) {\n        config.environment = {};\n      }\n\n      // Set the environment variables coming from command line arguments\n      // in target's environment object. If that object doesn't exist create\n      // one and assign it to the target.\n      if (config.targets) {\n        const target = config.targets.find(\n          target => target.type === config.targetType\n        );\n\n        target.environment = target.environment || {};\n        qx.lang.Object.mergeWith(\n          target.environment,\n          parsedArgs.environment,\n          true\n        );\n      }\n\n      if (config.sass && config.sass.compiler !== undefined) {\n        qx.tool.compiler.resources.ScssConverter.USE_V6_COMPILER =\n          config.sass.compiler == \"latest\";\n      } else {\n        qx.tool.compiler.resources.ScssConverter.USE_V6_COMPILER = null;\n      }\n      if (config.sass && config.sass.copyOriginal) {\n        qx.tool.compiler.resources.ScssConverter.COPY_ORIGINAL_FILES = true;\n      }\n\n      if (!config.serve) {\n        config.serve = {};\n      }\n\n      if (this.isExplicitArg(\"listen-port\")) {\n        config.serve.listenPort = this.argv.listenPort;\n      } else {\n        config.serve.listenPort =\n          config.serve.listenPort || this.argv.listenPort;\n      }\n\n      this._parsedArgs = await compilerApi.getConfiguration();\n      return this._parsedArgs;\n    },\n\n    /**\n     * Loads a .js file using `require`, handling exceptions as best as possible\n     *\n     * @param aPath {String} the file to load\n     * @return {Object} the module\n     */\n    async __loadJs(aPath) {\n      try {\n        let module = require(path.resolve(aPath));\n        return module;\n      } catch (e) {\n        let lines = e.stack.split(\"\\n\");\n        for (let i = 0; i < lines.length; i++) {\n          if (lines[i].match(/^\\s+at/)) {\n            lines.splice(i);\n          }\n        }\n        let lineNumber = lines[0].split(\"evalmachine.<anonymous>:\")[1];\n        if (lineNumber !== undefined) {\n          lines.shift();\n          throw new Error(\n            \"Error while reading \" +\n              aPath +\n              \" at line \" +\n              lineNumber +\n              \"\\n\" +\n              lines.join(\"\\n\")\n          );\n        } else {\n          throw new Error(\n            \"Error while reading \" + aPath + \"\\n\" + lines.join(\"\\n\")\n          );\n        }\n      }\n    },\n\n    /**\n     * Returns the CompilerApi instance\n     *\n     * @return {CompilerApi}\n     */\n    getCompilerApi() {\n      return this._compilerApi;\n    },\n\n    /**\n     * Returns the filename of compile.js, if there is one\n     *\n     * @return {String?} filename\n     */\n    getCompileJsFilename() {\n      return this._compileJsFilename;\n    },\n\n    /**\n     * Returns the filename of compile.json, if there is one\n     *\n     * @return {String?} filename\n     */\n    getCompileJsonFilename() {\n      return this._compileJsonFilename;\n    },\n\n    /**\n     * Detects whether the command line explicit set an option (as opposed to yargs\n     * providing a default value).  Note that this does not handle aliases, use the\n     * actual, full option name.\n     *\n     * @param option {String} the name of the option, eg \"listen-port\"\n     * @return {Boolean}\n     */\n    isExplicitArg(option) {\n      function searchForOption(option) {\n        return process.argv.indexOf(option) > -1;\n      }\n      return searchForOption(`-${option}`) || searchForOption(`--${option}`);\n    }\n  },\n\n  statics: {\n    compileJsFilename: \"compile.js\",\n\n    /** {CompileJs} singleton instance */\n    __instance: null,\n\n    /**\n     * Returns the singleton instance, throws an error if it has not been created\n     *\n     * @return {qx.tool.cli.Cli}\n     */\n    getInstance() {\n      if (!qx.tool.cli.Cli.__instance) {\n        throw new Error(\"CompileJs has not been initialized yet!\");\n      }\n      return qx.tool.cli.Cli.__instance;\n    },\n\n    /**\n     * Adds commands to Yargs\n     *\n     * @param yargs {yargs} the Yargs instance\n     * @param classNames {String[]} array of class names, each of which is in the `packageName` package\n     * @param packageName {String} the name of the package to find each command class\n     */\n    addYargsCommands(yargs, classNames, packageName) {\n      let pkg = null;\n      packageName.split(\".\").forEach(seg => {\n        if (pkg === null) {\n          pkg = window[seg];\n        } else {\n          pkg = pkg[seg];\n        }\n      });\n      classNames.forEach(cmd => {\n        let Clazz = pkg[cmd];\n        let data = Clazz.getYargsCommand();\n        if (data) {\n          if (data.handler === undefined) {\n            data.handler = argv =>\n              qx.tool.cli.Cli.getInstance().processCommand(new Clazz(argv));\n          }\n          yargs.command(data);\n        }\n      });\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}