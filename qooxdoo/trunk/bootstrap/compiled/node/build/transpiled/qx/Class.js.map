{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__Property",
    "core",
    "Property",
    "name",
    "config",
    "__defineImpl",
    "ex",
    "Class",
    "$$brokenClassDefinitions",
    "include",
    "getClass",
    "implement",
    "implicitType",
    "hasOwnProperty",
    "type",
    "clazz",
    "__createClass",
    "extend",
    "construct",
    "destruct",
    "forEach",
    "id",
    "__attachAnno",
    "properties",
    "__addProperties",
    "members",
    "__addMembers",
    "events",
    "__addEvents",
    "i",
    "l",
    "length",
    "__addMixin",
    "Error",
    "environment",
    "key",
    "Environment",
    "add",
    "__addInterface",
    "defer",
    "self",
    "addPendingDefer",
    "getByName",
    "classname",
    "prototype",
    "undefine",
    "$$registry",
    "ns",
    "split",
    "objects",
    "window",
    "push",
    "last",
    "parent",
    "isFunction",
    "objectGetLength",
    "isDefined",
    "util",
    "OOUtil",
    "classIsDefined",
    "getTotalNumber",
    "mixin",
    "patch",
    "isClass",
    "obj",
    "$$type",
    "constructor",
    "isSubClassOf",
    "superClass",
    "getPropertyDefinition",
    "getProperties",
    "list",
    "$$properties",
    "apply",
    "Object",
    "keys",
    "superclass",
    "getByProperty",
    "hasProperty",
    "getEventType",
    "supportsEvent",
    "hasOwnMixin",
    "$$includes",
    "indexOf",
    "getByMixin",
    "$$flatIncludes",
    "getMixins",
    "hasMixin",
    "hasOwnInterface",
    "iface",
    "$$implements",
    "getByInterface",
    "getInterfaces",
    "$$flatImplements",
    "hasInterface",
    "implementsInterface",
    "Interface",
    "objectImplements",
    "classImplements",
    "getInstance",
    "$$instance",
    "$$allowconstruct",
    "getSubclasses",
    "subclasses",
    "registry",
    "genericToString",
    "__allowedKeys",
    "select",
    "true",
    "default",
    "__staticAllowedKeys",
    "__validateConfig",
    "allowed",
    "maps",
    "undefined",
    "$$hash",
    "isObject",
    "a",
    "Mixin",
    "checkCompatibility",
    "message",
    "substr",
    "settings",
    "variants",
    "__validateAbstractInterfaces",
    "$$classtype",
    "interfaces",
    "assert",
    "group",
    "anno",
    "$$annotations",
    "lang",
    "Type",
    "isArray",
    "mixins",
    "isStrictMode",
    "setDisplayNames",
    "__createDefaultConstructor",
    "__wrapConstructor",
    "setDisplayName",
    "staticValue",
    "charAt",
    "basename",
    "createNamespace",
    "toString",
    "extendClass",
    "$$destructor",
    "$$events",
    "proto",
    "refine",
    "init",
    "event",
    "async",
    "inheritable",
    "$$inheritable",
    "$$refreshInheritables",
    "attachRefreshInheritables",
    "attachMethods",
    "__validateProperty",
    "has",
    "existingProperty",
    "warn",
    "$$allowedGroupKeys",
    "$$allowedKeys",
    "transform",
    "check",
    "isString",
    "base",
    "wrap",
    "member",
    "annoKey",
    "substring",
    "$$install",
    "Function",
    "create",
    "always",
    "flatten",
    "entry",
    "$$members",
    "defaultConstructor",
    "arguments",
    "wrapper",
    "retval",
    "$$original",
    "$$constructor"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/Class.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * John Spackman (john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * This class is one of the most important parts of qooxdoo's\n * object-oriented features.\n *\n * Its {@link #define} method is used to create qooxdoo classes.\n *\n * Each instance of a class defined by {@link #define} has\n * the following keys attached to the constructor and the prototype:\n *\n * <table>\n * <tr><th><code>classname</code></th><td>The fully-qualified name of the class (e.g. <code>\"qx.ui.core.Widget\"</code>).</td></tr>\n * <tr><th><code>basename</code></th><td>The namespace part of the class name (e.g. <code>\"qx.ui.core\"</code>).</td></tr>\n * <tr><th><code>constructor</code></th><td>A reference to the constructor of the class.</td></tr>\n * <tr><th><code>superclass</code></th><td>A reference to the constructor of the super class.</td></tr>\n * </table>\n *\n * Each method may access static members of the same class by using\n * <code>this.self(arguments)</code> ({@link qx.core.Object#self}):\n * <pre class='javascript'>\n * statics : { FOO : \"bar\" },\n * members: {\n *   baz: function(x) {\n *     this.self(arguments).FOO;\n *     ...\n *   }\n * }\n * </pre>\n *\n * Each overriding method may call the overridden method by using\n * <code>this.base(arguments [, ...])</code> ({@link qx.core.Object#base}). This is also true for calling\n * the constructor of the superclass.\n * <pre class='javascript'>\n * members: {\n *   foo: function(x) {\n *     this.base(arguments, x);\n *     ...\n *   }\n * }\n * </pre>\n *\n * By using <code>qx.Class</code> within an app, the native JS data types are\n * conveniently polyfilled according to {@link qx.lang.normalize}.\n *\n * Annotations can be added to classes, constructors, destructors, and methods, properties, and statics -\n * see <code>qx.Annotation</code> for examples and means access annotations at runtime.\n *\n * @require(qx.Interface)\n * @require(qx.Mixin)\n * @require(qx.lang.normalize.Array)\n * @require(qx.lang.normalize.Date)\n * @require(qx.lang.normalize.Error)\n * @require(qx.lang.normalize.Function)\n * @require(qx.lang.normalize.String)\n * @require(qx.lang.normalize.Object)\n * @require(qx.lang.normalize.Number)\n */\nqx.Bootstrap.define(\"qx.Class\", {\n  statics: {\n    /**\n     * A static reference to the property implementation in the case it\n     * should be included.\n     */\n    __Property: qx.core.Environment.get(\"module.property\")\n      ? qx.core.Property\n      : null,\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new class using the qooxdoo class system. This sets up the\n     * namespace for the class and generates the class from the definition map.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Class.define(\"name\",\n     * {\n     *   extend : Object, // superclass\n     *   implement : [Interfaces],\n     *   include : [Mixins],\n     *\n     *   statics:\n     *   {\n     *     CONSTANT : 3.141,\n     *\n     *     publicMethod: function() {},\n     *     _protectedMethod: function() {},\n     *     __privateMethod: function() {}\n     *   },\n     *\n     *   properties:\n     *   {\n     *     \"tabIndex\": { check: \"Number\", init : -1 }\n     *   },\n     *\n     *   members:\n     *   {\n     *     publicField: \"foo\",\n     *     publicMethod: function() {},\n     *\n     *     _protectedField: \"bar\",\n     *     _protectedMethod: function() {},\n     *\n     *     __privateField: \"baz\",\n     *     __privateMethod: function() {}\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String?null} Name of the class. If <code>null</code>, the class\n     *   will not be added to any namespace which could be handy for testing.\n     * @param config {Map ? null} Class definition structure. The configuration map has the following keys:\n     *     <table>\n     *       <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *       <tr><th>type</th><td>String</td><td>\n     *           Type of the class. Valid types are \"abstract\", \"static\" and \"singleton\".\n     *           If unset it defaults to a regular non-static class.\n     *       </td></tr>\n     *       <tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n     *       <tr><th>implement</th><td>Interface | Interface[]</td><td>Single interface or array of interfaces the class implements.</td></tr>\n     *       <tr><th>include</th><td>Mixin | Mixin[]</td><td>Single mixin or array of mixins, which will be merged into the class.</td></tr>\n     *       <tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n     *       <tr><th>statics</th><td>Map</td><td>Map of static members of the class.</td></tr>\n     *       <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n     *           {@link qx.core.Property}.</td></tr>\n     *       <tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n     *       <tr><th>environment</th><td>Map</td><td>Map of environment settings for this class. For a description of the format of a setting see\n     *           {@link qx.core.Environment}.</td></tr>\n     *       <tr><th>events</th><td>Map</td><td>\n     *           Map of events the class fires. The keys are the names of the events and the values are the\n     *           corresponding event type class names.\n     *       </td></tr>\n     *       <tr><th>defer</th><td>Function</td><td>Function that is called at the end of processing the class declaration. It allows access to the declared statics, members and properties.</td></tr>\n     *       <tr><th>destruct</th><td>Function</td><td>The destructor of the class.</td></tr>\n     *     </table>\n     * @return {Class} The defined class\n     */\n    define(name, config) {\n      try {\n        return this.__defineImpl(name, config);\n      } catch (ex) {\n        qx.Class.$$brokenClassDefinitions = true;\n        throw ex;\n      }\n    },\n\n    /**\n     * Implementation behind `define` - this exists just for the simplicity of wrapping an exception\n     * handler around the code\n     *\n     * @param {String} name @see `define()`\n     * @param {*} config @see `define()`\n     * @returns  @see `define()`\n     */\n    __defineImpl(name, config) {\n      if (!config) {\n        config = {};\n      }\n\n      // Normalize include to array\n      if (\n        config.include &&\n        !(qx.Bootstrap.getClass(config.include) === \"Array\")\n      ) {\n        config.include = [config.include];\n      }\n\n      // Normalize implement to array\n      if (\n        config.implement &&\n        !(qx.Bootstrap.getClass(config.implement) === \"Array\")\n      ) {\n        config.implement = [config.implement];\n      }\n\n      // Normalize type\n      var implicitType = false;\n      if (!config.hasOwnProperty(\"extend\") && !config.type) {\n        config.type = \"static\";\n        implicitType = true;\n      }\n\n      // Validate incoming data\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        try {\n          this.__validateConfig(name, config);\n        } catch (ex) {\n          if (implicitType) {\n            ex.message =\n              'Assumed static class because no \"extend\" key was found. ' +\n              ex.message;\n          }\n          throw ex;\n        }\n      }\n\n      // Create the class\n      var clazz = this.__createClass(\n        name,\n        config.type,\n        config.extend,\n        config.statics,\n        config.construct,\n        config.destruct,\n        config.include\n      );\n\n      // Initialise class and constructor/destructor annotations\n      [\"@\", \"@construct\", \"@destruct\"].forEach(function (id) {\n        this.__attachAnno(clazz, id, null, config[id]);\n      }, this);\n\n      // Members, properties, events and mixins are only allowed for non-static classes\n      if (config.extend) {\n        // Attach properties\n        if (config.properties) {\n          this.__addProperties(clazz, config.properties, true);\n        }\n\n        // Attach members\n        if (config.members) {\n          this.__addMembers(clazz, config.members, true, true, false);\n        }\n\n        // Process events\n        if (config.events) {\n          this.__addEvents(clazz, config.events, true);\n        }\n\n        // Include mixins\n        // Must be the last here to detect conflicts\n        if (config.include) {\n          for (var i = 0, l = config.include.length; i < l; i++) {\n            this.__addMixin(clazz, config.include[i], false);\n          }\n        }\n      }\n      // If config has a 'extend' key but it's null or undefined\n      else if (\n        config.hasOwnProperty(\"extend\") &&\n        qx.core.Environment.get(\"qx.debug\")\n      ) {\n        throw new Error('\"extend\" parameter is null or undefined');\n      }\n\n      // Process environment\n      if (config.environment) {\n        for (var key in config.environment) {\n          qx.core.Environment.add(key, config.environment[key]);\n        }\n      }\n\n      // Interface support for non-static classes\n      if (config.implement) {\n        for (var i = 0, l = config.implement.length; i < l; i++) {\n          this.__addInterface(clazz, config.implement[i]);\n        }\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__validateAbstractInterfaces(clazz);\n      }\n\n      // Process defer\n      if (config.defer) {\n        config.defer.self = clazz;\n        qx.Bootstrap.addPendingDefer(clazz, function () {\n          clazz = qx.Class.getByName(clazz.classname);\n          config.defer(clazz, clazz.prototype, {\n            add(name, config) {\n              // build pseudo properties map\n              var properties = {};\n              properties[name] = config;\n\n              // execute generic property handler\n              qx.Class.__addProperties(clazz, properties, true);\n            }\n          });\n        });\n      }\n\n      return clazz;\n    },\n\n    /**\n     * Removes a class from qooxdoo defined by {@link #define}\n     *\n     * @param name {String} Name of the class\n     */\n    undefine(name) {\n      // first, delete the class from the registry\n      delete this.$$registry[name];\n      // delete the class reference from the namespaces and all empty namespaces\n      var ns = name.split(\".\");\n      // build up an array containing all namespace objects including window\n      var objects = [window];\n      for (var i = 0; i < ns.length; i++) {\n        objects.push(objects[i][ns[i]]);\n      }\n\n      // go through all objects and check for the constructor or empty namespaces\n      for (var i = objects.length - 1; i >= 1; i--) {\n        var last = objects[i];\n        var parent = objects[i - 1];\n        if (\n          // The class being undefined, but parent classes in case it is a nested class that is being undefined\n          (i == objects.length - 1 && qx.Bootstrap.isFunction(last)) ||\n          qx.Bootstrap.objectGetLength(last) === 0\n        ) {\n          delete parent[ns[i - 1]];\n        } else {\n          break;\n        }\n      }\n    },\n\n    /**\n     * Whether the given class exists\n     *\n     * @signature function(name)\n     * @param name {String} class name to check\n     * @return {Boolean} true if class exists\n     */\n    isDefined: qx.util.OOUtil.classIsDefined,\n\n    /**\n     * Determine the total number of classes\n     *\n     * @return {Number} the total number of classes\n     */\n    getTotalNumber() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n    /**\n     * Find a class by its name\n     *\n     * @signature function(name)\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName: qx.Bootstrap.getByName,\n\n    /**\n     * Include all features of the given mixin into the class. The mixin must\n     * not include any methods or properties that are already available in the\n     * class. This would only be possible using the {@link #patch} method.\n     *\n     * @param clazz {Class} An existing class which should be augmented by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     */\n    include(clazz, mixin) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!mixin) {\n          throw new Error(\n            \"The mixin to include into class '\" +\n              clazz.classname +\n              \"' is undefined/null!\"\n          );\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, false);\n    },\n\n    /**\n     * Include all features of the given mixin into the class. The mixin may\n     * include features, which are already defined in the target class. Existing\n     * features of equal name will be overwritten.\n     * Please keep in mind that this functionality is not intended for regular\n     * use, but as a formalized way (and a last resort) in order to patch\n     * existing classes.\n     *\n     * <b>WARNING</b>: You may break working classes and features.\n     *\n     * @param clazz {Class} An existing class which should be modified by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     * @return {Class} the new class definition\n     */\n    patch(clazz, mixin) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!mixin) {\n          throw new Error(\n            \"The mixin to patch class '\" +\n              clazz.classname +\n              \"' is undefined/null!\"\n          );\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, true);\n      return qx.Class.getByName(clazz.classname);\n    },\n\n    /**\n     * Detects whether the object is a Class (and not an instance of a class)\n     *\n     *  @param obj {Object?} the object to inspect\n     *  @return {Boolean} true if it is a class, false if it is anything else\n     */\n    isClass(obj) {\n      return obj && obj.$$type === \"Class\" && obj.constructor === obj;\n    },\n\n    /**\n     * Whether a class is a direct or indirect sub class of another class,\n     * or both classes coincide.\n     *\n     * @param clazz {Class} the class to check.\n     * @param superClass {Class} the potential super class\n     * @return {Boolean} whether clazz is a sub class of superClass.\n     */\n    isSubClassOf(clazz, superClass) {\n      if (!clazz) {\n        return false;\n      }\n\n      if (clazz == superClass) {\n        return true;\n      }\n\n      if (clazz.prototype instanceof superClass) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns the definition of the given property. Returns null\n     * if the property does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the class to check for\n     * @return {Map|null} whether the object support the given event.\n     */\n    getPropertyDefinition: qx.util.OOUtil.getPropertyDefinition,\n\n    /**\n     * Returns a list of all properties supported by the given class\n     *\n     * @param clazz {Class} Class to query\n     * @return {String[]} List of all property names\n     */\n    getProperties(clazz) {\n      var list = [];\n\n      while (clazz) {\n        if (clazz.$$properties) {\n          list.push.apply(list, Object.keys(clazz.$$properties));\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given property in its class definition. Returns null\n     * if the property is not specified anywhere.\n     *\n     * @param clazz {Class} class to look for the property\n     * @param name {String} name of the property\n     * @return {Class | null} The class which includes the property\n     */\n    getByProperty(clazz, name) {\n      while (clazz) {\n        if (clazz.$$properties && clazz.$$properties[name]) {\n          return clazz;\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n    /**\n     * Whether a class has the given property\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the property to check for\n     * @return {Boolean} whether the class includes the given property.\n     */\n    hasProperty: qx.util.OOUtil.hasProperty,\n\n    /**\n     * Returns the event type of the given event. Returns null if\n     * the event does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event\n     * @return {String|null} Event type of the given event.\n     */\n    getEventType: qx.util.OOUtil.getEventType,\n\n    /**\n     * Whether a class supports the given event type\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event to check for\n     * @return {Boolean} whether the class supports the given event.\n     */\n    supportsEvent: qx.util.OOUtil.supportsEvent,\n\n    /**\n     * Whether a class directly includes a mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnMixin(clazz, mixin) {\n      return clazz.$$includes && clazz.$$includes.indexOf(mixin) !== -1;\n    },\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given mixin. Returns null if the mixin is not\n     * specified anywhere.\n     *\n     * @param clazz {Class} class to look for the mixin\n     * @param mixin {Mixin} mixin to look for\n     * @return {Class | null} The class which directly includes the given mixin\n     */\n    getByMixin(clazz, mixin) {\n      var list, i, l;\n\n      while (clazz) {\n        if (clazz.$$includes) {\n          list = clazz.$$flatIncludes;\n\n          for (i = 0, l = list.length; i < l; i++) {\n            if (list[i] === mixin) {\n              return clazz;\n            }\n          }\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns a list of all mixins available in a given class.\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} class which should be inspected\n     * @return {Mixin[]} array of mixins this class uses\n     */\n    getMixins: qx.util.OOUtil.getMixins,\n\n    /**\n     * Whether a given class or any of its superclasses includes a given mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin.\n     */\n    hasMixin(clazz, mixin) {\n      return !!this.getByMixin(clazz, mixin);\n    },\n\n    /**\n     * Whether a given class directly includes an interface.\n     *\n     * This function will only return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) using the \"implement\"\n     * key.\n     *\n     * @param clazz {Class} class or instance to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnInterface(clazz, iface) {\n      return clazz.$$implements && clazz.$$implements.indexOf(iface) !== -1;\n    },\n\n    /**\n     * Returns the class or one of its super classes which contains the\n     * declaration of the given interface. Returns null if the interface is not\n     * specified anywhere.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to look for the interface\n     * @param iface {Interface} interface to look for\n     * @return {Class | null} the class which directly implements the given interface\n     */\n    getByInterface: qx.util.OOUtil.getByInterface,\n\n    /**\n     * Returns a list of all interfaces a given class has to implement.\n     *\n     * @param clazz {Class} class which should be inspected\n     * @return {Interface[]} array of interfaces this class implements\n     */\n    getInterfaces(clazz) {\n      var list = [];\n\n      while (clazz) {\n        if (clazz.$$implements) {\n          list.push.apply(list, clazz.$$flatImplements);\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n    /**\n     * Whether a given class or any of its super classes includes a given interface.\n     *\n     * This function will return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) of the class\n     * or any of its super classes using the \"implement\"\n     * key.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the interface.\n     */\n    hasInterface: qx.util.OOUtil.hasInterface,\n\n    /**\n     * Whether a given class complies to an interface.\n     *\n     * Checks whether all methods defined in the interface are\n     * implemented. The class does not need to implement\n     * the interface explicitly in the <code>extend</code> key.\n     *\n     * @param obj {Object} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class conforms to the interface.\n     */\n    implementsInterface(obj, iface) {\n      var clazz = obj.constructor;\n\n      if (this.hasInterface(clazz, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.objectImplements(obj, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.classImplements(clazz, iface)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Helper method to handle singletons\n     *\n     * @internal\n     * @return {Object} The singleton instance\n     */\n    getInstance() {\n      if (this.$$instance === null) {\n        throw new Error(\n          \"Singleton instance of \" +\n            this +\n            \" is requested, but not ready yet. This is most likely due to a recursive call in the constructor path.\"\n        );\n      }\n\n      if (!this.$$instance) {\n        this.$$allowconstruct = true;\n        this.$$instance = null; // null means \"object is being created\"; needed for another call of getInstance() during instantiation\n        this.$$instance = new this();\n        delete this.$$allowconstruct;\n      }\n\n      return this.$$instance;\n    },\n\n    /**\n     * Retreive all subclasses of a given class\n     *\n     * @param clazz {Class} the class which should be inspected\n     *\n     * @return {Object} class name hash holding the references to the subclasses or null if the class does not exist.\n     */\n    getSubclasses(clazz) {\n      if (!clazz) {\n        return null;\n      }\n\n      var subclasses = {};\n      var registry = qx.Class.$$registry;\n\n      for (var name in registry) {\n        if (registry[name].superclass && registry[name].superclass == clazz) {\n          subclasses[name] = registry[name];\n        }\n      }\n\n      return subclasses;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL BASICS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all classes to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The class identifier\n     */\n    genericToString() {\n      return \"[Class \" + this.classname + \"]\";\n    },\n\n    /** Stores all defined classes */\n    $$registry: qx.Bootstrap.$$registry,\n\n    /** @type {Map} allowed keys in non-static class definition */\n    __allowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        \"@\": \"object\",\n        \"@construct\": \"object\",\n        \"@destruct\": \"object\",\n        type: \"string\", // String\n        extend: \"function\", // Function\n        implement: \"object\", // Interface[]\n        include: \"object\", // Mixin[]\n        construct: \"function\", // Function\n        statics: \"object\", // Map\n        properties: \"object\", // Map\n        members: \"object\", // Map\n        environment: \"object\", // Map\n        events: \"object\", // Map\n        defer: \"function\", // Function\n        destruct: \"function\" // Function\n      },\n\n      default: null\n    }),\n\n    /** @type {Map} allowed keys in static class definition */\n    __staticAllowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        \"@\": \"object\",\n        type: \"string\", // String\n        statics: \"object\", // Map\n        environment: \"object\", // Map\n        defer: \"function\" // Function\n      },\n\n      default: null\n    }),\n\n    /**\n     * Validates an incoming configuration and checks for proper keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig: qx.core.Environment.select(\"qx.debug\", {\n      true(name, config) {\n        // Validate type\n        if (\n          config.type &&\n          !(\n            config.type === \"static\" ||\n            config.type === \"abstract\" ||\n            config.type === \"singleton\"\n          )\n        ) {\n          throw new Error(\n            'Invalid type \"' +\n              config.type +\n              '\" definition for class \"' +\n              name +\n              '\"!'\n          );\n        }\n\n        // Validate non-static class on the \"extend\" key\n        if (config.type && config.type !== \"static\" && !config.extend) {\n          throw new Error(\n            'Invalid config in class \"' +\n              name +\n              '\"! Every non-static class has to extend at least the \"qx.core.Object\" class.'\n          );\n        }\n\n        // Validate keys\n        var allowed =\n          config.type === \"static\"\n            ? this.__staticAllowedKeys\n            : this.__allowedKeys;\n        for (var key in config) {\n          if (!allowed[key]) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] == null) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The value is undefined/null!'\n            );\n          }\n\n          if (typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        // Validate maps\n        var maps = [\n          \"statics\",\n          \"properties\",\n          \"members\",\n          \"environment\",\n          \"settings\",\n          \"variants\",\n          \"events\"\n        ];\n\n        for (var i = 0, l = maps.length; i < l; i++) {\n          var key = maps[i];\n\n          if (\n            config[key] !== undefined &&\n            (config[key].$$hash !== undefined ||\n              !qx.Bootstrap.isObject(config[key]))\n          ) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The value needs to be a map!'\n            );\n          }\n        }\n\n        // Validate include definition\n        if (config.include) {\n          if (qx.Bootstrap.getClass(config.include) === \"Array\") {\n            for (var i = 0, a = config.include, l = a.length; i < l; i++) {\n              if (a[i] == null || a[i].$$type !== \"Mixin\") {\n                throw new Error(\n                  'The include definition in class \"' +\n                    name +\n                    '\" contains an invalid mixin at position ' +\n                    i +\n                    \": \" +\n                    a[i]\n                );\n              }\n            }\n          } else {\n            throw new Error(\n              'Invalid include definition in class \"' +\n                name +\n                '\"! Only mixins and arrays of mixins are allowed!'\n            );\n          }\n        }\n\n        // Validate implement definition\n        if (config.implement) {\n          if (qx.Bootstrap.getClass(config.implement) === \"Array\") {\n            for (var i = 0, a = config.implement, l = a.length; i < l; i++) {\n              if (a[i] == null || a[i].$$type !== \"Interface\") {\n                throw new Error(\n                  'The implement definition in class \"' +\n                    name +\n                    '\" contains an invalid interface at position ' +\n                    i +\n                    \": \" +\n                    a[i]\n                );\n              }\n            }\n          } else {\n            throw new Error(\n              'Invalid implement definition in class \"' +\n                name +\n                '\"! Only interfaces and arrays of interfaces are allowed!'\n            );\n          }\n        }\n\n        // Check mixin compatibility\n        if (config.include) {\n          try {\n            qx.Mixin.checkCompatibility(config.include);\n          } catch (ex) {\n            throw new Error(\n              'Error in include definition of class \"' +\n                name +\n                '\"! ' +\n                ex.message\n            );\n          }\n        }\n\n        // Validate environment\n        if (config.environment) {\n          for (var key in config.environment) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden environment setting \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a ' +\n                  \"environment setting for an external namespace!\"\n              );\n            }\n          }\n        }\n\n        // Validate settings\n        if (config.settings) {\n          for (var key in config.settings) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden setting \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a default setting for an external namespace!'\n              );\n            }\n          }\n        }\n\n        // Validate variants\n        if (config.variants) {\n          for (var key in config.variants) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden variant \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a variant for an external namespace!'\n              );\n            }\n          }\n        }\n      },\n\n      default(name, config) {}\n    }),\n\n    /**\n     * Validates the interfaces required by abstract base classes\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} The configured class.\n     */\n    __validateAbstractInterfaces: qx.core.Environment.select(\"qx.debug\", {\n      true(clazz) {\n        var superclass = clazz.superclass;\n        while (superclass) {\n          if (superclass.$$classtype !== \"abstract\") {\n            break;\n          }\n\n          var interfaces = superclass.$$implements;\n          if (interfaces) {\n            for (var i = 0; i < interfaces.length; i++) {\n              qx.Interface.assert(clazz, interfaces[i], true);\n            }\n          }\n          superclass = superclass.superclass;\n        }\n      },\n\n      default(clazz) {}\n    }),\n\n    /**\n     * Attaches an annotation to a class\n     *\n     * @param clazz {Map} Static methods or fields\n     * @param group {String} Group name\n     * @param key {String} Name of the annotated item\n     * @param anno {Object} Annotation object\n     */\n    __attachAnno(clazz, group, key, anno) {\n      if (anno !== undefined) {\n        if (clazz.$$annotations === undefined) {\n          clazz.$$annotations = {};\n          clazz.$$annotations[group] = {};\n        } else if (clazz.$$annotations[group] === undefined) {\n          clazz.$$annotations[group] = {};\n        }\n\n        if (!qx.lang.Type.isArray(anno)) {\n          anno = [anno];\n        }\n\n        if (key) {\n          clazz.$$annotations[group][key] = anno;\n        } else {\n          clazz.$$annotations[group] = anno;\n        }\n      }\n    },\n\n    /**\n     * Creates a class by type. Supports modern inheritance etc.\n     *\n     * @param name {String} Full name of the class\n     * @param type {String} type of the class, i.e. \"static\", \"abstract\" or \"singleton\"\n     * @param extend {Class} Superclass to inherit from\n     * @param statics {Map} Static methods or fields\n     * @param construct {Function} Constructor of the class\n     * @param destruct {Function} Destructor of the class\n     * @param mixins {Mixin[]} array of mixins of the class\n     * @return {Class} The generated class\n     */\n    __createClass(name, type, extend, statics, construct, destruct, mixins) {\n      var isStrictMode = function () {\n        return typeof this == \"undefined\";\n      };\n\n      var clazz;\n\n      if (!extend && qx.core.Environment.get(\"qx.aspects\") == false) {\n        // Create empty/non-empty class\n        clazz = statics || {};\n        qx.Bootstrap.setDisplayNames(clazz, name);\n      } else {\n        clazz = {};\n\n        if (extend) {\n          // Create default constructor\n          if (!construct) {\n            construct = this.__createDefaultConstructor();\n          }\n\n          clazz = this.__wrapConstructor(construct, name, type);\n\n          // Add singleton getInstance()\n          if (type === \"singleton\") {\n            clazz.getInstance = this.getInstance;\n          }\n\n          qx.Bootstrap.setDisplayName(construct, name, \"constructor\");\n        }\n\n        // Copy statics\n        if (statics) {\n          qx.Bootstrap.setDisplayNames(statics, name);\n\n          var key;\n\n          for (var i = 0, a = Object.keys(statics), l = a.length; i < l; i++) {\n            key = a[i];\n            var staticValue = statics[key];\n\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              if (key.charAt(0) === \"@\") {\n                if (statics[key.substring(1)] === undefined) {\n                  throw new Error(\n                    'Annonation for static \"' +\n                      key.substring(1) +\n                      '\" of Class \"' +\n                      clazz.classname +\n                      '\" does not exist!'\n                  );\n                }\n                if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n                  throw new Error(\n                    'Cannot annotate private static \"' +\n                      key.substring(1) +\n                      '\" of Class \"' +\n                      clazz.classname\n                  );\n                }\n              }\n            }\n            if (key.charAt(0) === \"@\") {\n              continue;\n            }\n\n            if (qx.core.Environment.get(\"qx.aspects\")) {\n              if (staticValue instanceof Function) {\n                staticValue = qx.core.Aspect.wrap(\n                  name + \".\" + key,\n                  staticValue,\n                  \"static\"\n                );\n              }\n\n              clazz[key] = staticValue;\n            } else {\n              clazz[key] = staticValue;\n            }\n\n            // Attach annotations\n            this.__attachAnno(clazz, \"statics\", key, statics[\"@\" + key]);\n          }\n        }\n      }\n\n      // Create namespace\n      var basename = name ? qx.Bootstrap.createNamespace(name, clazz) : \"\";\n\n      // Store names in constructor/object\n      clazz.classname = name;\n      if (!isStrictMode()) {\n        try {\n          clazz.name = name;\n        } catch (ex) {\n          // Nothing\n        }\n      }\n      clazz.basename = basename;\n\n      // Store type info\n      clazz.$$type = \"Class\";\n      if (type) {\n        clazz.$$classtype = type;\n      }\n\n      // Attach toString\n      if (!clazz.hasOwnProperty(\"toString\")) {\n        clazz.toString = this.genericToString;\n      }\n\n      if (extend) {\n        qx.Bootstrap.extendClass(clazz, construct, extend, name, basename);\n\n        // Store destruct onto class\n        if (destruct) {\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            destruct = qx.core.Aspect.wrap(name, destruct, \"destructor\");\n          }\n\n          clazz.$$destructor = destruct;\n          qx.Bootstrap.setDisplayName(destruct, name, \"destruct\");\n        }\n      }\n\n      // Store class reference in global class registry\n      this.$$registry[name] = clazz;\n\n      // Return final class object\n      return clazz;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE ADD HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Attach events to the class\n     *\n     * @param clazz {Class} class to add the events to\n     * @param events {Map} map of event names the class fires.\n     * @param patch {Boolean ? false} Enable redefinition of event type?\n     */\n    __addEvents(clazz, events, patch) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (\n          typeof events !== \"object\" ||\n          qx.Bootstrap.getClass(events) === \"Array\"\n        ) {\n          throw new Error(\n            clazz.classname + \": the events must be defined as map!\"\n          );\n        }\n\n        for (var key in events) {\n          if (typeof events[key] !== \"string\") {\n            throw new Error(\n              clazz.classname +\n                \"/\" +\n                key +\n                \": the event value needs to be a string with the class name of the event object which will be fired.\"\n            );\n          }\n        }\n\n        // Compare old and new event type/value if patching is disabled\n        if (clazz.$$events && patch !== true) {\n          for (var key in events) {\n            if (\n              clazz.$$events[key] !== undefined &&\n              clazz.$$events[key] !== events[key]\n            ) {\n              throw new Error(\n                clazz.classname +\n                  \"/\" +\n                  key +\n                  \": the event value/type cannot be changed from \" +\n                  clazz.$$events[key] +\n                  \" to \" +\n                  events[key]\n              );\n            }\n          }\n        }\n      }\n\n      if (clazz.$$events) {\n        for (var key in events) {\n          clazz.$$events[key] = events[key];\n        }\n      } else {\n        clazz.$$events = events;\n      }\n    },\n\n    /**\n     * Attach properties to classes\n     *\n     * @param clazz {Class} class to add the properties to\n     * @param properties {Map} map of properties\n     * @param patch {Boolean ? false} Overwrite property with the limitations of a property\n               which means you are able to refine but not to replace (esp. for new properties)\n     */\n    __addProperties(clazz, properties, patch) {\n      // check for the property module\n      if (!qx.core.Environment.get(\"module.property\")) {\n        throw new Error(\"Property module disabled.\");\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.Bootstrap.isQxCoreObject(properties)) {\n          throw new Error(\"Invalid 'properties' for \" + clazz.classname);\n        }\n      }\n\n      var config;\n\n      if (patch === undefined) {\n        patch = false;\n      }\n\n      var proto = clazz.prototype;\n\n      for (var name in properties) {\n        config = properties[name];\n\n        // Check incoming configuration\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateProperty(clazz, name, config, patch);\n        }\n\n        // Store name into configuration\n        config.name = name;\n\n        // Add config to local registry\n        if (!config.refine) {\n          if (clazz.$$properties === undefined) {\n            clazz.$$properties = {};\n          }\n\n          clazz.$$properties[name] = config;\n        }\n\n        // Store init value to prototype. This makes it possible to\n        // overwrite this value in derived classes.\n        if (config.init !== undefined) {\n          clazz.prototype[\"$$init_\" + name] = config.init;\n        }\n\n        // register event name\n        if (config.event !== undefined) {\n          // break if no events layer loaded\n          if (!qx.core.Environment.get(\"module.events\")) {\n            throw new Error(\"Events module not enabled.\");\n          }\n          var event = {};\n          event[config.event] = \"qx.event.type.Data\";\n          if (config.async) {\n            event[config.event + \"Async\"] = \"qx.event.type.Data\";\n          }\n          this.__addEvents(clazz, event, patch);\n        }\n\n        // Remember inheritable properties\n        if (config.inheritable) {\n          this.__Property.$$inheritable[name] = true;\n          if (!proto.$$refreshInheritables) {\n            this.__Property.attachRefreshInheritables(clazz);\n          }\n        }\n\n        if (!config.refine) {\n          this.__Property.attachMethods(clazz, name, config);\n        }\n\n        // Add annotations\n        this.__attachAnno(clazz, \"properties\", name, config[\"@\"]);\n      }\n    },\n\n    /**\n     * Validates the given property\n     *\n     * @signature function(clazz, name, config, patch)\n     * @param clazz {Class} class to add property to\n     * @param name {String} name of the property\n     * @param config {Map} configuration map\n     * @param patch {Boolean ? false} enable refine/patch?\n     */\n    __validateProperty: qx.core.Environment.select(\"qx.debug\", {\n      true(clazz, name, config, patch) {\n        // check for properties\n        if (!qx.core.Environment.get(\"module.property\")) {\n          throw new Error(\"Property module disabled.\");\n        }\n\n        var has = this.hasProperty(clazz, name);\n\n        if (has) {\n          var existingProperty = this.getPropertyDefinition(clazz, name);\n\n          if (\n            config.refine &&\n            existingProperty.init === undefined &&\n            existingProperty[\"@\"] === undefined\n          ) {\n            this.warn(\n              \"Refine a property when there is previously no init or annotations defined. Property '\" +\n                name +\n                \"' of class '\" +\n                clazz.classname +\n                \"'.\"\n            );\n          }\n        }\n\n        if (!has && config.refine) {\n          throw new Error(\n            \"Could not refine non-existent property: '\" +\n              name +\n              \"' of class: '\" +\n              clazz.classname +\n              \"'!\"\n          );\n        }\n\n        if (has && !patch) {\n          throw new Error(\n            \"Class \" +\n              clazz.classname +\n              \" already has a property: \" +\n              name +\n              \"!\"\n          );\n        }\n\n        if (has && patch) {\n          if (!config.refine) {\n            throw new Error(\n              'Could not refine property \"' +\n                name +\n                '\" without a \"refine\" flag in the property definition! This class: ' +\n                clazz.classname +\n                \", original class: \" +\n                this.getByProperty(clazz, name).classname +\n                \".\"\n            );\n          }\n\n          for (var key in config) {\n            if (key !== \"init\" && key !== \"refine\" && key !== \"@\") {\n              throw new Error(\n                \"Class \" +\n                  clazz.classname +\n                  \" could not refine property: \" +\n                  name +\n                  \"! Key: \" +\n                  key +\n                  \" could not be refined!\"\n              );\n            }\n          }\n        }\n\n        // Check 0.7 keys\n        var allowed = config.group\n          ? this.__Property.$$allowedGroupKeys\n          : this.__Property.$$allowedKeys;\n        for (var key in config) {\n          if (allowed[key] === undefined) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] === undefined) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! The value is undefined: ' +\n                config[key]\n            );\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        if (config.transform != null) {\n          if (!(typeof config.transform === \"string\")) {\n            throw new Error(\n              'Invalid transform definition of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! Needs to be a String.'\n            );\n          }\n        }\n\n        if (config.check != null) {\n          if (\n            !qx.Bootstrap.isString(config.check) &&\n            !qx.Bootstrap.isArray(config.check) &&\n            !qx.Bootstrap.isFunction(config.check)\n          ) {\n            throw new Error(\n              'Invalid check definition of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! Needs to be a String, Array or Function.'\n            );\n          }\n        }\n      },\n\n      default: null\n    }),\n\n    /**\n     * Attach members to a class\n     *\n     * @param clazz {Class} clazz to add members to\n     * @param members {Map} The map of members to attach\n     * @param patch {Boolean ? false} Enable patching of\n     * @param base {Boolean ? true} Attach base flag to mark function as members\n     *     of this class\n     * @param wrap {Boolean ? false} Whether the member method should be wrapped.\n     *     this is needed to allow base calls in patched mixin members.\n     */\n    __addMembers(clazz, members, patch, base, wrap) {\n      var proto = clazz.prototype;\n      var key, member;\n      qx.Bootstrap.setDisplayNames(members, clazz.classname + \".prototype\");\n\n      for (var i = 0, a = Object.keys(members), l = a.length; i < l; i++) {\n        key = a[i];\n        member = members[key];\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (key.charAt(0) === \"@\") {\n            var annoKey = key.substring(1);\n            if (\n              members[annoKey] === undefined &&\n              proto[annoKey] === undefined\n            ) {\n              throw new Error(\n                'Annonation for \"' +\n                  annoKey +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" does not exist!'\n              );\n            }\n            if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n              throw new Error(\n                'Cannot annotate private member \"' +\n                  key.substring(1) +\n                  '\" of Class \"' +\n                  clazz.classname\n              );\n            }\n          } else {\n            if (\n              proto[key] !== undefined &&\n              key.charAt(0) === \"_\" &&\n              key.charAt(1) === \"_\"\n            ) {\n              throw new Error(\n                'Overwriting private member \"' +\n                  key +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" is not allowed!'\n              );\n            }\n\n            if (patch !== true && proto.hasOwnProperty(key)) {\n//              throw new Error(\n//                'Overwriting member \"' +\n//                  key +\n//                  '\" of Class \"' +\n//                  clazz.classname +\n//                  '\" is not allowed!'\n//              );\n            }\n          }\n        }\n\n        // Annotations are not members\n        if (key.charAt(0) === \"@\") {\n          var annoKey = key.substring(1);\n          if (members[annoKey] === undefined) {\n            this.__attachAnno(clazz, \"members\", annoKey, members[key]);\n          }\n          continue;\n        }\n\n        // If it's a property accessor, we need to install it now so that this.base can refer to it\n        if (proto[key] != undefined && proto[key].$$install) {\n          proto[key].$$install();\n        }\n\n        // Added helper stuff to functions\n        // Hint: Could not use typeof function because RegExp objects are functions, too\n        // Protect to apply base property and aspect support on special attributes e.g.\n        // classes which are function like as well.\n        if (\n          base !== false &&\n          member instanceof Function &&\n          member.$$type == null\n        ) {\n          // If the class has it's own implementation, we need to remember that method in the\n          //  mixed-in method's `.base`; wrap the method with a closure so that it can have a\n          //  `.base` set, if we were to set `member.base` it would mean that the mixin can\n          //  only be added into one class\n          if (wrap) {\n            if (proto[key]) {\n              member = qx.lang.Function.create(member, { always: true });\n            }\n            member.self = clazz;\n          }\n          member.base = proto[key];\n\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            member = qx.core.Aspect.wrap(\n              clazz.classname + \".\" + key,\n              member,\n              \"member\"\n            );\n          }\n        }\n\n        // Attach member\n        proto[key] = member;\n\n        // Attach annotations\n        this.__attachAnno(clazz, \"members\", key, members[\"@\" + key]);\n      }\n    },\n\n    /**\n     * Add a single interface to a class\n     *\n     * @param clazz {Class} class to add interface to\n     * @param iface {Interface} the Interface to add\n     */\n    __addInterface(clazz, iface) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!clazz || !iface) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n\n        // This differs from mixins, we only check if the interface is already\n        // directly used by this class. It is allowed however, to have an interface\n        // included multiple times by extends in the interfaces etc.\n        if (this.hasOwnInterface(clazz, iface)) {\n          throw new Error(\n            'Interface \"' +\n              iface.name +\n              '\" is already used by Class \"' +\n              clazz.classname +\n              \"!\"\n          );\n        }\n\n        // Check interface and wrap members\n        if (clazz.$$classtype !== \"abstract\") {\n          qx.Interface.assert(clazz, iface, true);\n        }\n      }\n\n      // Store interface reference\n      var list = qx.Interface.flatten([iface]);\n      if (clazz.$$implements) {\n        clazz.$$implements.push(iface);\n        clazz.$$flatImplements.push.apply(clazz.$$flatImplements, list);\n      } else {\n        clazz.$$implements = [iface];\n        clazz.$$flatImplements = list;\n      }\n    },\n\n    /**\n     * Include all features of the mixin into the given class, recursively.\n     *\n     * @param clazz {Class} The class onto which the mixin should be attached.\n     * @param mixin {Mixin} Include all features of this mixin\n     * @param patch {Boolean} Overwrite existing fields, functions and properties\n     */\n    __addMixin(clazz, mixin, patch) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!clazz || !mixin) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n      }\n\n      if (this.hasMixin(clazz, mixin)) {\n        return;\n      }\n\n      // Attach content\n      var list = qx.Mixin.flatten([mixin]);\n      var entry;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        entry = list[i];\n\n        // Attach events\n        if (entry.$$events) {\n          this.__addEvents(clazz, entry.$$events, patch);\n        }\n\n        // Attach properties (Properties are already readonly themselves, no patch handling needed)\n        if (entry.$$properties) {\n          this.__addProperties(clazz, entry.$$properties, patch);\n        }\n\n        // Attach members (Respect patch setting, but dont apply base variables)\n        if (entry.$$members) {\n          this.__addMembers(clazz, entry.$$members, patch, patch, patch);\n        }\n      }\n\n      // Store mixin reference\n      if (clazz.$$includes) {\n        clazz.$$includes.push(mixin);\n        clazz.$$flatIncludes.push.apply(clazz.$$flatIncludes, list);\n      } else {\n        clazz.$$includes = [mixin];\n        clazz.$$flatIncludes = list;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE FUNCTION HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the default constructor.\n     * This constructor just calls the constructor of the base class.\n     *\n     * @return {Function} The default constructor.\n     */\n    __createDefaultConstructor() {\n      function defaultConstructor() {\n        defaultConstructor.base.apply(this, arguments);\n      }\n\n      return defaultConstructor;\n    },\n\n    /**\n     * Generate a wrapper of the original class constructor in order to enable\n     * some of the advanced OO features (e.g. abstract class, singleton, mixins)\n     *\n     * @param construct {Function} the original constructor\n     * @param name {String} name of the class\n     * @param type {String} the user specified class type\n     * @return {Function} The wrapped constructor\n     */\n    __wrapConstructor(construct, name, type) {\n      var wrapper = function () {\n        var clazz = wrapper;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // new keyword check\n          if (!(this instanceof clazz)) {\n            throw new Error(\n              \"Please initialize '\" + name + \"' objects using the new keyword!\"\n            );\n          }\n\n          // add abstract and singleton checks\n          if (type === \"abstract\") {\n            if (this.classname === name) {\n              throw new Error(\n                \"The class ',\" +\n                  name +\n                  \"' is abstract! It is not possible to instantiate it.\"\n              );\n            }\n          } else if (type === \"singleton\") {\n            if (!clazz.$$allowconstruct) {\n              throw new Error(\n                \"The class '\" +\n                  name +\n                  \"' is a singleton! It is not possible to instantiate it directly. Use the static getInstance() method instead.\"\n              );\n            }\n          }\n        }\n\n        // Execute default constructor\n        var retval = clazz.$$original.apply(this, arguments);\n\n        // Initialize local mixins\n        if (clazz.$$includes) {\n          var mixins = clazz.$$flatIncludes;\n          for (var i = 0, l = mixins.length; i < l; i++) {\n            if (mixins[i].$$constructor) {\n              mixins[i].$$constructor.apply(this, arguments);\n            }\n          }\n        }\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // Mark instance as initialized\n          if (this.classname === name) {\n            this.$$initialized = true;\n          }\n        }\n\n        // Return optional return value\n        return retval;\n      };\n\n      if (qx.core.Environment.get(\"qx.aspects\")) {\n        var aspectWrapper = qx.core.Aspect.wrap(name, wrapper, \"constructor\");\n        wrapper.$$original = construct;\n        wrapper.constructor = aspectWrapper;\n        wrapper = aspectWrapper;\n      }\n\n      // Store original constructor\n      wrapper.$$original = construct;\n\n      // Store wrapper into constructor (needed for base calls etc.)\n      construct.wrapper = wrapper;\n\n      // Return generated wrapper\n      return wrapper;\n    }\n  },\n\n  defer() {\n    // Binding of already loaded bootstrap classes\n    if (qx.core.Environment.get(\"qx.aspects\")) {\n      for (var classname in qx.Bootstrap.$$registry) {\n        var statics = qx.Bootstrap.$$registry[classname];\n\n        for (var key in statics) {\n          // only functions, no regexps\n          if (statics[key] instanceof Function) {\n            statics[key] = qx.core.Aspect.wrap(\n              classname + \".\" + key,\n              statics[key],\n              \"static\"\n            );\n          }\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,UAApB,EAAgC;IAC9BC,OAAO,EAAE;MACP;AACJ;AACA;AACA;MACIC,QAAU,EAAE,OACRN,EAAE,CAACO,IAAH,CAAQC,QADA,GAER,IAPG;;MASP;AACJ;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIJ,MAAM,CAACK,IAAD,EAAOC,MAAP,EAAe;QACnB,IAAI;UACF,OAAO,KAAKC,QAAL,CAAkBF,IAAlB,EAAwBC,MAAxB,CAAP;QACD,CAFD,CAEE,OAAOE,EAAP,EAAW;UACXZ,EAAE,CAACa,KAAH,CAASC,wBAAT,GAAoC,IAApC;UACA,MAAMF,EAAN;QA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"
}