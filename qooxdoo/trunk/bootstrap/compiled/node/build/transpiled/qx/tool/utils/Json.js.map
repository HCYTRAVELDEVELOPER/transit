{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Ajv",
    "require",
    "betterAjvErrors",
    "fs",
    "tool",
    "utils",
    "Promisify",
    "Class",
    "define",
    "statics",
    "parseJson",
    "str",
    "trim",
    "ast",
    "json",
    "Parser",
    "parseToAst",
    "Stringify",
    "astToObject",
    "validate",
    "schema",
    "warnOnly",
    "ajv",
    "allErrors",
    "strict",
    "lang",
    "Type",
    "isArray",
    "addSchema",
    "$id",
    "message",
    "errors",
    "format",
    "indent",
    "compiler",
    "Console",
    "warn",
    "err",
    "msg",
    "Array",
    "length",
    "reduce",
    "prev",
    "curr",
    "index",
    "error",
    "dataPath",
    "Error",
    "getSchemaInfo",
    "data",
    "schemaInfo",
    "$schema",
    "match",
    "type",
    "toLocaleLowerCase",
    "version",
    "replace",
    "targets",
    "info",
    "provides",
    "libraries",
    "contribs",
    "Object",
    "getOwnPropertyNames",
    "loadJsonAsync",
    "filename",
    "existsAsync",
    "readFileAsync",
    "Json",
    "ex",
    "saveJsonAsync",
    "writeFileAsync",
    "JSON",
    "stringify",
    "unlinkAsync"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/utils/Json.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2018 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *      * oetiker\n *      * cboulanger\n *\n * *********************************************************************** */\n\nconst Ajv = require(\"ajv\");\nconst betterAjvErrors = require(\"better-ajv-errors\");\nconst fs = qx.tool.utils.Promisify.fs;\n\nqx.Class.define(\"qx.tool.utils.Json\", {\n  statics: {\n    /**\n     * Parses JSON string into an object\n     * @param str {String} the data to parse\n     * @return {Object}\n     */\n    parseJson(str) {\n      if (str === null || !str.trim()) {\n        return null;\n      }\n      let ast = qx.tool.utils.json.Parser.parseToAst(str.trim());\n      return qx.tool.utils.json.Stringify.astToObject(ast);\n    },\n\n    /**\n     * Validates a json object against the given schema signature and outputs\n     * diagnostic information if validation failed\n     * @param json {Object} The json object to check\n     * @param schema {Array|Object}\n     *    The json-schema object or an array of schema objects. If array,\n     *    only the first is used to validate, but the first schema can\n     *    refer to the others.\n     * @param warnOnly {Boolean} If true, do not throw a fatal error\n     * @return {Boolean}\n     *    Returns true if successful and false on failure if the\n     *    'warnOnly' parameter is true\n     */\n    validate(json, schema, warnOnly = false) {\n      let ajv = new Ajv({\n        allErrors: true,\n        strict: false\n      });\n\n      if (qx.lang.Type.isArray(schema)) {\n        ajv.addSchema(schema);\n        schema = schema[0].$id;\n      }\n      if (ajv.validate(schema, json)) {\n        // success!\n        return true;\n      }\n      if (warnOnly) {\n        const message = betterAjvErrors(schema.$id, json, ajv.errors, {\n          format: \"cli\",\n          indent: 2\n        });\n\n        qx.tool.compiler.Console.warn(\n          \"JSON data does not validate against \" + schema.$id + \":\\n\" + message\n        );\n\n        return false;\n      }\n      // throw fatal error\n      let err = betterAjvErrors(schema.$id, json, ajv.errors, { format: \"js\" });\n      let msg;\n      if (Array.isArray(err) && err.length) {\n        msg = err\n          .reduce(\n            (prev, curr, index) => `${prev} ${index + 1}) ${curr.error}`,\n            \"\"\n          )\n          .trim();\n      } else if (Array.isArray(ajv.errors)) {\n        msg = ajv.errors\n          .reduce(\n            (prev, curr, index) =>\n              `${prev} ${index + 1}) ${curr.dataPath} ${curr.message}`,\n            \"\"\n          )\n          .trim();\n      } else {\n        msg = \"Unknown error during validation.\";\n      }\n      throw new Error(msg);\n    },\n\n    /**\n     * Identify the type and version of the config file schema in the data that\n     * has been passed. Return an object containing type and version of the json\n     * schema, or null if no schema could been detected\n     * Todo: This needs to be rewritten.\n     * @param data {Object} JSON data\n     * @return {{type,version}|null}\n     */\n    getSchemaInfo(data) {\n      let schemaInfo = {};\n      if (data.$schema) {\n        let match = data.$schema.match(/\\/([^-]+)-([^.]+)\\.json$/);\n        if (match) {\n          schemaInfo.type = match[1].toLocaleLowerCase();\n          schemaInfo.version = match[2].replace(/-/g, \".\");\n        } else {\n          // deprecated schema url\n          let match = data.$schema.match(/\\/v([^/]+)\\/([^.]+)\\.json$/);\n          if (match) {\n            schemaInfo.type = match[2].toLocaleLowerCase();\n            schemaInfo.version = match[1];\n          }\n        }\n        // guess file type, this would be easy with the file name!\n      } else if (data.targets) {\n        schemaInfo.type = \"compile\";\n        schemaInfo.version = \"0\";\n      } else if (data.info && data.provides) {\n        schemaInfo.type = \"manifest\";\n        schemaInfo.version = \"0\";\n      } else if (data.libraries || data.contribs) {\n        schemaInfo.type = \"qooxdoo\";\n        schemaInfo.version = \"0\";\n      }\n      // no schema was found\n      if (Object.getOwnPropertyNames(schemaInfo).length === 0) {\n        return null;\n      }\n      return schemaInfo;\n    },\n\n    /**\n     * Loads JSON data from a file and returns it as an object; if the file does not exist, then\n     * null is returned\n     *\n     * @param filename {String} the filename to load\n     * @return {Object|null} the parsed contents, or null if the file does not exist\n     */\n    async loadJsonAsync(filename) {\n      if (!(await fs.existsAsync(filename))) {\n        return null;\n      }\n      let data = await fs.readFileAsync(filename, \"utf8\");\n      try {\n        return qx.tool.utils.Json.parseJson(data);\n      } catch (ex) {\n        throw new Error(\"Failed to load \" + filename + \": \" + ex);\n      }\n    },\n\n    /**\n     * Saves JSON data to a file, or erases the file if data is null\n     *\n     * @param filename {String} filename to write to\n     * @param data {Object|null} the data to write. If null, remove the file\n     */\n    async saveJsonAsync(filename, data) {\n      if (data !== null) {\n        await fs.writeFileAsync(\n          filename,\n          JSON.stringify(data, null, 2),\n          \"utf8\"\n        );\n      } else if (await fs.existsAsync(filename)) {\n        fs.unlinkAsync(filename);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEA,MAAMC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;EACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;EACA,MAAME,EAAE,GAAGP,EAAE,CAACQ,IAAH,CAAQC,KAAR,CAAcC,SAAd,CAAwBH,EAAnC;EAEAP,EAAE,CAACW,KAAH,CAASC,MAAT,CAAgB,oBAAhB,EAAsC;IACpCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MACIC,SAAS,CAACC,GAAD,EAAM;QACb,IAAIA,GAAG,KAAK,IAAR,IAAgB,CAACA,GAAG,CAACC,IAAJ,EAArB,EAAiC;UAC/B,OAAO,IAAP;QACD;;QACD,IAAIC,GAAG,GAAGjB,EAAE,CAACQ,IAAH,CAAQC,KAAR,CAAcS,IAAd,CAAmBC,MAAnB,CAA0BC,UAA1B,CAAqCL,GAAG,CAACC,IAAJ,EAArC,CAAV;QACA,OAAOhB,EAAE,CAACQ,IAAH,CAAQC,KAAR,CAAcS,IAAd,CAAmBG,SAAnB,CAA6BC,WAA7B,CAAyCL,GAAzC,CAAP;MACD,CAZM;;MAcP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIM,QAAQ,CAACL,IAAD,EAAOM,MAAP,EAAeC,QAAQ,GAAG,KAA1B,EAAiC;QACvC,IAAIC,GAAG,GAAG,IAAItB,GAAJ,CAAQ;UAChBuB,SAAS,EAAE,IADK;UAEhBC,MAAM,EAAE;QAFQ,CAAR,CAAV;;QAKA,IAAI5B,EAAE,CAAC6B,IAAH,CAAQC,IAAR,CAAaC,OAAb,CAAqBP,MAArB,CAAJ,EAAkC;UAChCE,GAAG,CAACM,SAAJ,CAAcR,MAAd;UACAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAN,CAAUS,GAAnB;QACD;;QACD,IAAIP,GAAG,CAACH,QAAJ,CAAaC,MAAb,EAAqBN,IAArB,CAAJ,EAAgC;UAC9B;UACA,OAAO,IAAP;QACD;;QACD,IAAIO,QAAJ,EAAc;UACZ,MAAMS,OAAO,GAAG5B,eAAe,CAACkB,MAAM,CAACS,GAAR,EAAaf,IAAb,EAAmBQ,GAAG,CAACS,MAAvB,EAA+B;YAC5DC,MAAM,EAAE,KADoD;YAE5DC,MAAM,EAAE;UAFoD,CAA/B,CAA/B;UAKArC,EAAE,CAACQ,IAAH,CAAQ8B,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CACE,yCAAyChB,MAAM,CAACS,GAAhD,GAAsD,KAAtD,GAA8DC,OADhE;UAIA,OAAO,KAAP;QACD,CAzBsC,CA0BvC;;;QACA,IAAIO,GAAG,GAAGnC,eAAe,CAACkB,MAAM,CAACS,GAAR,EAAaf,IAAb,EAAmBQ,GAAG,CAACS,MAAvB,EAA+B;UAAEC,MAAM,EAAE;QAAV,CAA/B,CAAzB;QACA,IAAIM,GAAJ;;QACA,IAAIC,KAAK,CAACZ,OAAN,CAAcU,GAAd,KAAsBA,GAAG,CAACG,MAA9B,EAAsC;UACpCF,GAAG,GAAGD,GAAG,CACNI,MADG,CAEF,CAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,KAAwB,GAAEF,IAAK,IAAGE,KAAK,GAAG,CAAE,KAAID,IAAI,CAACE,KAAM,EAFzD,EAGF,EAHE,EAKHjC,IALG,EAAN;QAMD,CAPD,MAOO,IAAI2B,KAAK,CAACZ,OAAN,CAAcL,GAAG,CAACS,MAAlB,CAAJ,EAA+B;UACpCO,GAAG,GAAGhB,GAAG,CAACS,MAAJ,CACHU,MADG,CAEF,CAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,KACG,GAAEF,IAAK,IAAGE,KAAK,GAAG,CAAE,KAAID,IAAI,CAACG,QAAS,IAAGH,IAAI,CAACb,OAAQ,EAHvD,EAIF,EAJE,EAMHlB,IANG,EAAN;QAOD,CARM,MAQA;UACL0B,GAAG,GAAG,kCAAN;QACD;;QACD,MAAM,IAAIS,KAAJ,CAAUT,GAAV,CAAN;MACD,CA3EM;;MA6EP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIU,aAAa,CAACC,IAAD,EAAO;QAClB,IAAIC,UAAU,GAAG,EAAjB;;QACA,IAAID,IAAI,CAACE,OAAT,EAAkB;UAChB,IAAIC,KAAK,GAAGH,IAAI,CAACE,OAAL,CAAaC,KAAb,CAAmB,0BAAnB,CAAZ;;UACA,IAAIA,KAAJ,EAAW;YACTF,UAAU,CAACG,IAAX,GAAkBD,KAAK,CAAC,CAAD,CAAL,CAASE,iBAAT,EAAlB;YACAJ,UAAU,CAACK,OAAX,GAAqBH,KAAK,CAAC,CAAD,CAAL,CAASI,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAArB;UACD,CAHD,MAGO;YACL;YACA,IAAIJ,KAAK,GAAGH,IAAI,CAACE,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,CAAZ;;YACA,IAAIA,KAAJ,EAAW;cACTF,UAAU,CAACG,IAAX,GAAkBD,KAAK,CAAC,CAAD,CAAL,CAASE,iBAAT,EAAlB;cACAJ,UAAU,CAACK,OAAX,GAAqBH,KAAK,CAAC,CAAD,CAA1B;YACD;UACF,CAZe,CAahB;;QACD,CAdD,MAcO,IAAIH,IAAI,CAACQ,OAAT,EAAkB;UACvBP,UAAU,CAACG,IAAX,GAAkB,SAAlB;UACAH,UAAU,CAACK,OAAX,GAAqB,GAArB;QACD,CAHM,MAGA,IAAIN,IAAI,CAACS,IAAL,IAAaT,IAAI,CAACU,QAAtB,EAAgC;UACrCT,UAAU,CAACG,IAAX,GAAkB,UAAlB;UACAH,UAAU,CAACK,OAAX,GAAqB,GAArB;QACD,CAHM,MAGA,IAAIN,IAAI,CAACW,SAAL,IAAkBX,IAAI,CAACY,QAA3B,EAAqC;UAC1CX,UAAU,CAACG,IAAX,GAAkB,SAAlB;UACAH,UAAU,CAACK,OAAX,GAAqB,GAArB;QACD,CAzBiB,CA0BlB;;;QACA,IAAIO,MAAM,CAACC,mBAAP,CAA2Bb,UAA3B,EAAuCV,MAAvC,KAAkD,CAAtD,EAAyD;UACvD,OAAO,IAAP;QACD;;QACD,OAAOU,UAAP;MACD,CApHM;;MAsHP;AACJ;AACA;AACA;AACA;AACA;AACA;MACI,MAAMc,aAAN,CAAoBC,QAApB,EAA8B;QAC5B,IAAI,EAAE,MAAM9D,EAAE,CAAC+D,WAAH,CAAeD,QAAf,CAAR,CAAJ,EAAuC;UACrC,OAAO,IAAP;QACD;;QACD,IAAIhB,IAAI,GAAG,MAAM9C,EAAE,CAACgE,aAAH,CAAiBF,QAAjB,EAA2B,MAA3B,CAAjB;;QACA,IAAI;UACF,OAAOrE,EAAE,CAACQ,IAAH,CAAQC,KAAR,CAAc+D,IAAd,CAAmB1D,SAAnB,CAA6BuC,IAA7B,CAAP;QACD,CAFD,CAEE,OAAOoB,EAAP,EAAW;UACX,MAAM,IAAItB,KAAJ,CAAU,oBAAoBkB,QAApB,GAA+B,IAA/B,GAAsCI,EAAhD,CAAN;QACD;MACF,CAvIM;;MAyIP;AACJ;AACA;AACA;AACA;AACA;MACI,MAAMC,aAAN,CAAoBL,QAApB,EAA8BhB,IAA9B,EAAoC;QAClC,IAAIA,IAAI,KAAK,IAAb,EAAmB;UACjB,MAAM9C,EAAE,CAACoE,cAAH,CACJN,QADI,EAEJO,IAAI,CAACC,SAAL,CAAexB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAFI,EAGJ,MAHI,CAAN;QAKD,CAND,MAMO,IAAI,MAAM9C,EAAE,CAAC+D,WAAH,CAAeD,QAAf,CAAV,EAAoC;UACzC9D,EAAE,CAACuE,WAAH,CAAeT,QAAf;QACD;MACF;;IAzJM;EAD2B,CAAtC;EA5BArE,EAAE,CAACQ,IAAH,CAAQC,KAAR,CAAc+D,IAAd,CAAmBrE,aAAnB,GAAmCA,aAAnC"
}