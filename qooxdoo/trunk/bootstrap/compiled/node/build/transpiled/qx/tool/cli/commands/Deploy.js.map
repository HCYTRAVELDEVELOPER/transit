{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "fs",
    "require",
    "path",
    "Class",
    "define",
    "extend",
    "tool",
    "cli",
    "commands",
    "Compile",
    "statics",
    "YARGS_BUILDER",
    "out",
    "describe",
    "alias",
    "nargs",
    "type",
    "default",
    "getYargsCommand",
    "command",
    "builder",
    "res",
    "Object",
    "assign",
    "Deploy",
    "watch",
    "download",
    "bundling",
    "minify",
    "events",
    "afterDeploy",
    "members",
    "processArgs",
    "argv",
    "clean",
    "compiler",
    "Console",
    "print",
    "compileArgv",
    "writeLibraryInfo",
    "updatePoFiles",
    "saveUnminified",
    "target",
    "deploying",
    "lang",
    "mergeWith",
    "process",
    "appNames",
    "appName",
    "split",
    "forEach",
    "utils",
    "Promisify",
    "eachOfSeries",
    "getMakers",
    "maker",
    "getTarget",
    "getApplications",
    "app",
    "getName",
    "getDeploy",
    "deployDir",
    "getDeployDir",
    "files",
    "Utils",
    "deleteRecursive",
    "makerIndex",
    "getType",
    "sourceMaps",
    "getDeployMap",
    "getSaveSourceInMap",
    "appRoot",
    "getApplicationRoot",
    "destRoot",
    "join",
    "__copyFiles",
    "from",
    "getOutputDir",
    "existsSync",
    "to",
    "sync",
    "copyFileSync",
    "data",
    "targetDir",
    "application",
    "fireDataEventAsync",
    "getCompilerApi",
    "srcDir",
    "destDir",
    "makeDirs",
    "readdirAsync",
    "eachOf",
    "file",
    "stat",
    "statAsync",
    "isFile",
    "ext",
    "extname",
    "makeParentDir",
    "rs",
    "createReadStream",
    "encoding",
    "emitClose",
    "ws",
    "createWriteStream",
    "ss",
    "StripSourceMapTransform",
    "Promise",
    "resolve",
    "reject",
    "on",
    "pipe",
    "copyFile",
    "defer",
    "addMessageIds"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/Deploy.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2020 Zenesis Ltd https://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n     * Henner Kollmann (Henner.Kollmann@gmx.de, @hkollmann)\n\n************************************************************************ */\nconst fs = require(\"fs\");\nconst path = require(\"upath\");\n\n/**\n * Build and deploy a project.\n *\n * To add your own deployment actions, use the `compile.js` file by\n *\n * - adding a listener for the \"afterDeploy\" event fired on the command\n * instance  in the `load()` method of the class extending {@link\n * qx.tool.cli.api.LibraryApi} or {@link qx.tool.cli.api.CompilerApi}.\n *\n * - or by implementing a `afterDeploy()` method in the class\n * extending {@link qx.tool.cli.api.CompilerApi}\n *\n * The event and/or method is called with a {@link qx.event.type.Data}\n * containing an object with the properties described below.\n *\n */\nqx.Class.define(\"qx.tool.cli.commands.Deploy\", {\n  extend: qx.tool.cli.commands.Compile,\n  statics: {\n    YARGS_BUILDER: {\n      out: {\n        describe: \"Output directory for the deployment\",\n        alias: \"o\"\n      },\n\n      \"app-name\": {\n        describe:\n          \"The name of the application to deploy (default is all apps), can be comma separated list\",\n        nargs: 1,\n        type: \"string\"\n      },\n\n      \"source-maps\": {\n        describe: \"Enable source maps\",\n        type: \"boolean\",\n        default: false,\n        alias: \"m\"\n      }\n    },\n\n    getYargsCommand() {\n      return {\n        command: \"deploy [options]\",\n        describe: \"deploys qooxdoo application(s)\",\n        builder: (() => {\n          let res = Object.assign(\n            {},\n            qx.tool.cli.commands.Compile.YARGS_BUILDER,\n            qx.tool.cli.commands.Deploy.YARGS_BUILDER\n          );\n\n          delete res.watch;\n          delete res[\"write-library-info\"];\n          delete res.download;\n          delete res[\"update-po-files\"];\n          delete res[\"save-unminified\"];\n          delete res.bundling;\n          delete res.minify;\n          return res;\n        })()\n      };\n    }\n  },\n\n  events: {\n    /***\n     * fired after deploying. With this event\n     * application can do aditional copying.\n     *\n     * The event data is an object with the following properties:\n     *\n     * targetDir  : {String}  The target dir of the build\n     * deployDir  : {String}  The output dir for the deployment\n     * argv       : {Object}  Arguments\n     * application: {Object}  application to build\n     */\n    afterDeploy: \"qx.event.type.Data\"\n  },\n\n  members: {\n    /*\n     * @Override\n     */\n    processArgs(argv) {\n      super.processArgs(argv);\n      if (!argv.clean) {\n        qx.tool.compiler.Console.print(\"qx.tool.cli.deploy.notClean\");\n      }\n\n      let compileArgv = {\n        writeLibraryInfo: false,\n        download: false,\n        updatePoFiles: false,\n        saveUnminified: false,\n        bundling: true,\n        minify: \"mangle\",\n        target: \"build\",\n        deploying: true\n      };\n\n      qx.lang.Object.mergeWith(argv, compileArgv);\n    },\n\n    /*\n     * @Override\n     */\n    async process() {\n      await super.process();\n\n      let argv = this.argv;\n      let appNames = null;\n      if (argv.appName) {\n        appNames = {};\n        argv.appName.split(\",\").forEach(appName => (appNames[appName] = true));\n      }\n\n      if (argv.clean) {\n        await qx.tool.utils.Promisify.eachOfSeries(\n          this.getMakers(),\n          async maker => {\n            let target = maker.getTarget();\n\n            await qx.tool.utils.Promisify.eachOfSeries(\n              maker.getApplications(),\n              async app => {\n                if (appNames && !appNames[app.getName()]) {\n                  return;\n                }\n                if (app.getDeploy() === false) {\n                  return;\n                }\n                let deployDir =\n                  argv.out ||\n                  (typeof target.getDeployDir == \"function\" &&\n                    target.getDeployDir());\n                if (deployDir) {\n                  await qx.tool.utils.files.Utils.deleteRecursive(deployDir);\n                }\n              }\n            );\n          }\n        );\n      }\n\n      await qx.tool.utils.Promisify.eachOfSeries(\n        this.getMakers(),\n        async (maker, makerIndex) => {\n          let target = maker.getTarget();\n\n          await qx.tool.utils.Promisify.eachOfSeries(\n            maker.getApplications(),\n            async app => {\n              if (appNames && !appNames[app.getName()]) {\n                return;\n              }\n              if (app.getDeploy() === false) {\n                return;\n              }\n              let deployDir =\n                argv.out ||\n                (typeof target.getDeployDir == \"function\" &&\n                  target.getDeployDir());\n              if (!deployDir) {\n                qx.tool.compiler.Console.print(\n                  \"qx.tool.cli.deploy.deployDirNotSpecified\",\n                  target.getType()\n                );\n\n                return;\n              }\n\n              let sourceMaps =\n                argv.sourceMaps ||\n                (typeof target.getDeployMap == \"function\" &&\n                  target.getDeployMap()) ||\n                (typeof target.getSaveSourceInMap == \"function\" &&\n                  target.getSaveSourceInMap());\n              let appRoot = target.getApplicationRoot(app);\n              let destRoot = path.join(deployDir, app.getName());\n              await this.__copyFiles(appRoot, destRoot, sourceMaps);\n\n              {\n                let from = path.join(target.getOutputDir(), \"resource\");\n                if (fs.existsSync(from)) {\n                  let to = path.join(deployDir, \"resource\");\n                  if (makerIndex == 0 && argv.clean) {\n                    await qx.tool.utils.files.Utils.deleteRecursive(to);\n                  }\n                  await qx.tool.utils.files.Utils.sync(from, to);\n                }\n              }\n              {\n                let from = path.join(target.getOutputDir(), \"index.html\");\n                let to = path.join(deployDir, \"index.html\");\n                if (fs.existsSync(from)) {\n                  fs.copyFileSync(from, to);\n                }\n              }\n              let data = {\n                targetDir: target.getOutputDir(),\n                deployDir: deployDir,\n                argv: argv,\n                application: app\n              };\n\n              await this.fireDataEventAsync(\"afterDeploy\", data);\n              if (\n                this.getCompilerApi() &&\n                typeof this.getCompilerApi().afterDeploy == \"function\"\n              ) {\n                await this.getCompilerApi().afterDeploy(data);\n              }\n            }\n          );\n        }\n      );\n    },\n\n    async __copyFiles(srcDir, destDir, sourceMaps) {\n      await qx.tool.utils.Utils.makeDirs(destDir);\n      let files = await fs.readdirAsync(srcDir);\n      await qx.tool.utils.Promisify.eachOf(files, async file => {\n        let from = path.join(srcDir, file);\n        let to = path.join(destDir, file);\n\n        let stat = await fs.statAsync(from);\n        if (!stat.isFile()) {\n          await this.__copyFiles(from, to, sourceMaps);\n          return;\n        }\n        let ext = path.extname(file);\n        if (ext == \".map\" && !sourceMaps) {\n          return;\n        }\n        if (ext == \".js\" && !sourceMaps) {\n          await qx.tool.utils.Utils.makeParentDir(to);\n          let rs = fs.createReadStream(from, {\n            encoding: \"utf8\",\n            emitClose: true\n          });\n\n          let ws = fs.createWriteStream(to, {\n            encoding: \"utf8\",\n            emitClose: true\n          });\n\n          let ss = new qx.tool.utils.Utils.StripSourceMapTransform();\n          await new qx.Promise((resolve, reject) => {\n            rs.on(\"error\", reject);\n            ws.on(\"error\", reject);\n            ws.on(\"finish\", resolve);\n            rs.pipe(ss);\n            ss.pipe(ws);\n          });\n        } else {\n          await qx.tool.utils.files.Utils.copyFile(from, to);\n        }\n      });\n    }\n  },\n\n  defer(statics) {\n    qx.tool.compiler.Console.addMessageIds(\n      {\n        \"qx.tool.cli.deploy.deployDirNotSpecified\":\n          \"No deploy dir for target <%1> configured! Use --out parameter or deployPath target property in compile.json.\"\n      },\n\n      \"error\"\n    );\n\n    qx.tool.compiler.Console.addMessageIds(\n      {\n        \"qx.tool.cli.deploy.notClean\":\n          \"Incremental build compilation - this is faster but may preserve old artifacts, it is recommended to use --clean command line option\"\n      },\n\n      \"warning\"\n    );\n  }\n});\n"
  ],
  "mappings": "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"
}