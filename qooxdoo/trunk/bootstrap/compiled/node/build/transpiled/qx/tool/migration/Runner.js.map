{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "process",
    "require",
    "semver",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "properties",
    "dryRun",
    "check",
    "init",
    "verbose",
    "qxVersion",
    "validate",
    "version",
    "valid",
    "nullable",
    "members",
    "runMigrations",
    "tool",
    "config",
    "Utils",
    "getQxVersion",
    "appQxVersion",
    "getAppQxVersion",
    "debug",
    "getDryRun",
    "migrationClasses",
    "getOwnPropertyNames",
    "migration",
    "filter",
    "clazz",
    "match",
    "map",
    "getByName",
    "applied",
    "pending",
    "Clazz",
    "migrationInstance",
    "migrationVersion",
    "getVersion",
    "skip",
    "lt",
    "gt",
    "classname",
    "migrationMethods",
    "prototype",
    "key",
    "startsWith",
    "method",
    "previousApplied",
    "getApplied",
    "previousPending",
    "getPending",
    "Runner"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/migration/Runner.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2021 The authors\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\nconst process = require(\"process\");\nconst semver = require(\"semver\");\n\n/**\n * Runs all available migrations\n */\nqx.Class.define(\"qx.tool.migration.Runner\", {\n  extend: qx.core.Object,\n  properties: {\n    /**\n     * Whether to apply the migrations (false) or just announce them (true)\n     */\n    dryRun: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to log additional output for debugging\n     */\n    verbose: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * The maximum qooxdoo version for which the migration class should be applicable\n     */\n    qxVersion: {\n      check: \"String\",\n      validate: version => semver.valid(version),\n      nullable: true\n    }\n  },\n\n  members: {\n    /**\n     * Instantiates all migration classes in the `qx.tool.migration` namespace which\n     * match the version of the current application, and runs all methods of\n     * these instances that start with \"migrate\".\n     *\n     * The methods must return an object with two numeric properties, `applied`\n     * containing the number of migrations that have been applied, `pending`\n     * containing the number of those that still have to be applied (for example,\n     * after a dry-run).\n     *\n     * @return {Promise<{applied, pending}>}\n     */\n    async runMigrations() {\n      let qxVersion = await qx.tool.config.Utils.getQxVersion();\n      let appQxVersion = await qx.tool.config.Utils.getAppQxVersion();\n      this.debug(\n        `${\n          this.getDryRun() ? \"Checking\" : \"Running\"\n        } migrations for app qx version ${appQxVersion} and current qooxdoo version ${qxVersion}`\n      );\n\n      let migrationClasses = Object.getOwnPropertyNames(qx.tool.migration)\n        .filter(clazz => clazz.match(/^M[0-9_]+$/))\n        .map(clazz => qx.Class.getByName(\"qx.tool.migration.\" + clazz));\n      let applied = 0;\n      let pending = 0;\n      for (let Clazz of migrationClasses) {\n        let migrationInstance = new Clazz(this);\n        let migrationVersion = migrationInstance.getVersion();\n        let qxVersion = this.getQxVersion();\n        this.debug(\n          `>>> Migration version: ${migrationVersion}, maximum qx version: ${qxVersion}`\n        );\n\n        let skip =\n          (appQxVersion && !semver.lt(appQxVersion, migrationVersion)) ||\n          (qxVersion && semver.gt(migrationVersion, qxVersion));\n        if (skip) {\n          this.debug(`>>> Skipping migration ${Clazz.classname}.`);\n        } else {\n          this.debug(`>>> Running migration ${Clazz.classname}...`);\n        }\n        if (skip) {\n          continue;\n        }\n        let migrationMethods = Object.getOwnPropertyNames(Clazz.prototype)\n          .filter(key => key.startsWith(\"migrate\"))\n          .filter(key => typeof Clazz.prototype[key] == \"function\");\n\n        for (let method of migrationMethods) {\n          let previousApplied = migrationInstance.getApplied();\n          let previousPending = migrationInstance.getPending();\n          await migrationInstance[method]();\n          this.debug(\n            `>>> - ${method}: ${\n              migrationInstance.getApplied() - previousApplied\n            } applied/${\n              migrationInstance.getPending() - previousPending\n            } pending`\n          );\n        }\n        applied += migrationInstance.getApplied();\n        pending += migrationInstance.getPending();\n        this.debug(\n          `>>> Done with ${Clazz.classname}: ${applied} migrations applied, ${pending} migrations pending.`\n        );\n      }\n\n      return { applied, pending };\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}