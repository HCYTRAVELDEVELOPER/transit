{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "path",
    "require",
    "fs",
    "async",
    "promisify",
    "child_process",
    "psTree",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "newExternalPromise",
    "resolve",
    "reject",
    "promise",
    "Promise",
    "resolve_",
    "reject_",
    "promisifyThis",
    "fn",
    "self",
    "args",
    "slice",
    "push",
    "err",
    "result",
    "apply",
    "ex",
    "UserError",
    "Error",
    "constructor",
    "message",
    "name",
    "stack",
    "formatTime",
    "millisec",
    "seconds",
    "Math",
    "floor",
    "minutes",
    "hours",
    "mkpath",
    "dir",
    "cb",
    "normalize",
    "segs",
    "split",
    "sep",
    "made",
    "eachSeries",
    "seg",
    "length",
    "exists",
    "mkdir",
    "code",
    "stat",
    "isDirectory",
    "mkParentPath",
    "pop",
    "join",
    "makeParentDir",
    "filename",
    "bind",
    "makeDirs",
    "LineCountingTransform",
    "StripSourceMapTransform",
    "ToStringWriteStream",
    "isPlainObject",
    "obj",
    "getPrototypeOf",
    "proto",
    "prototype",
    "toString",
    "call",
    "runCommand",
    "cwd",
    "options",
    "filter",
    "value",
    "cmd",
    "shift",
    "error",
    "console",
    "log",
    "env",
    "process",
    "assign",
    "proc",
    "spawn",
    "shell",
    "exitCode",
    "output",
    "messages",
    "stdout",
    "on",
    "data",
    "trim",
    "stderr",
    "run",
    "opts",
    "exe",
    "Logger",
    "debug",
    "tool",
    "utils",
    "Utils",
    "exec",
    "parseCommand",
    "str",
    "inQuote",
    "inArg",
    "lastC",
    "start",
    "i",
    "c",
    "arg",
    "substring",
    "quoteCommand",
    "SPECIALS",
    "map",
    "indexOf",
    "replace",
    "formatCommand",
    "killTree",
    "parentId",
    "children",
    "forEach",
    "item",
    "kill",
    "PID",
    "getTemplateDir",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "dirname",
    "isExplicitArg",
    "option",
    "searchForOption",
    "argv",
    "defer",
    "Writable",
    "Transform",
    "__lineNumber",
    "_write",
    "chunk",
    "encoding",
    "callback",
    "getLineNumber",
    "__lastLine",
    "_transform",
    "pos",
    "lastIndexOf",
    "_flush",
    "dest",
    "__dest",
    "__value",
    "write"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/utils/Utils.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Zenesis Ltd\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n\n************************************************************************ */\nconst path = require(\"upath\");\nconst fs = require(\"fs\");\nconst async = require(\"async\");\nconst { promisify } = require(\"util\");\nconst child_process = require(\"child_process\");\nconst psTree = require(\"ps-tree\");\n\n/**\n * Utility methods\n */\nqx.Class.define(\"qx.tool.utils.Utils\", {\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * Creates a Promise which can be resolved/rejected externally - it has\n     * the resolve/reject methods as properties\n     *\n     * @returns {Promise} a promise\n     */\n    newExternalPromise() {\n      var resolve;\n      var reject;\n      var promise = new Promise((resolve_, reject_) => {\n        resolve = resolve_;\n        reject = reject_;\n      });\n      promise.resolve = resolve;\n      promise.reject = reject;\n      return promise;\n    },\n\n    promisifyThis(fn, self, ...args) {\n      return new Promise((resolve, reject) => {\n        args = args.slice();\n        args.push(function (err, result) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(result);\n          }\n        });\n        try {\n          fn.apply(self, args);\n        } catch (ex) {\n          reject(ex);\n        }\n      });\n    },\n\n    /**\n     * Error that can be thrown to indicate wrong user input  and which doesn't\n     * need a stack trace\n     *\n     * @param {string} message\n     * @returns {Error}\n     */\n    UserError: class extends Error {\n      constructor(message) {\n        super(message);\n        this.name = \"UserError\";\n        this.stack = null;\n      }\n    },\n\n    /**\n     * Formats the time in a human readable format, eg \"1h 23m 45.678s\"\n     *\n     * @param {number} millisec\n     * @returns {string} formatted string\n     */\n    formatTime(millisec) {\n      var seconds = Math.floor(millisec / 1000);\n      var minutes = Math.floor(seconds / 60);\n      var hours = Math.floor(minutes / 60);\n      millisec %= 1000;\n\n      var result = \"\";\n      if (hours) {\n        result += (hours > 9 ? hours : \"0\" + hours) + \"h \";\n      }\n      if (hours || minutes) {\n        result += (minutes > 9 ? minutes : \"0\" + minutes) + \"m \";\n      }\n      if (seconds > 9 || (!hours && !minutes)) {\n        result += seconds;\n      } else if (hours || minutes) {\n        result += \"0\" + seconds;\n      }\n      result +=\n        \".\" + (millisec > 99 ? \"\" : millisec > 9 ? \"0\" : \"00\") + millisec + \"s\";\n      return result;\n    },\n\n    /**\n     * Creates a dir\n     * @param dir\n     * @param cb\n     */\n    mkpath(dir, cb) {\n      dir = path.normalize(dir);\n      var segs = dir.split(path.sep);\n      var made = \"\";\n      async.eachSeries(\n        segs,\n        function (seg, cb) {\n          if (made.length || !seg.length) {\n            made += \"/\";\n          }\n          made += seg;\n          fs.exists(made, function (exists) {\n            if (!exists) {\n              fs.mkdir(made, function (err) {\n                if (err && err.code === \"EEXIST\") {\n                  err = null;\n                }\n                cb(err);\n              });\n              return;\n            }\n            fs.stat(made, function (err, stat) {\n              if (err) {\n                cb(err);\n              } else if (stat.isDirectory()) {\n                cb(null);\n              } else {\n                cb(\n                  new Error(\n                    \"Cannot create \" +\n                      made +\n                      \" (in \" +\n                      dir +\n                      \") because it exists and is not a directory\",\n                    \"ENOENT\"\n                  )\n                );\n              }\n            });\n          });\n        },\n        function (err) {\n          cb(err);\n        }\n      );\n    },\n\n    /**\n     * Creates the parent directory of a filename, if it does not already exist\n     */\n    mkParentPath(dir, cb) {\n      var segs = dir.split(/[\\\\\\/]/);\n      segs.pop();\n      if (!segs.length) {\n        return cb && cb();\n      }\n      dir = segs.join(path.sep);\n      return this.mkpath(dir, cb);\n    },\n\n    /**\n     * Creates the parent directory of a filename, if it does not already exist\n     *\n     * @param {string} filename the filename to create the parent directory of\n     *\n     * @return {Promise?} the value\n     */\n    makeParentDir(filename) {\n      const mkParentPath = promisify(this.mkParentPath).bind(this);\n      return mkParentPath(filename);\n    },\n\n    /**\n     * Creates a directory, if it does not exist, including all intermediate paths\n     *\n     * @param {string} filename the directory to create\n     *\n     * @return {Promise?} the value\n     */\n    makeDirs(filename) {\n      const mkpath = promisify(this.mkpath);\n      return mkpath(filename);\n    },\n\n    /**\n     * Writable stream that keeps track of what the current line number is\n     */\n    LineCountingTransform: null,\n\n    /**\n     * Writable stream that strips out sourceMappingURL comments\n     */\n    StripSourceMapTransform: null,\n\n    /**\n     * Writable stream that keeps track of what's been written and can return\n     * a copy as a string\n     */\n    ToStringWriteStream: null,\n\n    /*  Function to test if an object is a plain object, i.e. is constructed\n     **  by the built-in Object constructor and inherits directly from Object.prototype\n     **  or null. Some built-in objects pass the test, e.g. Math which is a plain object\n     **  and some host or exotic objects may pass also.\n     **\n     **  @param {} obj - value to test\n     **  @returns {Boolean} true if passes tests, false otherwise\n     *\n     * @see https://stackoverflow.com/a/5878101/2979698\n     */\n    isPlainObject(obj) {\n      // Basic check for Type object that's not null\n      if (typeof obj == \"object\" && obj !== null) {\n        // If Object.getPrototypeOf supported, use it\n        if (typeof Object.getPrototypeOf == \"function\") {\n          var proto = Object.getPrototypeOf(obj);\n          return proto === Object.prototype || proto === null;\n        }\n\n        // Otherwise, use internal class\n        // This should be reliable as if getPrototypeOf not supported, is pre-ES5\n        return Object.prototype.toString.call(obj) == \"[object Object]\";\n      }\n\n      // Not an object\n      return false;\n    },\n\n    /**\n     * Runs the given command and returns an object containing information on the\n     * `exitCode`, the `output`, potential `error`s, and additional `messages`.\n     * @param {String} cwd The current working directory\n     * @param {String} args One or more command line arguments, including the\n     * command itself\n     * @return {{exitCode: Number, output: String, error: *, messages: *}}\n     */\n    async runCommand(cwd, ...args) {\n      let options = {};\n\n      if (typeof cwd == \"object\") {\n        options = cwd;\n      } else {\n        args = args.filter(value => {\n          if (typeof value == \"string\") {\n            return true;\n          }\n          if (!options) {\n            options = value;\n          }\n          return false;\n        });\n        if (!options.cwd) {\n          options.cwd = cwd;\n        }\n        if (!options.cmd) {\n          options.cmd = args.shift();\n        }\n        if (!options.args) {\n          options.args = args;\n        }\n      }\n      if (!options.error) {\n        options.error = console.error;\n      }\n      if (!options.log) {\n        options.log = console.log;\n      }\n      return await new Promise((resolve, reject) => {\n        let env = process.env;\n        if (options.env) {\n          env = Object.assign({}, env);\n          Object.assign(env, options.env);\n        }\n        let proc = child_process.spawn(options.cmd, options.args, {\n          cwd: options.cwd,\n          shell: true,\n          env: env\n        });\n\n        let result = {\n          exitCode: null,\n          output: \"\",\n          error: \"\",\n          messages: null\n        };\n\n        proc.stdout.on(\"data\", data => {\n          data = data.toString().trim();\n          options.log(data);\n          result.output += data;\n        });\n        proc.stderr.on(\"data\", data => {\n          data = data.toString().trim();\n          options.error(data);\n          result.error += data;\n        });\n        proc.on(\"close\", code => {\n          result.exitCode = code;\n          resolve(result);\n        });\n        proc.on(\"error\", err => {\n          reject(err);\n        });\n      });\n    },\n\n    /**\n     * Awaitable wrapper around child_process.spawn.\n     * Runs a command in a separate process. The output of the command\n     * is ignored. Throws when the exit code is not 0.\n     * @param  {String} cmd Name of the command\n     * @param  {Array} args Array of arguments to the command\n     * @return {Promise<Number>} A promise that resolves with the exit code\n     */\n    run(cmd, args) {\n      let opts = { env: process.env };\n      return new Promise((resolve, reject) => {\n        let exe = child_process.spawn(cmd, args, opts);\n        // suppress all output unless in verbose mode\n        exe.stdout.on(\"data\", data => {\n          qx.log.Logger.debug(data.toString());\n        });\n        exe.stderr.on(\"data\", data => {\n          qx.log.Logger.error(data.toString());\n        });\n        exe.on(\"close\", code => {\n          if (code !== 0) {\n            let message = `Error executing '${cmd} ${args.join(\n              \" \"\n            )}'. Use --verbose to see what went wrong.`;\n            reject(new qx.tool.utils.Utils.UserError(message));\n          } else {\n            resolve(0);\n          }\n        });\n        exe.on(\"error\", reject);\n      });\n    },\n\n    /**\n     * Awaitable wrapper around child_process.exec\n     * Executes a command and return its result wrapped in a Promise.\n     * @param cmd {String} Command with all parameters\n     * @return {Promise<String>} Promise that resolves with the result\n     */\n    exec(cmd) {\n      return new Promise((resolve, reject) => {\n        child_process.exec(cmd, (err, stdout, stderr) => {\n          if (err) {\n            reject(err);\n          }\n          if (stderr) {\n            reject(new Error(stderr));\n          }\n          resolve(stdout);\n        });\n      });\n    },\n\n    /**\n     * Parses a command line and separates them out into an array that can be given to `child_process.spawn` etc\n     *\n     * @param {String} cmd\n     * @returns {String[]}\n     */\n    parseCommand(str) {\n      let inQuote = null;\n      let inArg = false;\n      let lastC = null;\n      let start = 0;\n      let args = [];\n      for (let i = 0; i < str.length; i++) {\n        let c = str[i];\n        if (inQuote) {\n          if (c == inQuote) {\n            inQuote = null;\n          }\n          continue;\n        }\n        if (c == '\"' || c == \"'\") {\n          inQuote = c;\n          if (!inArg) {\n            inArg = true;\n            start = i;\n          }\n          continue;\n        }\n        if (c == \" \" || c == \"\\t\") {\n          if (inArg) {\n            let arg = str.substring(start, i);\n            args.push(arg);\n            inArg = false;\n          }\n        } else {\n          if (!inArg) {\n            inArg = true;\n            start = i;\n          }\n        }\n      }\n      if (inArg) {\n        let arg = str.substring(start);\n        args.push(arg);\n      }\n      return args;\n    },\n\n    /**\n     * Quotes special characters in the argument array, ensuring that they are safe to pass to the command line\n     *\n     * @param {String[]} cmd\n     * @returns {String[]}\n     */\n    quoteCommand(cmd) {\n      const SPECIALS = '&*?;# \"';\n      cmd = cmd.map(arg => {\n        let c = arg[0];\n        if ((c == \"'\" || c == '\"') && c == arg[arg.length - 1]) {\n          return arg;\n        }\n        if (arg.indexOf(\"'\") > -1) {\n          if (arg.indexOf('\"') > -1) {\n            return \"$'\" + arg.replace(/'/g, \"\\\\'\") + \"'\";\n          }\n          return '\"' + arg + '\"';\n        }\n        for (let i = 0; i < SPECIALS.length; i++) {\n          if (arg.indexOf(SPECIALS[i]) > -1) {\n            return \"'\" + arg + \"'\";\n          }\n        }\n        return arg;\n      });\n      return cmd;\n    },\n\n    /**\n     * Reformats a command line\n     *\n     * @param {String} cmd\n     * @returns {String}\n     */\n    formatCommand(cmd) {\n      return qx.tool.utils.Utils.quoteCommand(cmd).join(\" \");\n    },\n\n    /**\n     * Kills a process tree\n     *\n     * @param {Number} parentId parent process ID to kill\n     */\n    async killTree(parentId) {\n      await new qx.Promise((resolve, reject) => {\n        psTree(parentId, function (err, children) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          children.forEach(item => {\n            try {\n              process.kill(item.PID);\n            } catch (ex) {\n              // Nothing\n            }\n          });\n          try {\n            process.kill(parentId);\n          } catch (ex) {\n            // Nothing\n          }\n          resolve();\n        });\n      });\n    },\n\n    /**\n     * Returns the absolute path to the template directory\n     * @return {String}\n     */\n    getTemplateDir() {\n      let dir = qx.util.ResourceManager.getInstance().toUri(\n        \"qx/tool/cli/templates/template_vars.js\"\n      );\n\n      dir = path.dirname(dir);\n      return dir;\n    },\n\n    /**\n     * Detects whether the command line explicit set an option (as opposed to yargs\n     * providing a default value).  Note that this does not handle aliases, use the\n     * actual, full option name.\n     *\n     * @param option {String} the name of the option, eg \"listen-port\"\n     * @return {Boolean}\n     */\n    isExplicitArg(option) {\n      function searchForOption(option) {\n        return process.argv.indexOf(option) > -1;\n      }\n      return searchForOption(`-${option}`) || searchForOption(`--${option}`);\n    }\n  },\n\n  defer(statics) {\n    const { Writable, Transform } = require(\"stream\");\n\n    class LineCountingTransform extends Transform {\n      constructor(options) {\n        super(options);\n        this.__lineNumber = 1;\n      }\n\n      _write(chunk, encoding, callback) {\n        let str = chunk.toString();\n        for (let i = 0; i < str.length; i++) {\n          if (str[i] == \"\\n\") {\n            this.__lineNumber++;\n          }\n        }\n        this.push(str);\n        callback();\n      }\n\n      getLineNumber() {\n        return this.__lineNumber;\n      }\n    }\n\n    statics.LineCountingTransform = LineCountingTransform;\n\n    class StripSourceMapTransform extends Transform {\n      constructor(options) {\n        super(options);\n        this.__lastLine = \"\";\n      }\n\n      _transform(chunk, encoding, callback) {\n        let str = this.__lastLine + chunk.toString();\n        let pos = str.lastIndexOf(\"\\n\");\n        if (pos > -1) {\n          this.__lastLine = str.substring(pos);\n          str = str.substring(0, pos);\n        } else {\n          this.__lastLine = str;\n          str = \"\";\n        }\n        str = str.replace(/\\n\\/\\/\\#\\s*sourceMappingURL=.*$/m, \"\");\n        this.push(str);\n        callback();\n      }\n\n      _flush(callback) {\n        let str = this.__lastLine;\n        this.__lastLine = null;\n        str = str.replace(/\\n\\/\\/\\#\\s*sourceMappingURL=.*$/m, \"\");\n        this.push(str);\n        callback();\n      }\n    }\n\n    statics.StripSourceMapTransform = StripSourceMapTransform;\n\n    class ToStringWriteStream extends Writable {\n      constructor(dest, options) {\n        super(options);\n        this.__dest = dest;\n        this.__value = \"\";\n      }\n\n      _write(chunk, encoding, callback) {\n        this.__value += chunk.toString();\n        if (this.__dest) {\n          this.__dest.write(chunk, encoding, callback);\n        } else if (callback) {\n          callback();\n        }\n      }\n\n      toString() {\n        return this.__value;\n      }\n    }\n\n    statics.ToStringWriteStream = ToStringWriteStream;\n  }\n});\n"
  ],
  "mappings": "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"
}