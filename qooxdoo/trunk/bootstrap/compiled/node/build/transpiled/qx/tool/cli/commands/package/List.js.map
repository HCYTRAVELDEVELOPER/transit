{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "semver",
    "require",
    "columnify",
    "path",
    "Class",
    "define",
    "extend",
    "tool",
    "cli",
    "commands",
    "Package",
    "statics",
    "localPathRepoName",
    "getYargsCommand",
    "command",
    "describe",
    "builder",
    "all",
    "alias",
    "verbose",
    "quiet",
    "json",
    "installed",
    "namespace",
    "match",
    "libraries",
    "short",
    "noheaders",
    "prereleases",
    "check",
    "argv",
    "valid",
    "qxVersion",
    "members",
    "process",
    "__repositories",
    "__libraries",
    "__latestCompatible",
    "repos_cache",
    "getCache",
    "repos",
    "getAppQxVersion",
    "num_compat_repos",
    "__createIndexes",
    "debug",
    "compiler",
    "Console",
    "info",
    "repo",
    "repository",
    "list",
    "includes",
    "utils",
    "Utils",
    "UserError",
    "length",
    "columnify_options",
    "columnSplitter",
    "config",
    "description",
    "maxWidth",
    "compatibility",
    "dataTransform",
    "data",
    "installedVersion",
    "map",
    "row",
    "Object",
    "assign",
    "sort",
    "a",
    "b",
    "name",
    "localeCompare",
    "pretty",
    "index",
    "manifest",
    "previousRow",
    "key",
    "getOwnPropertyNames",
    "reverse",
    "indexOf",
    "JSON",
    "stringify",
    "columns",
    "urisOnly",
    "splice",
    "showHeaders",
    "headingTransform",
    "latestVersion",
    "latestCompatible",
    "filter",
    "item",
    "l",
    "r",
    "toLowerCase",
    "expanded_list",
    "repo_libs",
    "lang",
    "Type",
    "isArray",
    "library",
    "version",
    "warn",
    "eq",
    "uri",
    "join",
    "push",
    "type",
    "summary",
    "lib",
    "concat",
    "exp",
    "RegExp",
    "Boolean",
    "compat",
    "saveCache",
    "qooxdoo_version",
    "libData",
    "getLockfileData",
    "repo_name",
    "manifest_path",
    "cwd",
    "Manifest",
    "fileName",
    "Json",
    "loadJsonAsync",
    "provides",
    "satisfies",
    "requires",
    "relative",
    "dirname",
    "undefined",
    "repo_data",
    "d",
    "tag_names",
    "releases",
    "hasCompatibleRelease",
    "repoInstalledVersion",
    "tag_name",
    "release_data",
    "prerelease",
    "manifests",
    "qx_versions",
    "library_name",
    "tag_version",
    "replace",
    "substr",
    "gt",
    "e",
    "getInstalledLibraryTag",
    "getInstalledLibraryData",
    "library_version",
    "latestCompatibleRelease",
    "latestCompatibleVersion",
    "required_qx_version",
    "package",
    "List"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/package/List.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n   2017 Christian Boulanger\n\n   License:\n   MIT: https://opensource.org/licenses/MIT\n   See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n   * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\nconst semver = require(\"semver\");\nconst columnify = require(\"columnify\");\nconst path = require(\"upath\");\n\n/**\n * Lists compatible packages\n */\nqx.Class.define(\"qx.tool.cli.commands.package.List\", {\n  extend: qx.tool.cli.commands.Package,\n  statics: {\n    /**\n     * The name of a \"fake\" repository containing libraries from local paths\n     */\n    localPathRepoName: \"_local_\",\n\n    /**\n     * Returns the yargs command data\n     * @return {Object}\n     */\n    getYargsCommand() {\n      return {\n        command: \"list [repository]\",\n        describe:\n          'if no repository name is given, lists all available packages that are compatible with the project\\'s qooxdoo version (\"--all\" lists incompatible ones as well). Otherwise, list all compatible packages.',\n        builder: {\n          all: {\n            alias: \"a\",\n            describe: \"Show all versions, including incompatible ones\"\n          },\n\n          verbose: {\n            alias: \"v\",\n            describe: \"Verbose logging\"\n          },\n\n          quiet: {\n            alias: \"q\",\n            describe: \"No output\"\n          },\n\n          json: {\n            alias: \"j\",\n            describe: \"Output list as JSON literal\"\n          },\n\n          installed: {\n            alias: \"i\",\n            describe: \"Show only installed libraries\"\n          },\n\n          namespace: {\n            alias: \"n\",\n            describe: \"Display library namespace\"\n          },\n\n          match: {\n            alias: \"m\",\n            describe: \"Filter by regular expression (case-insensitive)\"\n          },\n\n          libraries: {\n            alias: \"l\",\n            describe: \"List libraries only (no repositories)\"\n          },\n\n          short: {\n            alias: \"s\",\n            describe: \"Omit title and description to make list more compact\"\n          },\n\n          noheaders: {\n            alias: \"H\",\n            describe: \"Omit header and footer\"\n          },\n\n          prereleases: {\n            alias: \"p\",\n            describe: \"Include prereleases into latest compatible releases\"\n          },\n\n          \"uris-only\": {\n            alias: \"u\",\n            describe:\n              \"Output only the GitHub URIs of the packages which are used to install the packages. Implies --noheaders and --libraries.\"\n          },\n\n          \"qx-version\": {\n            check: argv => semver.valid(argv.qxVersion),\n            describe:\n              \"A semver string. If given, the qooxdoo version for which to generate the listings\"\n          }\n        }\n      };\n    }\n  },\n\n  members: {\n    /**\n     * Lists library packages compatible with the current project\n     */\n    async process() {\n      await super.process();\n      this.__repositories = [];\n      this.__libraries = {};\n      this.__latestCompatible = {};\n      const localPathRepoName = this.self(arguments).localPathRepoName;\n\n      let repos_cache = this.getCache().repos;\n\n      // implicit qx package update, disabled\n      // if (repos_cache.list.length === 0 || this.getCache().version !== qx.tool.config.Lockfile.getInstance().getVersion()) {\n      //   await (new qx.tool.cli.commands.package.Update({quiet:true})).process();\n      // }\n\n      let qxVersion = await this.getAppQxVersion();\n      let num_compat_repos = await this.__createIndexes(qxVersion);\n      if (this.argv.verbose) {\n        this.debug(\n          `>>> We have ${num_compat_repos} packages compatible with qooxdoo version ${qxVersion}`\n        );\n      }\n\n      if (num_compat_repos === 0 && !this.argv.all && !this.argv.quiet) {\n        qx.tool.compiler.Console.info(\n          `Currently, no packages compatible with qooxdoo version ${qxVersion} exist.`\n        );\n\n        return;\n      }\n\n      // detailed repo information\n      let repo = this.argv.repository;\n      if (repo) {\n        if (!repos_cache.list.includes(repo)) {\n          throw new qx.tool.utils.Utils.UserError(\n            `Repository ${repo} does not exist or is not a qooxdoo package repo.`\n          );\n        }\n        if (this.__libraries[repo] && this.__libraries[repo].length) {\n          let columnify_options = {\n            columnSplitter: \"   \",\n            config: {\n              description: { maxWidth: 60 },\n              compatibility: {\n                dataTransform(data) {\n                  switch (data) {\n                    case \"false\":\n                      return \"not compatible / untested\";\n                    case \"true\":\n                      return \"âˆš\";\n                    default:\n                      return \"\";\n                  }\n                }\n              },\n\n              installedVersion: {\n                dataTransform(data) {\n                  switch (data) {\n                    case \"false\":\n                      return \"-\";\n                    default:\n                      return data;\n                  }\n                }\n              }\n            }\n          };\n\n          if (!this.argv.quiet) {\n            let data = this.__libraries[repo]\n              // shallow copy\n              .map(row => Object.assign({}, row))\n              // sort\n              .sort((a, b) => a.name.localeCompare(b.name));\n            let pretty = data\n              // another shallow copy\n              .map(row => Object.assign({}, row))\n              // clean up and omit redundant cell values\n              .map((row, index) => {\n                delete row.manifest;\n                if (index) {\n                  let previousRow = data[index - 1];\n                  for (let key of Object.getOwnPropertyNames(row).reverse()) {\n                    if (\n                      [\"compatibility\", \"required_qx_version\"].indexOf(key) > -1\n                    ) {\n                      continue;\n                    }\n                    if (\n                      row[key] === previousRow[key] &&\n                      row.name === previousRow.name\n                    ) {\n                      row[key] = \"\";\n                    }\n                  }\n                }\n                return row;\n              });\n            // output list\n            if (this.argv.json) {\n              // as JSON\n              qx.tool.compiler.Console.info(JSON.stringify(data, null, 2));\n            } else {\n              qx.tool.compiler.Console.info(\n                columnify(pretty, columnify_options)\n              );\n            }\n          }\n        } else if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(\n            `Repository ${repo} does not contain suitable qooxdoo libraries.`\n          );\n        }\n        return;\n      }\n\n      // list output\n\n      let columns;\n      if (this.argv.urisOnly) {\n        columns = [\"uri\"];\n        this.argv.noheaders = true;\n        this.argv.libraries = true;\n      } else if (this.argv.short) {\n        columns = [\n          \"uri\",\n          \"installedVersion\",\n          \"latestVersion\",\n          \"latestCompatible\"\n        ];\n      } else {\n        columns = [\n          \"uri\",\n          \"name\",\n          \"description\",\n          \"installedVersion\",\n          \"latestVersion\",\n          \"latestCompatible\"\n        ];\n      }\n      if (this.argv.namespace || this.argv.installed) {\n        columns.splice(1, 0, \"namespace\");\n      }\n      let columnify_options = {\n        showHeaders: !this.argv.noheaders,\n        columnSplitter: \"   \",\n        columns,\n        config: {\n          name: { maxWidth: 25 },\n          description: { maxWidth: 60 },\n          installedVersion: {\n            headingTransform: () => \"INSTALLED\",\n            dataTransform: data => (data === \"false\" ? \"\" : data)\n          },\n\n          latestVersion: {\n            headingTransform: () => \"LATEST\",\n            dataTransform: data => (data === \"false\" ? \"-\" : data)\n          },\n\n          latestCompatible: {\n            headingTransform: () => \"COMPATIBLE\",\n            dataTransform: data => (data === \"false\" ? \"-\" : data)\n          }\n        }\n      };\n\n      // filter by compatibility unless --all\n      let list = this.argv.all\n        ? this.__repositories\n        : this.__repositories.filter(\n            item =>\n              item.latestCompatible ||\n              (this.argv.installed && item.name === localPathRepoName)\n          );\n\n      // sort\n      list.sort((l, r) => {\n        l = l.name.toLowerCase();\n        r = r.name.toLowerCase();\n        return l < r ? -1 : l > r ? 1 : 0;\n      });\n      // list all libraries contained in a repo\n      let expanded_list = [];\n      for (let repo of list) {\n        let repo_libs = [];\n        if (!qx.lang.Type.isArray(this.__libraries[repo.name])) {\n          continue;\n        }\n        for (let library of this.__libraries[repo.name]) {\n          if (!semver.valid(library.version)) {\n            if (this.argv.verbose) {\n              qx.tool.compiler.Console.warn(\n                `>>> Ignoring '${repo.name}' ${library.name}': invalid version format '${library.version}'.`\n              );\n            }\n            continue;\n          }\n          if (\n            repo.name === localPathRepoName ||\n            semver.eq(library.version, repo.latestVersion)\n          ) {\n            let uri =\n              repo.name === this.self(arguments).localPathRepoName\n                ? library.path\n                : path.join(repo.name, library.path || \"\");\n            repo_libs.push({\n              type: \"library\",\n              uri,\n              namespace: library.namespace,\n              name: library.name,\n              description: library.summary || repo.description,\n              installedVersion: library.installedVersion,\n              latestVersion: repo.latestVersion,\n              latestCompatible: repo.latestCompatible,\n              manifest: library.manifest\n            });\n          }\n        }\n\n        // add title to multiple-library repos\n        if (\n          repo_libs.length > 1 &&\n          !(\n            this.argv.libraries ||\n            this.argv.short ||\n            repo.name === localPathRepoName\n          )\n        ) {\n          expanded_list.push({\n            type: \"repository\",\n            uri: repo.name,\n            name: \"\",\n            description: repo.description,\n            installedVersion: \"\",\n            latestVersion: repo.latestVersion,\n            latestCompatible: repo.latestCompatible\n          });\n\n          if (\n            !this.argv.json &&\n            !this.argv.installed &&\n            !this.argv.match &&\n            !this.argv.urisOnly\n          ) {\n            // add an indent to group libraries in a repository\n            repo_libs = repo_libs.map(lib => {\n              lib.uri = \"| \" + lib.uri;\n              return lib;\n            });\n          }\n        }\n        expanded_list = expanded_list.concat(repo_libs);\n      }\n      // filter by regular expression if requested\n      if (this.argv.match) {\n        let exp = new RegExp(this.argv.match, \"i\");\n        expanded_list = expanded_list.filter(\n          lib =>\n            lib.uri.match(exp) ||\n            lib.name.match(exp) ||\n            lib.description.match(exp)\n        );\n      }\n\n      // show only installed libraries if requested\n      if (this.argv.installed) {\n        expanded_list = expanded_list.filter(lib =>\n          Boolean(lib.installedVersion)\n        );\n      }\n\n      // output list\n      if (this.argv.json) {\n        // as JSON\n        qx.tool.compiler.Console.info(JSON.stringify(expanded_list, null, 2));\n      } else if (!this.argv.quiet) {\n        // as columns\n        qx.tool.compiler.Console.info(\n          columnify(expanded_list, columnify_options)\n        );\n\n        if (!this.argv.noheaders) {\n          qx.tool.compiler.Console.info();\n          qx.tool.compiler.Console.info(\n            \"Note on columns: LATEST: Latest release that can be installed with this CLI;\"\n          );\n\n          qx.tool.compiler.Console.info(\n            \"                 COMPATIBLE: Latest release that is semver-compatible with the qooxdoo version used.\"\n          );\n\n          if (!this.argv.all) {\n            qx.tool.compiler.Console.info(\n              \"To see all libraries, including potentially incompatible ones, use 'qx package list --all'.\"\n            );\n          }\n        }\n      }\n\n      // save to cache\n      this.getCache().compat[qxVersion] = this.__latestCompatible[qxVersion];\n      await this.saveCache();\n    },\n\n    /**\n     * compatibility indexes\n     */\n    __repositories: null,\n    __libraries: null,\n    __latestCompatible: null,\n\n    /**\n     * Create compatibilty indexes of repositories and the contained libraries\n     * @param qooxdoo_version {String} The qooxdoo version to check compatibiity with\n     * @return {Number} The number of repositories containing compatible libraries\n     */\n    async __createIndexes(qooxdoo_version) {\n      if (this.argv.installed) {\n        // local libraries\n        const localPathRepoName = this.self(arguments).localPathRepoName;\n        this.__repositories.push({\n          name: localPathRepoName,\n          description: \"Libraries on local filesystem\"\n        });\n\n        this.__libraries[localPathRepoName] = [];\n        let libData = await this.getLockfileData();\n        for (let lib of libData.libraries) {\n          if (!lib.repo_name) {\n            let manifest_path = path.join(\n              process.cwd(),\n              lib.path,\n              qx.tool.config.Manifest.config.fileName\n            );\n\n            let manifest = await qx.tool.utils.Json.loadJsonAsync(\n              manifest_path\n            );\n\n            let info = manifest.info;\n            this.__libraries[localPathRepoName].push({\n              name: info.name,\n              namespace: manifest.provides.namespace,\n              summary: info.summary,\n              version: \"v\" + info.version,\n              compatibility: semver.satisfies(\n                qooxdoo_version,\n                manifest.requires[\"qooxdoo-sdk\"],\n                true\n              ),\n\n              path: path.relative(process.cwd(), path.dirname(manifest_path)),\n              installedVersion: \"v\" + info.version,\n              manifest\n            });\n          }\n        }\n      }\n\n      // repositories\n      let repos_cache = this.getCache().repos;\n      let num_compat_repos = 0;\n      if (this.__latestCompatible[qooxdoo_version] === undefined) {\n        this.__latestCompatible[qooxdoo_version] = {};\n      }\n\n      // iterate over repositories\n      for (let repo_name of repos_cache.list) {\n        let repo_data = repos_cache.data[repo_name];\n\n        // filter out repositories that are deprecated or should not be listed unless --all\n        let d = repo_data.description;\n        if (\n          !this.argv.all &&\n          d &&\n          (d.includes(\"(deprecated)\") || d.includes(\"(unlisted)\"))\n        ) {\n          if (this.argv.verbose) {\n            qx.tool.compiler.Console.warn(\n              `>>> Ignoring ${repo_name}: Deprecated or unlisted. `\n            );\n          }\n          continue;\n        }\n\n        let tag_names = repo_data.releases.list;\n        let { description } = repo_data;\n        let hasCompatibleRelease = false;\n        let latestVersion = false;\n        let repoInstalledVersion = false;\n\n        // iterate over releases\n        for (let tag_name of tag_names) {\n          let release_data = repo_data.releases.data[tag_name];\n          let { prerelease, manifests } = release_data;\n          // iterate over library manifests in that release\n          for (let manifest of manifests) {\n            let { qx_versions, info, provides, path: manifest_path } = manifest;\n            let installedVersion = false;\n            if (info === undefined) {\n              if (this.argv.verbose) {\n                qx.tool.compiler.Console.warn(\n                  `>>> Ignoring ${repo_name} ${tag_name}: Undefined info field. `\n                );\n              }\n              continue;\n            }\n\n            // library version MUST match tag name (which can be longer, for example with pre-release info (alpha, beta, pre, rc etc)\n            let library_name = info.name;\n            let version = info.version;\n            let tag_version = tag_name.replace(/v/, \"\");\n            if (version !== tag_version.substr(0, version.length)) {\n              if (this.argv.verbose) {\n                qx.tool.compiler.Console.warn(\n                  `>>> Ignoring ${repo_name} ${tag_name}, library '${library_name}': mismatch between tag version '${tag_version}' and library version '${version}'.`\n                );\n              }\n              continue;\n            }\n\n            // save latest version\n            try {\n              if (!latestVersion || semver.gt(version, latestVersion, true)) {\n                latestVersion = tag_name;\n              }\n            } catch (e) {\n              if (this.argv.verbose) {\n                qx.tool.compiler.Console.warn(\n                  `>>> Ignoring ${repo_name} ${tag_name}, library '${library_name}': invalid version format '${version}'.`\n                );\n              }\n            }\n\n            // installed from GitHub?\n            let installed = await this.getInstalledLibraryTag(\n              repo_name,\n              library_name\n            );\n\n            if (installed) {\n              installedVersion = installed;\n              repoInstalledVersion = installed;\n            } else {\n              let lib = await this.getInstalledLibraryData(library_name);\n              if (lib) {\n                installedVersion = \"v\" + lib.library_version;\n              }\n            }\n\n            // check compatibility of library\n            let compatibility = semver.satisfies(\n              qooxdoo_version,\n              qx_versions,\n              true\n            );\n\n            // prepare indexes\n            if (this.__libraries[repo_name] === undefined) {\n              this.__libraries[repo_name] = [];\n            }\n\n            // use the latest compatible release, i.e the one that satisfies the following conditions:\n            // 1) must be semver-compatible with the qooxdoo version\n            // 2) must be the higher than any other version found so far\n            // 3) should not be a pre-release unless there are no other compatible releases\n            let latestCompatibleRelease =\n              this.__latestCompatible[qooxdoo_version][repo_name];\n            let latestCompatibleVersion = latestCompatibleRelease\n              ? latestCompatibleRelease.replace(/v/, \"\")\n              : undefined;\n            if (\n              compatibility === true &&\n              (latestCompatibleRelease === undefined ||\n                (semver.gt(tag_version, latestCompatibleVersion, false) &&\n                  (!prerelease || this.argv.prereleases)))\n            ) {\n              this.__latestCompatible[qooxdoo_version][repo_name] = tag_name;\n              hasCompatibleRelease = true;\n            }\n\n            // save data\n            this.__libraries[repo_name].push({\n              name: info.name,\n              namespace: provides ? provides.namespace : \"\",\n              summary: info.summary,\n              version,\n              compatibility,\n              required_qx_version: qx_versions,\n              path: path.dirname(manifest_path),\n              installedVersion,\n              manifest\n            });\n          }\n        }\n        if (hasCompatibleRelease) {\n          num_compat_repos++;\n        }\n\n        // add to list\n        this.__repositories.push({\n          name: repo_name,\n          description,\n          installedVersion: repoInstalledVersion,\n          latestVersion,\n          latestCompatible: hasCompatibleRelease\n            ? this.__latestCompatible[qooxdoo_version][repo_name]\n            : false\n        });\n      }\n      return num_compat_repos;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}