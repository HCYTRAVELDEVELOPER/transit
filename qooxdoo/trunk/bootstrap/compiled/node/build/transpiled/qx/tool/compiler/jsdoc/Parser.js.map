{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "showdown",
    "require",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "parseComment",
    "comment",
    "trim",
    "startsWith",
    "current",
    "name",
    "body",
    "cmds",
    "replace",
    "split",
    "forEach",
    "line",
    "trimRight",
    "m",
    "match",
    "length",
    "push",
    "result",
    "converter",
    "Converter",
    "cmd",
    "makeHtml",
    "e",
    "tool",
    "compiler",
    "Console",
    "getInstance",
    "isVerbose",
    "info",
    "message",
    "parseJsDoc",
    "jsdoc",
    "classname",
    "analyser",
    "key",
    "parser",
    "__PARSERS",
    "pdoc",
    "parseCommand",
    "ParamParser",
    "ReturnParser",
    "ThrowsParser",
    "ChildControlParser",
    "Parser"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/compiler/jsdoc/Parser.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2017 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\nconst showdown = require(\"showdown\");\n\n/**\n * JSDoc Parser\n */\nqx.Class.define(\"qx.tool.compiler.jsdoc.Parser\", {\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * Parses a JSDoc comment, returns an object where the keys are the name of the JSDoc (eg \"@description\")\n     * and the value are an array of objects, one for each entry that was found.  The individual entries\n     * consist of the name, the body of the JSDoc entry, and optional, key-specific parsed data (where supported)\n     */\n    parseComment(comment) {\n      /* \n         JSDoc starts with /**\n         babel parses this to * - the comment starting end ending is striped\n         So whe have to test for valid JSDoc comment.\n      */\n      comment = comment.trim();\n      if (\n        !(\n          comment.startsWith(\"* \") ||\n          comment.startsWith(\"*\\n\") ||\n          comment.startsWith(\"*\\r\")\n        )\n      ) {\n        return {};\n      }\n      var current = { name: \"@description\", body: \"\" };\n      var cmds = [current];\n\n      // special handling for code section\n      comment = comment.replace(/`([^`]*)`/gm, \"<code>$1</code>\");\n      // Strip optional leading *\n      comment = comment.replace(/^[ \\t]*\\*/gm, \"\");\n      // special handling for as markdown lists - * in qooxdoo\n      comment = comment.replace(/^\\s*\\*/gm, \"*\");\n      comment = comment.replace(/^\\s*\\*\\*\\*\\*/gm, \"\\t\\t\\t*\");\n      comment = comment.replace(/^\\s*\\*\\*\\*/gm, \"\\t\\t*\");\n      comment = comment.replace(/^\\s*\\*\\*/gm, \"\\t*\");\n\n      comment = comment.split(\"\\n\");\n      comment.forEach(function (line) {\n        line = line.trimRight();\n        if (!line) {\n          return;\n        }\n\n        // Strip trailing single line comment\n        let m = line.match(/(^.*)([^:]\\/\\/.*)$/);\n        if (m) {\n          line = m[1].trimRight();\n        }\n\n        // Look for command at the beginning of the line\n        m = line.match(/^\\s*(\\@[a-zA-Z0-9_]+)(.*)$/);\n        if (!m) {\n          // Clean starting * as markdown lists\n          if (current.body.length) {\n            current.body += \"\\n\";\n          }\n          current.body += line;\n          return;\n        }\n\n        var name = m[1];\n        var body = m[2];\n\n        // Patch common command names\n        if (name == \"@returns\") {\n          name = \"@return\";\n        }\n        if (name == \"@throw\") {\n          name = \"@throws\";\n        }\n\n        // store it\n        current = { name: name, body: body };\n        cmds.push(current);\n      });\n      var result = {};\n      let converter = new showdown.Converter();\n      cmds.forEach(function (cmd) {\n        if (cmd.name === \"@description\") {\n          try {\n            cmd.body = converter.makeHtml(cmd.body);\n          } catch (e) {\n            if (qx.tool.compiler.Console.getInstance().isVerbose()) {\n              qx.tool.compiler.Console.info(`\n              Markdown conversion problem: \n              Error \"${e.message}\" was thrown parsing \n              \"${cmd.body.trim()}\". \n              Please review your doc comments for compatibility with Markdown syntax.\n              `);\n            }\n          }\n        } else {\n          // If the body is surrounded by parameters, remove them\n          let m = cmd.body.match(/^\\s*\\(([\\s\\S]*)\\)\\s*$/m);\n          if (m) {\n            cmd.body = m[1];\n          }\n          cmd.body = cmd.body.trim();\n        }\n        if (result[cmd.name]) {\n          result[cmd.name].push(cmd);\n        } else {\n          result[cmd.name] = [cmd];\n        }\n      });\n      return result;\n    },\n\n    parseJsDoc(jsdoc, classname, analyser) {\n      for (var key in jsdoc) {\n        var parser = this.__PARSERS[key];\n        if (parser) {\n          jsdoc[key].forEach(pdoc =>\n            parser.parseCommand(pdoc, classname, analyser)\n          );\n        }\n      }\n    },\n\n    __PARSERS: {\n      \"@param\": new qx.tool.compiler.jsdoc.ParamParser(),\n      \"@return\": new qx.tool.compiler.jsdoc.ReturnParser(),\n      \"@throws\": new qx.tool.compiler.jsdoc.ThrowsParser(),\n      \"@throw\": new qx.tool.compiler.jsdoc.ThrowsParser(),\n      \"@childControl\": new qx.tool.compiler.jsdoc.ChildControlParser()\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}