{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "ESLint",
    "require",
    "fs",
    "tool",
    "utils",
    "Promisify",
    "path",
    "replaceInFile",
    "Class",
    "define",
    "extend",
    "cli",
    "commands",
    "Command",
    "statics",
    "getYargsCommand",
    "command",
    "describe",
    "builder",
    "fix",
    "choices",
    "default",
    "type",
    "cache",
    "warnAsError",
    "alias",
    "format",
    "outputFile",
    "nargs",
    "requiresArg",
    "verbose",
    "quiet",
    "members",
    "process",
    "__applyFixes",
    "helperFilePath",
    "main",
    "existsAsync",
    "join",
    "dirname",
    "config",
    "Cli",
    "getInstance",
    "getParsedArgs",
    "lintOptions",
    "eslintConfig",
    "extends",
    "globals",
    "Object",
    "assign",
    "__addGlobals",
    "parser",
    "parserOptions",
    "requireConfigFile",
    "babelOptions",
    "cwd",
    "plugins",
    "parserOpts",
    "allowSuperOutsideMethod",
    "sourceType",
    "linter",
    "argv",
    "baseConfig",
    "useEslintrc",
    "files",
    "length",
    "push",
    "i",
    "printConfig",
    "fileConfig",
    "calculateConfigForFile",
    "compiler",
    "Console",
    "info",
    "JSON",
    "stringify",
    "report",
    "lintFiles",
    "errorCount",
    "warningCount",
    "r",
    "outputFixes",
    "outputFormat",
    "formatter",
    "loadFormatter",
    "s",
    "maxDefaultFormatErrorCount",
    "writeFileAsync",
    "then",
    "catch",
    "e",
    "error",
    "message",
    "Utils",
    "UserError",
    "data",
    "result",
    "libraries",
    "Promise",
    "all",
    "map",
    "dir",
    "lib",
    "app",
    "Library",
    "createLibrary",
    "getNamespace",
    "libs",
    "split",
    "fixParams",
    "fixJsdocParams",
    "replaceInFiles",
    "regex",
    "from",
    "to",
    "Lint"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/Lint.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Christian Boulanger and others\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project\"s top-level directory for details.\n\n   Authors:\n     * Henner Kollmann (hkollmann)\n\n************************************************************************ */\n\nconst { ESLint } = require(\"eslint\");\nconst fs = qx.tool.utils.Promisify.fs;\nconst path = require(\"path\");\nconst replaceInFile = require(\"replace-in-file\");\n\nqx.Class.define(\"qx.tool.cli.commands.Lint\", {\n  extend: qx.tool.cli.commands.Command,\n\n  statics: {\n    getYargsCommand() {\n      return {\n        command: \"lint [files...]\",\n        describe:\n          \"runs eslint on the current application or as set of single files.\",\n        builder: {\n          fix: {\n            describe: \"runs eslint with --fix\"\n          },\n\n          \"fix-jsdoc-params\": {\n            describe:\n              \"changes the order or @param name and {Type} to make it compatible for the generator ('name-first') or with JSDoc linting ('type-first').\",\n            choices: [\"off\", \"name-first\", \"type-first\"],\n            default: \"off\"\n          },\n\n          \"use-eslintrc\": {\n            describe: \"Use the .eslintrc file for configuration, if it exists\",\n            type: \"boolean\",\n            default: true\n          },\n\n          cache: {\n            describe: \"operate only on changed files\",\n            type: \"boolean\",\n            default: false\n          },\n\n          warnAsError: {\n            alias: \"w\",\n            describe: \"handle warnings as error\"\n          },\n\n          \"print-config\": {\n            alias: \"p\",\n            describe: \"print the eslint configuration\"\n          },\n\n          format: {\n            alias: \"f\",\n            describe: \"use a specific output format\",\n            default: \"codeframe\"\n          },\n\n          outputFile: {\n            alias: \"o\",\n            describe: \"specify file to which the report will be written\",\n            nargs: 1,\n            requiresArg: true,\n            type: \"string\"\n          },\n\n          verbose: {\n            alias: \"v\",\n            describe: \"enables additional progress output to console\",\n            type: \"boolean\"\n          },\n\n          quiet: {\n            alias: \"q\",\n            describe: \"No output\"\n          }\n        }\n      };\n    }\n  },\n\n  members: {\n    async process() {\n      await this.__applyFixes();\n\n      let helperFilePath = require.main.path;\n      while (true) {\n        if (await fs.existsAsync(path.join(helperFilePath, \"node_modules\"))) {\n          break;\n        }\n        helperFilePath = path.dirname(helperFilePath);\n      }\n\n      let config = await qx.tool.cli.Cli.getInstance().getParsedArgs();\n      let lintOptions = config.eslintConfig || {};\n      lintOptions.extends = lintOptions.extends || [\"@qooxdoo/qx/browser\"];\n      lintOptions.globals = Object.assign(\n        lintOptions.globals || {},\n        await this.__addGlobals(config)\n      );\n      lintOptions.parser = \"@babel/eslint-parser\";\n      lintOptions.parserOptions = lintOptions.parserOptions || {};\n      lintOptions.parserOptions.requireConfigFile = false;\n      lintOptions.parserOptions.babelOptions = {\n        cwd: helperFilePath,\n        plugins: [\n          \"@babel/plugin-syntax-jsx\"\n        ],\n        parserOpts: {\n          allowSuperOutsideMethod: true\n        }\n      };\n\n      lintOptions.parserOptions.sourceType = \"script\";\n      let linter = new ESLint({\n        cwd: helperFilePath,\n        cache: this.argv.cache || false,\n        baseConfig: lintOptions,\n        useEslintrc: this.argv.useEslintrc,\n        fix: this.argv.fix\n      });\n\n      let files = this.argv.files || [];\n      if (files.length === 0) {\n        files.push(\"source/class/**/*.js\");\n      }\n      for (let i = 0; i < files.length; i++) {\n        files[i] = path.join(process.cwd(), files[i]);\n      }\n      if (this.argv.printConfig) {\n        const fileConfig = await linter.calculateConfigForFile(files[0]);\n        qx.tool.compiler.Console.info(JSON.stringify(fileConfig, null, \"  \"));\n      } else {\n        let report = await linter.lintFiles(files);\n        report.errorCount = 0;\n        report.warningCount = 0;\n        for (const r of report) {\n          report.errorCount += r.errorCount;\n          report.warningCount += r.warningCount;\n        }\n        if (this.argv.fix) {\n          await ESLint.outputFixes(report);\n        }\n        if (report.errorCount > 0 || report.warningCount > 0) {\n          let outputFormat = this.argv.format || \"codeframe\";\n          const formatter = await linter.loadFormatter(outputFormat);\n          const s = formatter.format(report);\n          // If there are too many errors, the pretty formatter is appallingly slow so if the\n          // user has not specified a format, change to compact mode\n          const maxDefaultFormatErrorCount = 150;\n          if (report.errorCount + report.warningCount > maxDefaultFormatErrorCount) {\n            if (!this.argv.format) {\n              qx.tool.compiler.Console.info(\n                `Total errors and warnings exceed ${maxDefaultFormatErrorCount}, switching to \"compact\" style report`\n              );\n              outputFormat = \"compact\";\n            } else {\n              qx.tool.compiler.Console.info(\n                `Total errors and warnings exceed ${maxDefaultFormatErrorCount}, the report may take some time to generate.`\n              );\n            }\n          }\n          if (this.argv.outputFile) {\n            if (this.argv.verbose) {\n              qx.tool.compiler.Console.info(\n                `Report to be written to ${this.argv.outputFile}`\n              );\n            }\n            await fs\n              .writeFileAsync(this.argv.outputFile, s, \"UTF-8\")\n              .then(() => {\n                if (this.argv.verbose) {\n                  qx.tool.compiler.Console.info(\n                    `Report written to ${this.argv.outputFile}`\n                  );\n                }\n              })\n              .catch(e =>\n                qx.tool.compiler.Console.error(\n                  `Error writing report to ${this.argv.outputFile}:` + e.message\n                )\n              );\n          } else if (report.errorCount > 0 || this.argv.warnAsError) {\n            throw new qx.tool.utils.Utils.UserError(s);\n          } else {\n            qx.tool.compiler.Console.info(s);\n          }\n        } else {\n          qx.tool.compiler.Console.info(\"No errors found!\");\n        }\n      }\n    },\n\n    /**\n     * Scan all libraries and add the namespace to globals\n     * @param {Object} data\n     * @return {Promise<void>}\n     */\n    async __addGlobals(data) {\n      let result = {};\n      if (data.libraries) {\n        await qx.Promise.all(\n          data.libraries.map(async dir => {\n            let lib = await qx.tool.compiler.app.Library.createLibrary(dir);\n            let s = lib.getNamespace();\n            let libs = s.split(\".\");\n            result[libs[0]] = false;\n          })\n        );\n      }\n      return result;\n    },\n\n    /**\n     * Apply fixes before linting code\n     * @return {Promise<void>}\n     * @private\n     */\n    async __applyFixes() {\n      const fixParams = this.argv.fixJsdocParams;\n      if (fixParams && fixParams !== \"off\") {\n        let replaceInFiles = [];\n        const regex =\n          fixParams === \"type-first\"\n            ? /@param\\s+([\\w$]+)\\s+({[\\w|[\\]{}<>?. ]+})/g\n            : /@param\\s+({[\\w|[\\]{}<>?. ]+})\\s+([\\w$]+)/g;\n        replaceInFiles.push({\n          files: \"source/class/**/*.js\",\n          from: regex,\n          to: \"@param $2 $1\"\n        });\n\n        await replaceInFile(replaceInFiles);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEA,MAAM;IAAEC;EAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;EACA,MAAMC,EAAE,GAAGN,EAAE,CAACO,IAAH,CAAQC,KAAR,CAAcC,SAAd,CAAwBH,EAAnC;;EACA,MAAMI,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;EACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,iBAAD,CAA7B;;EAEAL,EAAE,CAACY,KAAH,CAASC,MAAT,CAAgB,2BAAhB,EAA6C;IAC3CC,MAAM,EAAEd,EAAE,CAACO,IAAH,CAAQQ,GAAR,CAAYC,QAAZ,CAAqBC,OADc;IAG3CC,OAAO,EAAE;MACPC,eAAe,GAAG;QAChB,OAAO;UACLC,OAAO,EAAE,iBADJ;UAELC,QAAQ,EACN,mEAHG;UAILC,OAAO,EAAE;YACPC,GAAG,EAAE;cACHF,QAAQ,EAAE;YADP,CADE;YAKP,oBAAoB;cAClBA,QAAQ,EACN,0IAFgB;cAGlBG,OAAO,EAAE,CAAC,KAAD,EAAQ,YAAR,EAAsB,YAAtB,CAHS;cAIlBC,OAAO,EAAE;YAJS,CALb;YAYP,gBAAgB;cACdJ,QAAQ,EAAE,wDADI;cAEdK,IAAI,EAAE,SAFQ;cAGdD,OAAO,EAAE;YAHK,CAZT;YAkBPE,KAAK,EAAE;cACLN,QAAQ,EAAE,+BADL;cAELK,IAAI,EAAE,SAFD;cAGLD,OAAO,EAAE;YAHJ,CAlBA;YAwBPG,WAAW,EAAE;cACXC,KAAK,EAAE,GADI;cAEXR,QAAQ,EAAE;YAFC,CAxBN;YA6BP,gBAAgB;cACdQ,KAAK,EAAE,GADO;cAEdR,QAAQ,EAAE;YAFI,CA7BT;YAkCPS,MAAM,EAAE;cACND,KAAK,EAAE,GADD;cAENR,QAAQ,EAAE,8BAFJ;cAGNI,OAAO,EAAE;YAHH,CAlCD;YAwCPM,UAAU,EAAE;cACVF,KAAK,EAAE,GADG;cAEVR,QAAQ,EAAE,kDAFA;cAGVW,KAAK,EAAE,CAHG;cAIVC,WAAW,EAAE,IAJH;cAKVP,IAAI,EAAE;YALI,CAxCL;YAgDPQ,OAAO,EAAE;cACPL,KAAK,EAAE,GADA;cAEPR,QAAQ,EAAE,+CAFH;cAGPK,IAAI,EAAE;YAHC,CAhDF;YAsDPS,KAAK,EAAE;cACLN,KAAK,EAAE,GADF;cAELR,QAAQ,EAAE;YAFL;UAtDA;QAJJ,CAAP;MAgED;;IAlEM,CAHkC;IAwE3Ce,OAAO,EAAE;MACP,MAAMC,OAAN,GAAgB;QACd,MAAM,KAAKC,QAAL,EAAN;QAEA,IAAIC,cAAc,GAAGlC,OAAO,CAACmC,IAAR,CAAa9B,IAAlC;;QACA,OAAO,IAAP,EAAa;UACX,IAAI,MAAMJ,EAAE,CAACmC,WAAH,CAAe/B,IAAI,CAACgC,IAAL,CAAUH,cAAV,EAA0B,cAA1B,CAAf,CAAV,EAAqE;YACnE;UACD;;UACDA,cAAc,GAAG7B,IAAI,CAACiC,OAAL,CAAaJ,cAAb,CAAjB;QACD;;QAED,IAAIK,MAAM,GAAG,MAAM5C,EAAE,CAACO,IAAH,CAAQQ,GAAR,CAAY8B,GAAZ,CAAgBC,WAAhB,GAA8BC,aAA9B,EAAnB;QACA,IAAIC,WAAW,GAAGJ,MAAM,CAACK,YAAP,IAAuB,EAAzC;QACAD,WAAW,CAACE,OAAZ,GAAsBF,WAAW,CAACE,OAAZ,IAAuB,CAAC,qBAAD,CAA7C;QACAF,WAAW,CAACG,OAAZ,GAAsBC,MAAM,CAACC,MAAP,CACpBL,WAAW,CAACG,OAAZ,IAAuB,EADH,EAEpB,MAAM,KAAKG,QAAL,CAAkBV,MAAlB,CAFc,CAAtB;QAIAI,WAAW,CAACO,MAAZ,GAAqB,sBAArB;QACAP,WAAW,CAACQ,aAAZ,GAA4BR,WAAW,CAACQ,aAAZ,IAA6B,EAAzD;QACAR,WAAW,CAACQ,aAAZ,CAA0BC,iBAA1B,GAA8C,KAA9C;QACAT,WAAW,CAACQ,aAAZ,CAA0BE,YAA1B,GAAyC;UACvCC,GAAG,EAAEpB,cADkC;UAEvCqB,OAAO,EAAE,CACP,0BADO,CAF8B;UAKvCC,UAAU,EAAE;YACVC,uBAAuB,EAAE;UADf;QAL2B,CAAzC;QAUAd,WAAW,CAACQ,aAAZ,CAA0BO,UAA1B,GAAuC,QAAvC;QACA,IAAIC,MAAM,GAAG,IAAI5D,MAAJ,CAAW;UACtBuD,GAAG,EAAEpB,cADiB;UAEtBZ,KAAK,EAAE,KAAKsC,IAAL,CAAUtC,KAAV,IAAmB,KAFJ;UAGtBuC,UAAU,EAAElB,WAHU;UAItBmB,WAAW,EAAE,KAAKF,IAAL,CAAUE,WAJD;UAKtB5C,GAAG,EAAE,KAAK0C,IAAL,CAAU1C;QALO,CAAX,CAAb;QAQA,IAAI6C,KAAK,GAAG,KAAKH,IAAL,CAAUG,KAAV,IAAmB,EAA/B;;QACA,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;UACtBD,KAAK,CAACE,IAAN,CAAW,sBAAX;QACD;;QACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACC,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;UACrCH,KAAK,CAACG,CAAD,CAAL,GAAW7D,IAAI,CAACgC,IAAL,CAAUL,OAAO,CAACsB,GAAR,EAAV,EAAyBS,KAAK,CAACG,CAAD,CAA9B,CAAX;QACD;;QACD,IAAI,KAAKN,IAAL,CAAUO,WAAd,EAA2B;UACzB,MAAMC,UAAU,GAAG,MAAMT,MAAM,CAACU,sBAAP,CAA8BN,KAAK,CAAC,CAAD,CAAnC,CAAzB;UACApE,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BC,IAAI,CAACC,SAAL,CAAeN,UAAf,EAA2B,IAA3B,EAAiC,IAAjC,CAA9B;QACD,CAHD,MAGO;UACL,IAAIO,MAAM,GAAG,MAAMhB,MAAM,CAACiB,SAAP,CAAiBb,KAAjB,CAAnB;UACAY,MAAM,CAACE,UAAP,GAAoB,CAApB;UACAF,MAAM,CAACG,YAAP,GAAsB,CAAtB;;UACA,KAAK,MAAMC,CAAX,IAAgBJ,MAAhB,EAAwB;YACtBA,MAAM,CAACE,UAAP,IAAqBE,CAAC,CAACF,UAAvB;YACAF,MAAM,CAACG,YAAP,IAAuBC,CAAC,CAACD,YAAzB;UACD;;UACD,IAAI,KAAKlB,IAAL,CAAU1C,GAAd,EAAmB;YACjB,MAAMnB,MAAM,CAACiF,WAAP,CAAmBL,MAAnB,CAAN;UACD;;UACD,IAAIA,MAAM,CAACE,UAAP,GAAoB,CAApB,IAAyBF,MAAM,CAACG,YAAP,GAAsB,CAAnD,EAAsD;YACpD,IAAIG,YAAY,GAAG,KAAKrB,IAAL,CAAUnC,MAAV,IAAoB,WAAvC;YACA,MAAMyD,SAAS,GAAG,MAAMvB,MAAM,CAACwB,aAAP,CAAqBF,YAArB,CAAxB;YACA,MAAMG,CAAC,GAAGF,SAAS,CAACzD,MAAV,CAAiBkD,MAAjB,CAAV,CAHoD,CAIpD;YACA;;YACA,MAAMU,0BAA0B,GAAG,GAAnC;;YACA,IAAIV,MAAM,CAACE,UAAP,GAAoBF,MAAM,CAACG,YAA3B,GAA0CO,0BAA9C,EAA0E;cACxE,IAAI,CAAC,KAAKzB,IAAL,CAAUnC,MAAf,EAAuB;gBACrB9B,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CACG,oCAAmCa,0BAA2B,uCADjE;gBAGAJ,YAAY,GAAG,SAAf;cACD,CALD,MAKO;gBACLtF,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CACG,oCAAmCa,0BAA2B,8CADjE;cAGD;YACF;;YACD,IAAI,KAAKzB,IAAL,CAAUlC,UAAd,EAA0B;cACxB,IAAI,KAAKkC,IAAL,CAAU/B,OAAd,EAAuB;gBACrBlC,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CACG,2BAA0B,KAAKZ,IAAL,CAAUlC,UAAW,EADlD;cAGD;;cACD,MAAMzB,EAAE,CACLqF,cADG,CACY,KAAK1B,IAAL,CAAUlC,UADtB,EACkC0D,CADlC,EACqC,OADrC,EAEHG,IAFG,CAEE,MAAM;gBACV,IAAI,KAAK3B,IAAL,CAAU/B,OAAd,EAAuB;kBACrBlC,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CACG,qBAAoB,KAAKZ,IAAL,CAAUlC,UAAW,EAD5C;gBAGD;cACF,CARG,EASH8D,KATG,CASGC,CAAC,IACN9F,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBmB,KAAzB,CACG,2BAA0B,KAAK9B,IAAL,CAAUlC,UAAW,GAAhD,GAAqD+D,CAAC,CAACE,OADzD,CAVE,CAAN;YAcD,CApBD,MAoBO,IAAIhB,MAAM,CAACE,UAAP,GAAoB,CAApB,IAAyB,KAAKjB,IAAL,CAAUrC,WAAvC,EAAoD;cACzD,MAAM,IAAI5B,EAAE,CAACO,IAAH,CAAQC,KAAR,CAAcyF,KAAd,CAAoBC,SAAxB,CAAkCT,CAAlC,CAAN;YACD,CAFM,MAEA;cACLzF,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BY,CAA9B;YACD;UACF,CA5CD,MA4CO;YACLzF,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8B,kBAA9B;UACD;QACF;MACF,CA9GM;;MAgHP;AACJ;AACA;AACA;AACA;MACI,MAAMvB,QAAN,CAAmB6C,IAAnB,EAAyB;QACvB,IAAIC,MAAM,GAAG,EAAb;;QACA,IAAID,IAAI,CAACE,SAAT,EAAoB;UAClB,MAAMrG,EAAE,CAACsG,OAAH,CAAWC,GAAX,CACJJ,IAAI,CAACE,SAAL,CAAeG,GAAf,CAAmB,MAAMC,GAAN,IAAa;YAC9B,IAAIC,GAAG,GAAG,MAAM1G,EAAE,CAACO,IAAH,CAAQoE,QAAR,CAAiBgC,GAAjB,CAAqBC,OAArB,CAA6BC,aAA7B,CAA2CJ,GAA3C,CAAhB;YACA,IAAIhB,CAAC,GAAGiB,GAAG,CAACI,YAAJ,EAAR;YACA,IAAIC,IAAI,GAAGtB,CAAC,CAACuB,KAAF,CAAQ,GAAR,CAAX;YACAZ,MAAM,CAACW,IAAI,CAAC,CAAD,CAAL,CAAN,GAAkB,KAAlB;UACD,CALD,CADI,CAAN;QAQD;;QACD,OAAOX,MAAP;MACD,CAlIM;;MAoIP;AACJ;AACA;AACA;AACA;MACI,MAAM9D,QAAN,GAAqB;QACnB,MAAM2E,SAAS,GAAG,KAAKhD,IAAL,CAAUiD,cAA5B;;QACA,IAAID,SAAS,IAAIA,SAAS,KAAK,KAA/B,EAAsC;UACpC,IAAIE,cAAc,GAAG,EAArB;UACA,MAAMC,KAAK,GACTH,SAAS,KAAK,YAAd,GACI,2CADJ,GAEI,2CAHN;UAIAE,cAAc,CAAC7C,IAAf,CAAoB;YAClBF,KAAK,EAAE,sBADW;YAElBiD,IAAI,EAAED,KAFY;YAGlBE,EAAE,EAAE;UAHc,CAApB;UAMA,MAAM3G,aAAa,CAACwG,cAAD,CAAnB;QACD;MACF;;IAzJM;EAxEkC,CAA7C;EAvBAnH,EAAE,CAACO,IAAH,CAAQQ,GAAR,CAAYC,QAAZ,CAAqBuG,IAArB,CAA0BpH,aAA1B,GAA0CA,aAA1C"
}