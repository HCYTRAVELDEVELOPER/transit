{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractClient",
    "statics",
    "registerTransport",
    "events",
    "error",
    "construct",
    "transportOrUri",
    "selectTransport",
    "members",
    "send",
    "request",
    "getTransport",
    "Promise",
    "resolve",
    "reject",
    "addListenerOnce",
    "evt",
    "core",
    "Environment",
    "get",
    "debug",
    "getData",
    "responseData",
    "lang",
    "Json",
    "parse",
    "graphQlResponse",
    "graphql",
    "protocol",
    "Response",
    "getErrors",
    "_handleErrors",
    "e",
    "exception",
    "Transport",
    "message",
    "toString",
    "catch",
    "response",
    "errors",
    "forEach",
    "Protocol",
    "toObject",
    "fireDataEvent",
    "environment",
    "Client"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/io/graphql/Client.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * This class provides a simple GraphQl client (https://graphql.org/).\n * For transport, it is based on internally on the fetch API\n * (https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n * which, if needed, must be directly configured via the `init` parameter of the\n * constructor, until a more generalized qx.io API has been developed.\n * @experimental The API might change. Feedback is appreciated.\n */\nqx.Class.define(\"qx.io.graphql.Client\", {\n  extend: qx.io.transport.AbstractClient,\n\n  statics: {\n    registerTransport: qx.io.transport.AbstractClient.registerTransport\n  },\n\n  events: {\n    /**\n     * Event fired when a request results in an error. Event data is an instance of\n     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n     * or {@link qx.io.exception.Cancel}.\n     */\n    error: \"qx.event.type.Data\"\n  },\n\n  /**\n   * @param {qx.io.transport.ITransport|String} transportOrUri\n   *    Transport object, which must implement {@link qx.io.transport.ITransport}\n   *    or a string URI, which will trigger auto-detection of transport, as long as an\n   *    appropriate transport has been registered with the static `registerTransport()` function.\n   */\n  construct(transportOrUri) {\n    super();\n    this.selectTransport(transportOrUri);\n  },\n\n  members: {\n    /**\n     * Send the given GraphQl query. See https://graphql.org/learn/queries/\n     *\n     * @param {qx.io.graphql.protocol.Request} request The GraphQl request object.\n     * @return {qx.Promise} Promise that resolves with the data\n     */\n    async send(request) {\n      let transport = this.getTransport();\n      return new qx.Promise((resolve, reject) => {\n        transport.addListenerOnce(\"message\", evt => {\n          try {\n            if (qx.core.Environment.get(\"qx.io.graphql.debug\")) {\n              this.debug(\"<<< Received: \" + evt.getData());\n            }\n            let responseData = qx.lang.Json.parse(evt.getData());\n            let graphQlResponse = new qx.io.graphql.protocol.Response(\n              responseData\n            );\n\n            if (graphQlResponse.getErrors()) {\n              return reject(this._handleErrors(graphQlResponse));\n            }\n            return resolve(graphQlResponse.getData());\n          } catch (e) {\n            this.error(e);\n            return reject(new qx.io.exception.Transport(e.message));\n          }\n        });\n        if (qx.core.Environment.get(\"qx.io.graphql.debug\")) {\n          this.debug(\">>>> Sending \" + request.toString());\n        }\n        transport.send(request.toString()).catch(reject);\n      });\n    },\n\n    /**\n     * Handle the errors reported by the GraphQL endpoint. The response\n     * can contain several errors, but we can only throw one of them.\n     * However, we can fire an event for each error, which might be useful\n     * if they are to be logged. The errors that are thrown or fired as\n     * event data contain the original response object in the `data` property\n     *\n     * @param {qx.io.graphql.protocol.Response} response The response object\n     * @return {qx.io.exception.Protocol}\n     */\n    _handleErrors(response) {\n      let errors = response.getErrors();\n      errors.forEach(error => {\n        let exception = new qx.io.exception.Protocol(\n          error.message,\n          null,\n          response.toObject()\n        );\n\n        this.fireDataEvent(\"error\", exception);\n      });\n      return new qx.io.exception.Protocol(\n        errors[0].message,\n        null,\n        response.toObject()\n      );\n    }\n  },\n\n  environment: {\n    \"qx.io.graphql.debug\": false\n  }\n});\n"
  ],
  "mappings": "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"
}