{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "html",
    "Node",
    "construct",
    "tagName",
    "styles",
    "attributes",
    "__styleValues",
    "__attribValues",
    "key",
    "Error",
    "classname",
    "initCssClass",
    "registerProperty",
    "value",
    "_domNode",
    "innerHTML",
    "writer",
    "property",
    "name",
    "statics",
    "DEBUG",
    "_hasRoots",
    "_defaultRoot",
    "_modified",
    "_visibility",
    "_scroll",
    "_actions",
    "__selection",
    "__focusHandler",
    "__mouseCapture",
    "__SELF_CLOSING_TAGS",
    "_scheduleFlush",
    "job",
    "Element",
    "__deferredCall",
    "schedule",
    "flush",
    "obj",
    "later",
    "modified",
    "hc",
    "_willBeSeeable",
    "dom",
    "Hierarchy",
    "isRendered",
    "push",
    "i",
    "l",
    "length",
    "visibility",
    "element",
    "$$disposed",
    "style",
    "display",
    "isVisible",
    "core",
    "Environment",
    "get",
    "document",
    "documentMode",
    "selection",
    "elem",
    "bom",
    "Selection",
    "set",
    "start",
    "end",
    "event",
    "handler",
    "Appear",
    "refresh",
    "__getFocusHandler",
    "__getCaptureElement",
    "__willBecomeInvisible",
    "domElement",
    "fromDomElement",
    "fromDomNode",
    "setDefaultRoot",
    "root",
    "getDefaultRoot",
    "properties",
    "cssClass",
    "init",
    "nullable",
    "check",
    "apply",
    "members",
    "__root",
    "__lazyScrollIntoViewX",
    "__lazyScrollIntoViewY",
    "__lazyScrollX",
    "__lazyScrollY",
    "__styleJobs",
    "__attribJobs",
    "_createDomElement",
    "create",
    "_nodeName",
    "serialize",
    "__childrenHaveChanged",
    "importQxObjectIds",
    "_serializeImpl",
    "data",
    "Attribute",
    "lang",
    "Object",
    "clone",
    "keys",
    "Style",
    "css",
    "compile",
    "_properties",
    "call",
    "undefined",
    "JSON",
    "stringify",
    "_children",
    "connectWidget",
    "widget",
    "connectObject",
    "disconnectWidget",
    "disconnectObject",
    "_addChildImpl",
    "child",
    "_removeChildImpl",
    "getQxObject",
    "id",
    "thisId",
    "getQxObjectId",
    "thisAttributeId",
    "getAttribute",
    "setAttribute",
    "setQxObjectId",
    "resolveImpl",
    "node",
    "attributeId",
    "endsWith",
    "warn",
    "segs",
    "split",
    "parentNode",
    "addOwnedQxObject",
    "subId",
    "Array",
    "shift",
    "pop",
    "join",
    "Id",
    "children",
    "getChildren",
    "forEach",
    "_copyData",
    "fromMarkup",
    "propertiesFromDom",
    "str",
    "classes",
    "startsWith",
    "setCssClass",
    "setStyles",
    "setCss",
    "setVisible",
    "_syncData",
    "jobs",
    "reset",
    "setRoot",
    "isRoot",
    "useMarkup",
    "helper",
    "createElement",
    "getHelperElement",
    "useElement",
    "firstChild",
    "useNode",
    "isFocusable",
    "tabIndex",
    "focusable",
    "Focus",
    "FOCUSABLE_ELEMENTS",
    "setSelectable",
    "userSelect",
    "setStyle",
    "isNativelyFocusable",
    "fadeIn",
    "duration",
    "col",
    "qxWeb",
    "isPlaying",
    "stop",
    "once",
    "show",
    "getAnimationHandles",
    "fadeOut",
    "hide",
    "_applyVisible",
    "oldValue",
    "toHashCode",
    "_parent",
    "_scheduleChildrenUpdate",
    "scrollChildIntoViewX",
    "align",
    "direct",
    "thisEl",
    "childEl",
    "getDomElement",
    "offsetWidth",
    "Scroll",
    "intoViewX",
    "scrollChildIntoViewY",
    "intoViewY",
    "scrollToX",
    "x",
    "lazy",
    "scrollLeft",
    "getScrollX",
    "scrollToY",
    "y",
    "scrollTop",
    "getScrollY",
    "disableScrolling",
    "enableScrolling",
    "addListener",
    "__onScroll",
    "removeListener",
    "__inScroll",
    "e",
    "setText",
    "self",
    "Text",
    "remove",
    "add",
    "getText",
    "result",
    "getTextSelection",
    "el",
    "getTextSelectionLength",
    "getLength",
    "getTextSelectionStart",
    "getStart",
    "getTextSelectionEnd",
    "getEnd",
    "setTextSelection",
    "clearTextSelection",
    "clear",
    "__performAction",
    "action",
    "args",
    "focus",
    "blur",
    "activate",
    "deactivate",
    "capture",
    "containerCapture",
    "releaseCapture",
    "_applyStyle",
    "map",
    "removeStyle",
    "getStyle",
    "getAllStyles",
    "__breakClasses",
    "toLowerCase",
    "__combineClasses",
    "primaryClass",
    "getCssClass",
    "arr",
    "append",
    "values",
    "addClass",
    "nameLower",
    "removeClass",
    "removeAllClasses",
    "_applyCssClass",
    "getDimensions",
    "mode",
    "left",
    "top",
    "right",
    "bottom",
    "width",
    "height",
    "content",
    "loc",
    "Location",
    "Dimension",
    "getContentSize",
    "canBeSeen",
    "rect",
    "getBoundingClientRect",
    "setAttributes",
    "removeAttribute",
    "defer",
    "util",
    "DeferredCall",
    "destruct",
    "hash"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/html/Element.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * High-performance, high-level DOM element creation and management.\n *\n * Includes support for HTML and style attributes. Elements also have\n * got a powerful children and visibility management.\n *\n * Processes DOM insertion and modification with advanced logic\n * to reduce the real transactions.\n *\n * From the view of the parent you can use the following children management\n * methods:\n * {@link #getChildren}, {@link #indexOf}, {@link #hasChild}, {@link #add},\n * {@link #addAt}, {@link #remove}, {@link #removeAt}, {@link #removeAll}\n *\n * Each child itself also has got some powerful methods to control its\n * position:\n * {@link #getParent}, {@link #free},\n * {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n * {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.module.Animation)\n */\nqx.Class.define(\"qx.html.Element\", {\n  extend: qx.html.Node,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new Element\n   *\n   * @param tagName {String?\"div\"} Tag name of the element to create\n   * @param styles {Map?null} optional map of CSS styles, where the key is the name\n   *    of the style and the value is the value to use.\n   * @param attributes {Map?null} optional map of element attributes, where the\n   *    key is the name of the attribute and the value is the value to use.\n   */\n  construct(tagName, styles, attributes) {\n    super(tagName || \"div\");\n\n    this.__styleValues = styles || null;\n    this.__attribValues = attributes || null;\n    if (attributes) {\n      for (var key in attributes) {\n        if (!key) {\n          throw new Error(\"Invalid unnamed attribute in \" + this.classname);\n        }\n      }\n    }\n    this.initCssClass();\n\n    this.registerProperty(\n      \"innerHtml\",\n      null,\n      function (value) {\n        if (this._domNode) {\n          this._domNode.innerHTML = value;\n        }\n      },\n      function (writer, property, name) {\n        if (property.value) {\n          writer(property.value);\n        }\n      }\n    );\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      STATIC DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Boolean} If debugging should be enabled */\n    DEBUG: false,\n\n    /** @type {Integer} number of roots */\n    _hasRoots: 0,\n\n    /** @type {Element} the default root to use */\n    _defaultRoot: null,\n\n    /** @type {Map} Contains the modified {@link qx.html.Element}s. The key is the hash code. */\n    _modified: {},\n\n    /** @type {Map} Contains the {@link qx.html.Element}s which should get hidden or visible at the next flush. The key is the hash code. */\n    _visibility: {},\n\n    /** @type {Map} Contains the {@link qx.html.Element}s which should scrolled at the next flush */\n    _scroll: {},\n\n    /** @type {Array} List of post actions for elements. The key is the action name. The value the {@link qx.html.Element}. */\n    _actions: [],\n\n    /**  @type {Map} List of all selections. */\n    __selection: {},\n\n    __focusHandler: null,\n\n    __mouseCapture: null,\n\n    __SELF_CLOSING_TAGS: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC ELEMENT FLUSH\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Schedule a deferred element queue flush. If the widget subsystem is used\n     * this method gets overwritten by {@link qx.ui.core.queue.Manager}.\n     *\n     * @param job {String} The job descriptor. Should always be <code>\"element\"</code>.\n     */\n    _scheduleFlush(job) {\n      qx.html.Element.__deferredCall.schedule();\n    },\n\n    /**\n     * Flush the global modified list\n     */\n    flush() {\n      var obj;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (this.DEBUG) {\n          qx.log.Logger.debug(this, \"Flushing elements...\");\n        }\n      }\n\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        // blur elements, which will be removed\n        var focusHandler = this.__getFocusHandler();\n        var focusedDomElement = focusHandler.getFocus();\n        if (\n          focusedDomElement &&\n          this.__willBecomeInvisible(focusedDomElement)\n        ) {\n          focusHandler.blur(focusedDomElement);\n        }\n\n        // deactivate elements, which will be removed\n        var activeDomElement = focusHandler.getActive();\n        if (activeDomElement && this.__willBecomeInvisible(activeDomElement)) {\n          qx.bom.Element.deactivate(activeDomElement);\n        }\n\n        // release capture for elements, which will be removed\n        var captureDomElement = this.__getCaptureElement();\n        if (\n          captureDomElement &&\n          this.__willBecomeInvisible(captureDomElement)\n        ) {\n          qx.bom.Element.releaseCapture(captureDomElement);\n        }\n      }\n\n      var later = [];\n      var modified = qx.html.Element._modified;\n\n      for (var hc in modified) {\n        obj = modified[hc];\n        // Ignore all hidden elements except iframes\n        // but keep them until they get visible (again)\n        if (obj._willBeSeeable() || obj.classname == \"qx.html.Iframe\") {\n          // Separately queue rendered elements\n          if (obj._domNode && qx.dom.Hierarchy.isRendered(obj._domNode)) {\n            later.push(obj);\n          }\n\n          // Flush invisible elements first\n          else {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              if (this.DEBUG) {\n                obj.debug(\"Flush invisible element\");\n              }\n            }\n\n            obj.flush();\n          }\n\n          // Cleanup modification list\n          delete modified[hc];\n        }\n      }\n\n      for (var i = 0, l = later.length; i < l; i++) {\n        obj = later[i];\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (this.DEBUG) {\n            obj.debug(\"Flush rendered element\");\n          }\n        }\n\n        obj.flush();\n      }\n\n      // Process visibility list\n      var visibility = this._visibility;\n\n      for (var hc in visibility) {\n        obj = visibility[hc];\n\n        var element = obj._domNode;\n        if (!element) {\n          delete visibility[hc];\n          continue;\n        }\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (this.DEBUG) {\n            qx.log.Logger.debug(\n              this,\n              \"Switching visibility to: \" + obj.isVisible()\n            );\n          }\n        }\n\n        // hiding or showing an object and deleting it right after that may\n        // cause an disposed object in the visibility queue [BUG #3607]\n        if (!obj.$$disposed) {\n          element.style.display = obj.isVisible() ? \"\" : \"none\";\n          // also hide the element (fixed some rendering problem in IE<8 & IE8 quirks)\n          if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n            if (!(document.documentMode >= 8)) {\n              element.style.visibility = obj.isVisible() ? \"visible\" : \"hidden\";\n            }\n          }\n        }\n\n        delete visibility[hc];\n      }\n\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        // Process scroll list\n        var scroll = this._scroll;\n        for (var hc in scroll) {\n          obj = scroll[hc];\n          var elem = obj._domNode;\n\n          if (elem && elem.offsetWidth) {\n            var done = true;\n\n            // ScrollToX\n            if (obj.__lazyScrollX != null) {\n              obj._domNode.scrollLeft = obj.__lazyScrollX;\n              delete obj.__lazyScrollX;\n            }\n\n            // ScrollToY\n            if (obj.__lazyScrollY != null) {\n              obj._domNode.scrollTop = obj.__lazyScrollY;\n              delete obj.__lazyScrollY;\n            }\n\n            // ScrollIntoViewX\n            var intoViewX = obj.__lazyScrollIntoViewX;\n            if (intoViewX != null) {\n              var child = intoViewX.element.getDomElement();\n\n              if (child && child.offsetWidth) {\n                qx.bom.element.Scroll.intoViewX(child, elem, intoViewX.align);\n                delete obj.__lazyScrollIntoViewX;\n              } else {\n                done = false;\n              }\n            }\n\n            // ScrollIntoViewY\n            var intoViewY = obj.__lazyScrollIntoViewY;\n            if (intoViewY != null) {\n              var child = intoViewY.element.getDomElement();\n\n              if (child && child.offsetWidth) {\n                qx.bom.element.Scroll.intoViewY(child, elem, intoViewY.align);\n                delete obj.__lazyScrollIntoViewY;\n              } else {\n                done = false;\n              }\n            }\n\n            // Clear flag if all things are done\n            // Otherwise wait for the next flush\n            if (done) {\n              delete scroll[hc];\n            }\n          }\n        }\n\n        var activityEndActions = {\n          releaseCapture: 1,\n          blur: 1,\n          deactivate: 1\n        };\n\n        // Process action list\n        for (var i = 0; i < this._actions.length; i++) {\n          var action = this._actions[i];\n          var element = action.element._domNode;\n          if (\n            !element ||\n            (!activityEndActions[action.type] &&\n              !action.element._willBeSeeable())\n          ) {\n            continue;\n          }\n          var args = action.args;\n          args.unshift(element);\n          qx.bom.Element[action.type].apply(qx.bom.Element, args);\n        }\n        this._actions = [];\n      }\n\n      // Process selection\n      for (var hc in this.__selection) {\n        var selection = this.__selection[hc];\n        var elem = selection.element._domNode;\n        if (elem) {\n          qx.bom.Selection.set(elem, selection.start, selection.end);\n          delete this.__selection[hc];\n        }\n      }\n\n      // Fire appear/disappear events\n      qx.event.handler.Appear.refresh();\n    },\n\n    /**\n     * Get the focus handler\n     *\n     * @return {qx.event.handler.Focus} The focus handler\n     */\n    __getFocusHandler() {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        if (!this.__focusHandler) {\n          var eventManager = qx.event.Registration.getManager(window);\n          this.__focusHandler = eventManager.getHandler(qx.event.handler.Focus);\n        }\n        return this.__focusHandler;\n      } else {\n        throw new Error(\n          \"Unexpected use of qx.html.Element.__getFocusHandler in headless environment\"\n        );\n      }\n    },\n\n    /**\n     * Get the mouse capture element\n     *\n     * @return {Element} The mouse capture DOM element\n     */\n    __getCaptureElement() {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        if (!this.__mouseCapture) {\n          var eventManager = qx.event.Registration.getManager(window);\n          this.__mouseCapture = eventManager.getDispatcher(\n            qx.event.dispatch.MouseCapture\n          );\n        }\n        return this.__mouseCapture.getCaptureElement();\n      } else {\n        throw new Error(\n          \"Unexpected use of qx.html.Element.__getCaptureElement in headless environment\"\n        );\n      }\n    },\n\n    /**\n     * Whether the given DOM element will become invisible after the flush\n     *\n     * @param domElement {Element} The DOM element to check\n     * @return {Boolean} Whether the element will become invisible\n     */\n    __willBecomeInvisible(domElement) {\n      var element = this.fromDomElement(domElement);\n      return element && !element._willBeSeeable();\n    },\n\n    /**\n     * Finds the Widget for a given DOM element\n     *\n     * @param domElement {DOM} the DOM element\n     * @return {qx.ui.core.Widget} the Widget that created the DOM element\n     * @deprecated {6.1} see qx.html.Node.fromDomNode\n     */\n    fromDomElement(domElement) {\n      return qx.html.Node.fromDomNode(domElement);\n    },\n\n    /**\n     * Sets the default Root element\n     *\n     * @param root {Element} the new default root\n     */\n    setDefaultRoot(root) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (this._defaultRoot && root) {\n          qx.log.Logger.warn(\n            qx.html.Element,\n            \"Changing default root, from \" + this._defaultRoot + \" to \" + root\n          );\n        }\n      }\n      this._defaultRoot = root;\n    },\n\n    /**\n     * Returns the default root\n     *\n     * @return {Element} the default root\n     */\n    getDefaultRoot() {\n      return this._defaultRoot;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * @type{String} The primary CSS class for this element\n     *\n     * The implementation will add and remove this class from the list of classes,\n     * this property is provided as a means to easily set the primary class.  Because\n     * SCSS supports inheritance, it's more useful to be able to allow the SCSS\n     * definition to control the inheritance hierarchy of classes.\n     *\n     * For example, a dialog could be implemented in code as a Dialog class derived from\n     * a Window class, but the presentation may be so different that the theme author\n     * would choose to not use inheritance at all.\n     */\n    cssClass: {\n      init: null,\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyCssClass\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED HELPERS/DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Boolean} Marker for always visible root nodes (often the body node) */\n    __root: false,\n\n    __lazyScrollIntoViewX: null,\n    __lazyScrollIntoViewY: null,\n\n    __lazyScrollX: null,\n    __lazyScrollY: null,\n\n    __styleJobs: null,\n    __attribJobs: null,\n\n    __styleValues: null,\n    __attribValues: null,\n\n    /*\n     * @Override\n     */\n    _createDomElement() {\n      return qx.dom.Element.create(this._nodeName);\n    },\n\n    /*\n     * @Override\n     */\n    serialize(writer) {\n      if (this.__childrenHaveChanged) {\n        this.importQxObjectIds();\n        this.__childrenHaveChanged = false;\n      }\n      return super.serialize(writer);\n    },\n\n    /*\n     * @Override\n     */\n    _serializeImpl(writer) {\n      writer(\"<\", this._nodeName);\n\n      // Copy attributes\n      var data = this.__attribValues;\n      if (data) {\n        var Attribute = qx.bom.element.Attribute;\n        for (var key in data) {\n          writer(\" \");\n          Attribute.serialize(writer, key, data[key]);\n        }\n      }\n\n      // Copy styles\n      var data = this.__styleValues || {};\n      if (!this.isVisible()) {\n        data = qx.lang.Object.clone(data);\n        data.display = \"none\";\n      }\n      if (Object.keys(data).length) {\n        var Style = qx.bom.element.Style;\n        var css = Style.compile(data);\n        if (css) {\n          writer(' style=\"', css, '\"');\n        }\n      }\n\n      // Copy properties\n      var data = this._properties;\n      if (data) {\n        for (var key in this._properties) {\n          let property = this._properties[key];\n          if (property.serialize) {\n            writer(\" \");\n            property.serialize.call(this, writer, key, property);\n          } else if (property.value !== undefined && property.value !== null) {\n            writer(\" \");\n            let value = JSON.stringify(property.value);\n            writer(key, \"=\", value);\n          }\n        }\n      }\n\n      // Children\n      if (!this._children || !this._children.length) {\n        if (qx.html.Element.__SELF_CLOSING_TAGS[this._nodeName]) {\n          writer(\">\");\n        } else {\n          writer(\"></\", this._nodeName, \">\");\n        }\n      } else {\n        writer(\">\");\n        for (var i = 0; i < this._children.length; i++) {\n          this._children[i]._serializeImpl(writer);\n        }\n        writer(\"</\", this._nodeName, \">\");\n      }\n    },\n\n    /**\n     * Connects a widget to this element, and to the DOM element in this Element.  They\n     * remain associated until disposed or disconnectWidget is called\n     *\n     * @param widget {qx.ui.core.Widget} the widget to associate\n     * @deprecated {6.1} see connectObject\n     */\n    connectWidget(widget) {\n      return this.connectObject(widget);\n    },\n\n    /**\n     * Disconnects a widget from this element and the DOM element.  The DOM element remains\n     * untouched, except that it can no longer be used to find the Widget.\n     *\n     * @param qxObject {qx.core.Object} the Widget\n     * @deprecated {6.1} see disconnectObject\n     */\n    disconnectWidget(widget) {\n      return this.disconnectObject(widget);\n    },\n\n    /*\n     * @Override\n     */\n    _addChildImpl(child) {\n      super._addChildImpl(child);\n      this.__childrenHaveChanged = true;\n    },\n\n    /*\n     * @Override\n     */\n    _removeChildImpl(child) {\n      super._removeChildImpl(child);\n      this.__childrenHaveChanged = true;\n    },\n\n    /*\n     * @Override\n     */\n    getQxObject(id) {\n      if (this.__childrenHaveChanged) {\n        this.importQxObjectIds();\n        this.__childrenHaveChanged = false;\n      }\n      return super.getQxObject(id);\n    },\n\n    /**\n     * When a tree of virtual dom is loaded via JSX code, the paths in the `data-qx-object-id`\n     * attribute are relative to the JSX, and these attribuite values need to be loaded into the\n     * `qxObjectId` property - while resolving the parent parts of the path.\n     *\n     * EG\n     *  <div data-qx-object-id=\"root\">\n     *    <div>\n     *      <div data-qx-object-id=\"root/child\">\n     *\n     * The root DIV has to take on the qxObjectId of \"root\", and the third DIV has to have the\n     * ID \"child\" and be owned by the first DIV.\n     *\n     * This function imports and resolves those IDs\n     */\n    importQxObjectIds() {\n      let thisId = this.getQxObjectId();\n      let thisAttributeId = this.getAttribute(\"data-qx-object-id\");\n      if (thisId) {\n        this.setAttribute(\"data-qx-object-id\", thisId, true);\n      } else if (thisAttributeId) {\n        this.setQxObjectId(thisAttributeId);\n      }\n\n      const resolveImpl = node => {\n        if (!(node instanceof qx.html.Element)) {\n          return;\n        }\n        let id = node.getQxObjectId();\n        let attributeId = node.getAttribute(\"data-qx-object-id\");\n        if (id) {\n          if (attributeId && !attributeId.endsWith(id)) {\n            this.warn(\n              `Attribute ID ${attributeId} is not compatible with the qxObjectId ${id}; the qxObjectId will take prescedence`\n            );\n          }\n          node.setAttribute(\"data-qx-object-id\", id, true);\n        } else if (attributeId) {\n          let segs = attributeId ? attributeId.split(\"/\") : [];\n\n          // Only one segment is easy, add directly to the parent\n          if (segs.length == 1) {\n            let parentNode = this;\n            parentNode.addOwnedQxObject(node, attributeId);\n\n            // Lots of segments\n          } else if (segs.length > 1) {\n            let parentNode = null;\n\n            // If the first segment is the outer parent\n            if (segs[0] == thisAttributeId || segs[0] == thisId) {\n              // Only two segments, means that the parent is the outer and the last segment\n              //  is the ID of the node being examined\n              if (segs.length == 2) {\n                parentNode = this;\n\n                // Otherwise resolve it further\n              } else {\n                // Extract the segments, exclude the first and last, and that leaves us with a relative ID path\n                let subId = qx.lang.Array.clone(segs);\n                subId.shift();\n                subId.pop();\n                subId = subId.join(\"/\");\n                parentNode = this.getQxObject(subId);\n              }\n\n              // Not the outer node, then resolve as a global.\n            } else {\n              parentNode = qx.core.Id.getQxObject(attributeId);\n            }\n\n            if (!parentNode) {\n              throw new Error(\n                `Cannot resolve object id ancestors, id=${attributeId}`\n              );\n            }\n\n            parentNode.addOwnedQxObject(node, segs[segs.length - 1]);\n          }\n        }\n\n        let children = node.getChildren();\n        if (children) {\n          children.forEach(resolveImpl);\n        }\n      };\n\n      let children = this.getChildren();\n      if (children) {\n        children.forEach(resolveImpl);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR ATTRIBUTE/STYLE/EVENT FLUSH\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Copies data between the internal representation and the DOM. This\n     * simply copies all the data and only works well directly after\n     * element creation. After this the data must be synced using {@link #_syncData}\n     *\n     * @param fromMarkup {Boolean} Whether the copy should respect styles\n     *   given from markup\n     */\n    _copyData(fromMarkup, propertiesFromDom) {\n      super._copyData(fromMarkup, propertiesFromDom);\n      var elem = this._domNode;\n\n      // Copy attributes\n      var data = this.__attribValues;\n      if (data) {\n        var Attribute = qx.bom.element.Attribute;\n        if (fromMarkup) {\n          var str;\n          let classes = {};\n          str = this.getAttribute(\"class\");\n          (str ? str.split(\" \") : []).forEach(name => {\n            if (name.startsWith(\"qx-\")) {\n              classes[name] = true;\n            }\n          });\n\n          str = Attribute.get(elem, \"class\");\n          if (!qx.core.Environment.get(\"qx.headless\")) {\n            if (str instanceof window.SVGAnimatedString) {\n              str = str.baseVal;\n            }\n          }\n          (str ? str.split(\" \") : []).forEach(name => (classes[name] = true));\n          classes = Object.keys(classes);\n\n          var segs = classes;\n          if (segs.length) {\n            this.setCssClass(segs[0]);\n            this.setAttribute(\"class\", classes.join(\" \"));\n          } else {\n            this.setCssClass(null);\n            this.setAttribute(\"class\", null);\n          }\n        }\n        for (var key in data) {\n          Attribute.set(elem, key, data[key]);\n        }\n      }\n\n      // Copy styles\n      var data = this.__styleValues;\n      if (data) {\n        var Style = qx.bom.element.Style;\n\n        if (fromMarkup) {\n          Style.setStyles(elem, data);\n        } else {\n          // Set styles at once which is a lot faster in most browsers\n          // compared to separate modifications of many single style properties.\n          Style.setCss(elem, Style.compile(data));\n        }\n      }\n\n      // Copy visibility\n      if (!fromMarkup) {\n        var display = elem.style.display || \"\";\n        if (display == \"\" && !this.isVisible()) {\n          elem.style.display = \"none\";\n        } else if (display == \"none\" && this.isVisible()) {\n          elem.style.display = \"\";\n        }\n      } else {\n        var display = elem.style.display || \"\";\n        this.setVisible(display != \"none\");\n      }\n    },\n\n    /**\n     * Synchronizes data between the internal representation and the DOM. This\n     * is the counterpart of {@link #_copyData} and is used for further updates\n     * after the element has been created.\n     *\n     */\n    _syncData() {\n      super._syncData();\n      var elem = this._domNode;\n\n      var Attribute = qx.bom.element.Attribute;\n      var Style = qx.bom.element.Style;\n\n      // Sync attributes\n      var jobs = this.__attribJobs;\n      if (jobs) {\n        var data = this.__attribValues;\n        if (data) {\n          var value;\n          for (var key in jobs) {\n            value = data[key];\n\n            if (value !== undefined) {\n              Attribute.set(elem, key, value);\n            } else {\n              Attribute.reset(elem, key);\n            }\n          }\n        }\n\n        this.__attribJobs = null;\n      }\n\n      // Sync styles\n      var jobs = this.__styleJobs;\n      if (jobs) {\n        var data = this.__styleValues;\n        if (data) {\n          var styles = {};\n          for (var key in jobs) {\n            styles[key] = data[key];\n          }\n\n          Style.setStyles(elem, styles);\n        }\n\n        this.__styleJobs = null;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DOM ELEMENT ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the element's root flag, which indicates\n     * whether the element should be a root element or not.\n     * @param root {Boolean} The root flag.\n     */\n    setRoot(root) {\n      if (root && !this.__root) {\n        qx.html.Element._hasRoots++;\n      } else if (!root && this.__root) {\n        qx.html.Element._hasRoots--;\n      }\n      this.__root = root;\n    },\n\n    /*\n     * @Override\n     */\n    isRoot() {\n      return this.__root;\n    },\n\n    /**\n     * Uses existing markup for this element. This is mainly used\n     * to insert pre-built markup blocks into the element hierarchy.\n     *\n     * @param html {String} HTML markup with one root element\n     *   which is used as the main element for this instance.\n     * @return {Element} The created DOM element\n     */\n    useMarkup(html) {\n      if (this._domNode) {\n        throw new Error(\"Could not overwrite existing element!\");\n      }\n\n      // Prepare extraction\n      // We have a IE specific issue with \"Unknown error\" messages\n      // when we try to use the same DOM node again. I am not sure\n      // why this happens. Would be a good performance improvement,\n      // but does not seem to work.\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n        var helper = document.createElement(\"div\");\n      } else {\n        var helper = qx.dom.Element.getHelperElement();\n      }\n\n      // Extract first element\n      helper.innerHTML = html;\n      this.useElement(helper.firstChild);\n\n      return this._domNode;\n    },\n\n    /**\n     * Uses an existing element instead of creating one. This may be interesting\n     * when the DOM element is directly needed to add content etc.\n     *\n     * @param elem {Element} Element to reuse\n     * @deprecated {6.1} see useNode\n     */\n    useElement(elem) {\n      this.useNode(elem);\n    },\n\n    /**\n     * Whether the element is focusable (or will be when created)\n     *\n     * @return {Boolean} <code>true</code> when the element is focusable.\n     */\n    isFocusable() {\n      var tabIndex = this.getAttribute(\"tabIndex\");\n      if (tabIndex >= 1) {\n        return true;\n      }\n\n      var focusable = qx.event.handler.Focus.FOCUSABLE_ELEMENTS;\n      if (tabIndex >= 0 && focusable[this._nodeName]) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Set whether the element is selectable. It uses the qooxdoo attribute\n     * qxSelectable with the values 'on' or 'off'.\n     * In webkit, a special css property will be used (-webkit-user-select).\n     *\n     * @param value {Boolean} True, if the element should be selectable.\n     */\n    setSelectable(value) {\n      this.setAttribute(\"qxSelectable\", value ? \"on\" : \"off\");\n      var userSelect = qx.core.Environment.get(\"css.userselect\");\n      if (userSelect) {\n        this.setStyle(\n          userSelect,\n          value ? \"text\" : qx.core.Environment.get(\"css.userselect.none\")\n        );\n      }\n    },\n\n    /**\n     * Whether the element is natively focusable (or will be when created)\n     *\n     * This ignores the configured tabIndex.\n     *\n     * @return {Boolean} <code>true</code> when the element is focusable.\n     */\n    isNativelyFocusable() {\n      return !!qx.event.handler.Focus.FOCUSABLE_ELEMENTS[this._nodeName];\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      ANIMATION SUPPORT\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Fades in the element.\n     * @param duration {Number} Time in ms.\n     * @return {qx.bom.element.AnimationHandle} The animation handle to react for\n     *   the fade animation.\n     */\n    fadeIn(duration) {\n      var col = qxWeb(this._domNode);\n      if (col.isPlaying()) {\n        col.stop();\n      }\n      // create the element right away\n      if (!this._domNode) {\n        this.flush();\n        col.push(this._domNode);\n      }\n      if (this._domNode) {\n        col.fadeIn(duration).once(\n          \"animationEnd\",\n          function () {\n            this.show();\n            qx.html.Element.flush();\n          },\n          this\n        );\n\n        return col.getAnimationHandles()[0];\n      }\n    },\n\n    /**\n     * Fades out the element.\n     * @param duration {Number} Time in ms.\n     * @return {qx.bom.element.AnimationHandle} The animation handle to react for\n     *   the fade animation.\n     */\n    fadeOut(duration) {\n      var col = qxWeb(this._domNode);\n      if (col.isPlaying()) {\n        col.stop();\n      }\n\n      if (this._domNode) {\n        col.fadeOut(duration).once(\n          \"animationEnd\",\n          function () {\n            this.hide();\n            qx.html.Element.flush();\n          },\n          this\n        );\n\n        return col.getAnimationHandles()[0];\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      VISIBILITY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /*\n     * @Override\n     */\n    _applyVisible(value, oldValue) {\n      this.base(arguments, value, oldValue);\n      if (value) {\n        if (this._domNode) {\n          qx.html.Element._visibility[this.toHashCode()] = this;\n          qx.html.Element._scheduleFlush(\"element\");\n        }\n\n        // Must be sure that the element gets included into the DOM.\n        if (this._parent) {\n          this._parent._scheduleChildrenUpdate();\n        }\n      } else {\n        if (this._domNode) {\n          qx.html.Element._visibility[this.toHashCode()] = this;\n          qx.html.Element._scheduleFlush(\"element\");\n        }\n      }\n    },\n\n    /**\n     * Marks the element as visible which means that a previously applied\n     * CSS style of display=none gets removed and the element will inserted\n     * into the DOM, when this had not already happened before.\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    show() {\n      this.setVisible(true);\n      return this;\n    },\n\n    /**\n     * Marks the element as hidden which means it will kept in DOM (if it\n     * is already there, but configured hidden using a CSS style of display=none).\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    hide() {\n      this.setVisible(false);\n      return this;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Scrolls the given child element into view. Only scrolls children.\n     * Do not influence elements on top of this element.\n     *\n     * If the element is currently invisible it gets scrolled automatically\n     * at the next time it is visible again (queued).\n     *\n     * @param elem {qx.html.Element} The element to scroll into the viewport.\n     * @param align {String?null} Alignment of the element. Allowed values:\n     *   <code>left</code> or <code>right</code>. Could also be null.\n     *   Without a given alignment the method tries to scroll the widget\n     *   with the minimum effort needed.\n     * @param direct {Boolean?true} Whether the execution should be made\n     *   directly when possible\n     */\n    scrollChildIntoViewX(elem, align, direct) {\n      var thisEl = this._domNode;\n      var childEl = elem.getDomElement();\n\n      if (\n        direct !== false &&\n        thisEl &&\n        thisEl.offsetWidth &&\n        childEl &&\n        childEl.offsetWidth\n      ) {\n        qx.bom.element.Scroll.intoViewX(childEl, thisEl, align);\n      } else {\n        this.__lazyScrollIntoViewX = {\n          element: elem,\n          align: align\n        };\n\n        qx.html.Element._scroll[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      delete this.__lazyScrollX;\n    },\n\n    /**\n     * Scrolls the given child element into view. Only scrolls children.\n     * Do not influence elements on top of this element.\n     *\n     * If the element is currently invisible it gets scrolled automatically\n     * at the next time it is visible again (queued).\n     *\n     * @param elem {qx.html.Element} The element to scroll into the viewport.\n     * @param align {String?null} Alignment of the element. Allowed values:\n     *   <code>top</code> or <code>bottom</code>. Could also be null.\n     *   Without a given alignment the method tries to scroll the widget\n     *   with the minimum effort needed.\n     * @param direct {Boolean?true} Whether the execution should be made\n     *   directly when possible\n     */\n    scrollChildIntoViewY(elem, align, direct) {\n      var thisEl = this._domNode;\n      var childEl = elem.getDomElement();\n\n      if (\n        direct !== false &&\n        thisEl &&\n        thisEl.offsetWidth &&\n        childEl &&\n        childEl.offsetWidth\n      ) {\n        qx.bom.element.Scroll.intoViewY(childEl, thisEl, align);\n      } else {\n        this.__lazyScrollIntoViewY = {\n          element: elem,\n          align: align\n        };\n\n        qx.html.Element._scroll[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      delete this.__lazyScrollY;\n    },\n\n    /**\n     * Scrolls the element to the given left position.\n     *\n     * @param x {Integer} Horizontal scroll position\n     * @param lazy {Boolean?false} Whether the scrolling should be performed\n     *    during element flush.\n     */\n    scrollToX(x, lazy) {\n      var thisEl = this._domNode;\n      if (lazy !== true && thisEl && thisEl.offsetWidth) {\n        thisEl.scrollLeft = x;\n        delete this.__lazyScrollX;\n      } else {\n        this.__lazyScrollX = x;\n        qx.html.Element._scroll[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      delete this.__lazyScrollIntoViewX;\n    },\n\n    /**\n     * Get the horizontal scroll position.\n     *\n     * @return {Integer} Horizontal scroll position\n     */\n    getScrollX() {\n      var thisEl = this._domNode;\n      if (thisEl) {\n        return thisEl.scrollLeft;\n      }\n\n      return this.__lazyScrollX || 0;\n    },\n\n    /**\n     * Scrolls the element to the given top position.\n     *\n     * @param y {Integer} Vertical scroll position\n     * @param lazy {Boolean?false} Whether the scrolling should be performed\n     *    during element flush.\n     */\n    scrollToY(y, lazy) {\n      var thisEl = this._domNode;\n      if (lazy !== true && thisEl && thisEl.offsetWidth) {\n        thisEl.scrollTop = y;\n        delete this.__lazyScrollY;\n      } else {\n        this.__lazyScrollY = y;\n        qx.html.Element._scroll[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      delete this.__lazyScrollIntoViewY;\n    },\n\n    /**\n     * Get the vertical scroll position.\n     *\n     * @return {Integer} Vertical scroll position\n     */\n    getScrollY() {\n      var thisEl = this._domNode;\n      if (thisEl) {\n        return thisEl.scrollTop;\n      }\n\n      return this.__lazyScrollY || 0;\n    },\n\n    /**\n     * Disables browser-native scrolling\n     */\n    disableScrolling() {\n      this.enableScrolling();\n      this.scrollToX(0);\n      this.scrollToY(0);\n      this.addListener(\"scroll\", this.__onScroll, this);\n    },\n\n    /**\n     * Re-enables browser-native scrolling\n     */\n    enableScrolling() {\n      this.removeListener(\"scroll\", this.__onScroll, this);\n    },\n\n    __inScroll: null,\n\n    /**\n     * Handler for the scroll-event\n     *\n     * @param e {qx.event.type.Native} scroll-event\n     */\n    __onScroll(e) {\n      if (!this.__inScroll) {\n        this.__inScroll = true;\n        this._domNode.scrollTop = 0;\n        this._domNode.scrollLeft = 0;\n        delete this.__inScroll;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      TEXT SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /*\n     * Sets the text value of this element; it will delete children first, except\n     * for the first node which (if it is a Text node) will have it's value updated\n     *\n     * @param value {String} the text to set\n     */\n    setText(value) {\n      var self = this;\n      var children = this._children ? qx.lang.Array.clone(this._children) : [];\n      if (children[0] instanceof qx.html.Text) {\n        children[0].setText(value);\n        children.shift();\n        children.forEach(function (child) {\n          self.remove(child);\n        });\n      } else {\n        children.forEach(function (child) {\n          self.remove(child);\n        });\n        this.add(new qx.html.Text(value));\n      }\n    },\n\n    /**\n     * Returns the text value, accumulated from all child nodes\n     *\n     * @return {String} the text value\n     */\n    getText() {\n      var result = [];\n      if (this._children) {\n        this._children.forEach(function (child) {\n          result.push(child.getText());\n        });\n      }\n      return result.join(\"\");\n    },\n\n    /**\n     * Get the selection of the element.\n     *\n     * If the underlaying DOM element is not yet created, this methods returns\n     * a null value.\n     *\n     * @return {String|null}\n     */\n    getTextSelection() {\n      var el = this._domNode;\n      if (el) {\n        return qx.bom.Selection.get(el);\n      }\n\n      return null;\n    },\n\n    /**\n     * Get the length of selection of the element.\n     *\n     * If the underlaying DOM element is not yet created, this methods returns\n     * a null value.\n     *\n     * @return {Integer|null}\n     */\n    getTextSelectionLength() {\n      var el = this._domNode;\n      if (el) {\n        return qx.bom.Selection.getLength(el);\n      }\n\n      return null;\n    },\n\n    /**\n     * Get the start of the selection of the element.\n     *\n     * If the underlaying DOM element is not yet created, this methods returns\n     * a null value.\n     *\n     * @return {Integer|null}\n     */\n    getTextSelectionStart() {\n      var el = this._domNode;\n      if (el) {\n        return qx.bom.Selection.getStart(el);\n      }\n\n      return null;\n    },\n\n    /**\n     * Get the end of the selection of the element.\n     *\n     * If the underlaying DOM element is not yet created, this methods returns\n     * a null value.\n     *\n     * @return {Integer|null}\n     */\n    getTextSelectionEnd() {\n      var el = this._domNode;\n      if (el) {\n        return qx.bom.Selection.getEnd(el);\n      }\n\n      return null;\n    },\n\n    /**\n     * Set the selection of the element with the given start and end value.\n     * If no end value is passed the selection will extend to the end.\n     *\n     * This method only works if the underlying DOM element is already created.\n     *\n     * @param start {Integer} start of the selection (zero based)\n     * @param end {Integer} end of the selection\n     */\n    setTextSelection(start, end) {\n      var el = this._domNode;\n      if (el) {\n        qx.bom.Selection.set(el, start, end);\n        return;\n      }\n\n      // if element not created, save the selection for flushing\n      qx.html.Element.__selection[this.toHashCode()] = {\n        element: this,\n        start: start,\n        end: end\n      };\n\n      qx.html.Element._scheduleFlush(\"element\");\n    },\n\n    /**\n     * Clears the selection of the element.\n     *\n     * This method only works if the underlying DOM element is already created.\n     *\n     */\n    clearTextSelection() {\n      var el = this._domNode;\n      if (el) {\n        qx.bom.Selection.clear(el);\n      }\n      delete qx.html.Element.__selection[this.toHashCode()];\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FOCUS/ACTIVATE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Takes the action to process as argument and queues this action if the\n     * underlying DOM element is not yet created.\n     *\n     * Note that \"actions\" are functions in `qx.bom.Element` and only apply to\n     * environments with a user interface.  This will throw an error if the user\n     * interface is headless\n     *\n     * @param action {String} action to queue\n     * @param args {Array} optional list of arguments for the action\n     */\n    __performAction(action, args) {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        var actions = qx.html.Element._actions;\n\n        actions.push({\n          type: action,\n          element: this,\n          args: args || []\n        });\n\n        qx.html.Element._scheduleFlush(\"element\");\n      } else {\n        throw new Error(\n          \"Unexpected use of qx.html.Element.__performAction in headles environment\"\n        );\n      }\n    },\n\n    /**\n     * Focus this element.\n     *\n     * If the underlaying DOM element is not yet created, the\n     * focus is queued for processing after the element creation.\n     *\n     * Silently does nothing when in a headless environment\n     */\n    focus() {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        this.__performAction(\"focus\");\n      }\n    },\n\n    /**\n     * Mark this element to get blurred on the next flush of the queue\n     *\n     * Silently does nothing when in a headless environment\n     *\n     */\n    blur() {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        this.__performAction(\"blur\");\n      }\n    },\n\n    /**\n     * Mark this element to get activated on the next flush of the queue\n     *\n     * Silently does nothing when in a headless environment\n     *\n     */\n    activate() {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        this.__performAction(\"activate\");\n      }\n    },\n\n    /**\n     * Mark this element to get deactivated on the next flush of the queue\n     *\n     * Silently does nothing when in a headless environment\n     *\n     */\n    deactivate() {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        this.__performAction(\"deactivate\");\n      }\n    },\n\n    /**\n     * Captures all mouse events to this element\n     *\n     * Silently does nothing when in a headless environment\n     *\n     * @param containerCapture {Boolean?true} If true all events originating in\n     *   the container are captured. If false events originating in the container\n     *   are not captured.\n     */\n    capture(containerCapture) {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        this.__performAction(\"capture\", [containerCapture !== false]);\n      }\n    },\n\n    /**\n     * Releases this element from a previous {@link #capture} call\n     *\n     * Silently does nothing when in a headless environment\n     */\n    releaseCapture() {\n      if (!qx.core.Environment.get(\"qx.headless\")) {\n        this.__performAction(\"releaseCapture\");\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STYLE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Set up the given style attribute\n     *\n     * @param key {String} the name of the style attribute\n     * @param value {var} the value\n     * @param direct {Boolean?false} Whether the value should be applied\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    setStyle(key, value, direct) {\n      if (!this.__styleValues) {\n        this.__styleValues = {};\n      }\n\n      if (this.__styleValues[key] == value) {\n        return this;\n      }\n\n      this._applyStyle(key, value, this.__styleValues[key]);\n      if (value == null) {\n        delete this.__styleValues[key];\n      } else {\n        this.__styleValues[key] = value;\n      }\n\n      // Uncreated elements simply copy all data\n      // on creation. We don't need to remember any\n      // jobs. It is a simple full list copy.\n      if (this._domNode) {\n        // Omit queuing in direct mode\n        if (direct) {\n          qx.bom.element.Style.set(this._domNode, key, value);\n          return this;\n        }\n\n        // Dynamically create if needed\n        if (!this.__styleJobs) {\n          this.__styleJobs = {};\n        }\n\n        // Store job info\n        this.__styleJobs[key] = true;\n\n        // Register modification\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      return this;\n    },\n\n    /**\n     * Called by setStyle when a value of a style changes; this is intended to be\n     * overridden to allow the element to update properties etc according to the\n     * style\n     *\n     * @param key {String} the style value\n     * @param value {String?} the value to set\n     * @param oldValue {String?} The previous value (not from DOM)\n     */\n    _applyStyle(key, value, oldValue) {\n      // Nothing\n    },\n\n    /**\n     * Convenience method to modify a set of styles at once.\n     *\n     * @param map {Map} a map where the key is the name of the property\n     *    and the value is the value to use.\n     * @param direct {Boolean?false} Whether the values should be applied\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    setStyles(map, direct) {\n      // inline calls to \"set\" because this method is very\n      // performance critical!\n\n      var Style = qx.bom.element.Style;\n\n      if (!this.__styleValues) {\n        this.__styleValues = {};\n      }\n\n      if (this._domNode) {\n        // Dynamically create if needed\n        if (!this.__styleJobs) {\n          this.__styleJobs = {};\n        }\n\n        for (var key in map) {\n          var value = map[key];\n          if (this.__styleValues[key] == value) {\n            continue;\n          }\n\n          this._applyStyle(key, value, this.__styleValues[key]);\n          if (value == null) {\n            delete this.__styleValues[key];\n          } else {\n            this.__styleValues[key] = value;\n          }\n\n          // Omit queuing in direct mode\n          if (direct) {\n            Style.set(this._domNode, key, value);\n            continue;\n          }\n\n          // Store job info\n          this.__styleJobs[key] = true;\n        }\n\n        // Register modification\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      } else {\n        for (var key in map) {\n          var value = map[key];\n          if (this.__styleValues[key] == value) {\n            continue;\n          }\n\n          this._applyStyle(key, value, this.__styleValues[key]);\n          if (value == null) {\n            delete this.__styleValues[key];\n          } else {\n            this.__styleValues[key] = value;\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes the given style attribute\n     *\n     * @param key {String} the name of the style attribute\n     * @param direct {Boolean?false} Whether the value should be removed\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeStyle(key, direct) {\n      this.setStyle(key, null, direct);\n      return this;\n    },\n\n    /**\n     * Get the value of the given style attribute.\n     *\n     * @param key {String} name of the style attribute\n     * @return {var} the value of the style attribute\n     */\n    getStyle(key) {\n      return this.__styleValues ? this.__styleValues[key] : null;\n    },\n\n    /**\n     * Returns a map of all styles. Do not modify the result map!\n     *\n     * @return {Map} All styles or <code>null</code> when none are configured.\n     */\n    getAllStyles() {\n      return this.__styleValues || null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CSS CLASS SUPPORT\n    ---------------------------------------------------------------------------\n    */\n    __breakClasses() {\n      var map = {};\n      (this.getAttribute(\"class\") || \"\").split(\" \").forEach(function (name) {\n        if (name) {\n          map[name.toLowerCase()] = name;\n        }\n      });\n      return map;\n    },\n\n    __combineClasses(map) {\n      var primaryClass = this.getCssClass();\n      var arr = [];\n      if (primaryClass) {\n        arr.push(primaryClass);\n        delete map[primaryClass.toLowerCase()];\n      }\n      qx.lang.Array.append(arr, Object.values(map));\n      return arr.length ? arr.join(\" \") : null;\n    },\n\n    /**\n     * Adds a css class to the element.\n     *\n     * @param name {String} Name of the CSS class.\n     * @return {Element} this, for chaining\n     */\n    addClass(name) {\n      var classes = this.__breakClasses();\n      var primaryClass = (this.getCssClass() || \"\").toLowerCase();\n      name.split(\" \").forEach(name => {\n        var nameLower = name.toLowerCase();\n        if (nameLower == primaryClass) {\n          this.setCssClass(null);\n        }\n\n        classes[nameLower] = name;\n      });\n      this.setAttribute(\"class\", this.__combineClasses(classes));\n      return this;\n    },\n\n    /**\n     * Removes a CSS class from the current element.\n     *\n     * @param name {String} Name of the CSS class.\n     * @return {Element} this, for chaining\n     */\n    removeClass(name) {\n      var classes = this.__breakClasses();\n      var primaryClass = (this.getCssClass() || \"\").toLowerCase();\n      name.split(\" \").forEach(name => {\n        var nameLower = name.toLowerCase();\n        if (nameLower == primaryClass) {\n          this.setCssClass(null);\n        }\n\n        delete classes[nameLower];\n      });\n\n      this.setAttribute(\"class\", this.__combineClasses(classes));\n      return this;\n    },\n\n    /**\n     * Removes all CSS classed from the current element.\n     */\n    removeAllClasses() {\n      this.setCssClass(null);\n      this.setAttribute(\"class\", \"\");\n    },\n\n    /**\n     * Apply method for cssClass\n     */\n    _applyCssClass(value, oldValue) {\n      var classes = this.__breakClasses();\n      if (oldValue) {\n        oldValue.split(\" \").forEach(name => delete classes[name.toLowerCase()]);\n      }\n      if (value) {\n        value.split(\" \").forEach(name => (classes[name.toLowerCase()] = name));\n      }\n      this.setAttribute(\"class\", this.__combineClasses(classes));\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SIZE AND POSITION SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the size and position of this element; this is just a helper method that wraps\n     * the calls to qx.bom.*\n     *\n     * Supported modes:\n     *\n     * * <code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)\n     * * <code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)\n     * * <code>border</code>: Calculate the border box (useful to align to border edges of two elements).\n     * * <code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).\n     * * <code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).\n     *\n     * @param mode {String} the type of size required, see above\n     * @return {Object} a map, containing:\n     *  left, right, top, bottom - document co-ords\n     *  content - Object, containing:\n     *    width, height: maximum permissible content size\n     */\n    getDimensions(mode) {\n      if (!this._domNode) {\n        return {\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          width: 0,\n          height: 0,\n          content: {\n            width: 0,\n            height: 0\n          }\n        };\n      }\n      var loc = qx.bom.element.Location.get(this._domNode, mode);\n      loc.content = qx.bom.element.Dimension.getContentSize(this._domNode);\n      loc.width = loc.right - loc.left;\n      loc.height = loc.bottom - loc.top;\n      return loc;\n    },\n\n    /**\n     * Detects whether the DOM Node is visible\n     */\n    canBeSeen() {\n      if (this._domNode && this.isVisible()) {\n        var rect = this._domNode.getBoundingClientRect();\n        if (\n          rect.top > 0 ||\n          rect.left > 0 ||\n          rect.width > 0 ||\n          rect.height > 0\n        ) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      ATTRIBUTE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Set up the given attribute\n     *\n     * @param key {String} the name of the attribute\n     * @param value {var} the value\n     * @param direct {Boolean?false} Whether the value should be applied\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    setAttribute(key, value, direct) {\n      if (!this.__attribValues) {\n        this.__attribValues = {};\n      }\n\n      if (this.__attribValues[key] == value) {\n        return this;\n      }\n\n      if (value == null) {\n        delete this.__attribValues[key];\n      } else {\n        this.__attribValues[key] = value;\n      }\n\n      if (key == \"data-qx-object-id\") {\n        this.setQxObjectId(value);\n      }\n\n      // Uncreated elements simply copy all data\n      // on creation. We don't need to remember any\n      // jobs. It is a simple full list copy.\n      if (this._domNode) {\n        // Omit queuing in direct mode\n        if (direct) {\n          qx.bom.element.Attribute.set(this._domNode, key, value);\n          return this;\n        }\n\n        // Dynamically create if needed\n        if (!this.__attribJobs) {\n          this.__attribJobs = {};\n        }\n\n        // Store job info\n        this.__attribJobs[key] = true;\n\n        // Register modification\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      return this;\n    },\n\n    /**\n     * Convenience method to modify a set of attributes at once.\n     *\n     * @param map {Map} a map where the key is the name of the property\n     *    and the value is the value to use.\n     * @param direct {Boolean?false} Whether the values should be applied\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    setAttributes(map, direct) {\n      for (var key in map) {\n        this.setAttribute(key, map[key], direct);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes the given attribute\n     *\n     * @param key {String} the name of the attribute\n     * @param direct {Boolean?false} Whether the value should be removed\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeAttribute(key, direct) {\n      return this.setAttribute(key, null, direct);\n    },\n\n    /**\n     * Get the value of the given attribute.\n     *\n     * @param key {String} name of the attribute\n     * @return {var} the value of the attribute\n     */\n    getAttribute(key) {\n      return this.__attribValues ? this.__attribValues[key] : null;\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DEFER\n   *****************************************************************************\n   */\n\n  defer(statics) {\n    statics.__deferredCall = new qx.util.DeferredCall(statics.flush, statics);\n    statics.__SELF_CLOSING_TAGS = {};\n    [\n      \"area\",\n      \"base\",\n      \"br\",\n      \"col\",\n      \"embed\",\n      \"hr\",\n      \"img\",\n      \"input\",\n      \"link\",\n      \"meta\",\n      \"param\",\n      \"source\",\n      \"track\",\n      \"wbr\"\n    ].forEach(function (tagName) {\n      statics.__SELF_CLOSING_TAGS[tagName] = true;\n    });\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct() {\n    var hash = this.toHashCode();\n    if (hash) {\n      delete qx.html.Element._modified[hash];\n      delete qx.html.Element._scroll[hash];\n    }\n    this.setRoot(false);\n\n    this.__attribValues =\n      this.__styleValues =\n      this.__attribJobs =\n      this.__styleJobs =\n      this.__lazyScrollIntoViewX =\n      this.__lazyScrollIntoViewY =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}