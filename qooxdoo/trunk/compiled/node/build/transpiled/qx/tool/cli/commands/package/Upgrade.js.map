{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "semver",
    "require",
    "Class",
    "define",
    "extend",
    "tool",
    "cli",
    "commands",
    "Package",
    "statics",
    "getYargsCommand",
    "command",
    "describe",
    "builder",
    "quiet",
    "alias",
    "verbose",
    "default",
    "reinstall",
    "prereleases",
    "check",
    "argv",
    "valid",
    "qxVersion",
    "members",
    "process",
    "getAppQxVersion",
    "package",
    "Update",
    "List",
    "compiler",
    "Console",
    "info",
    "data",
    "getLockfileData",
    "found",
    "installer",
    "Install",
    "library",
    "libraries",
    "repo_name",
    "repo_tag",
    "uri",
    "library_uri",
    "releasesOnly",
    "lang",
    "Type",
    "isString",
    "startsWith",
    "library_name",
    "dryRun",
    "install",
    "utils",
    "Utils",
    "UserError",
    "Upgrade"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/package/Upgrade.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n   2017-2021 Christian Boulanger\n\n   License:\n   MIT: https://opensource.org/licenses/MIT\n   See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n   * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\n\nconst semver = require(\"semver\");\n\n/**\n * Lists compatible library packages\n */\nqx.Class.define(\"qx.tool.cli.commands.package.Upgrade\", {\n  extend: qx.tool.cli.commands.Package,\n  statics: {\n    getYargsCommand() {\n      return {\n        command: \"upgrade [library_uri]\",\n        describe:\n          \"if no library URI is given, upgrades all available libraries to the latest compatible version, otherwise upgrade only the package identified by the URI.\",\n        builder: {\n          quiet: {\n            alias: \"q\",\n            describe: \"No output\"\n          },\n\n          verbose: {\n            alias: \"v\",\n            describe: \"Verbose logging\"\n          },\n\n          \"releases-only\": {\n            alias: \"r\",\n            describe:\n              \"Upgrade regular releases only (this leaves versions based on branches, commits etc. untouched)\",\n            default: true\n          },\n\n          reinstall: {\n            alias: \"R\",\n            describe: \"Do not upgrade, reinstall current version\"\n          },\n\n          prereleases: {\n            alias: \"p\",\n            describe: \"Use prereleases if available\"\n          },\n\n          \"dry-run\": {\n            alias: \"d\",\n            describe: \"Show result only, do not actually upgrade\"\n          },\n\n          \"qx-version\": {\n            check: argv => semver.valid(argv.qxVersion),\n            describe:\n              \"A semver string. If given, the qooxdoo version for which to upgrade the package\"\n          }\n        }\n      };\n    }\n  },\n\n  members: {\n    /**\n     * Process the command\n     * @return {Promise<void>}\n     */\n    async process() {\n      await super.process();\n      let qxVersion = await this.getAppQxVersion();\n      await new qx.tool.cli.commands.package.Update({\n        quiet: true,\n        prereleases: this.argv.prereleases\n      }).process();\n      await new qx.tool.cli.commands.package.List({\n        quiet: true,\n        prereleases: this.argv.prereleases,\n        qxVersion\n      }).process();\n      if (!this.argv.quiet) {\n        qx.tool.compiler.Console.info(\n          `Upgrading project dependencies to the latest available release for qooxdoo version ${qxVersion}:`\n        );\n      }\n      let data = await this.getLockfileData();\n      let found = false;\n      const installer = new qx.tool.cli.commands.package.Install({\n        quiet: this.argv.quiet,\n        verbose: this.argv.verbose,\n        qxVersion\n      });\n\n      for (const library of data.libraries) {\n        // do not upggrade libraries that are not from a repository\n        if (!library.repo_name || !library.repo_tag) {\n          continue;\n        }\n        if (!library.uri) {\n          library.uri = library.repo_name;\n        }\n        // if a library to upgrade has been provided, skip non-matching ones\n        if (this.argv.library_uri && library.uri !== this.argv.library_uri) {\n          continue;\n        }\n        found = true;\n        if (\n          this.argv.releasesOnly &&\n          (!qx.lang.Type.isString(library.repo_tag) ||\n            !library.repo_tag.startsWith(\"v\"))\n        ) {\n          if (!this.argv.quiet) {\n            qx.tool.compiler.Console.info(\n              `Skipping ${library.library_name} (${library.uri}@${library.repo_tag}) since it is not a release.`\n            );\n          }\n          continue;\n        }\n        if (this.argv.dryRun) {\n          qx.tool.compiler.Console.info(\n            `Dry run. Not upgrading ${library.library_name} (${library.uri}@${library.repo_tag}).`\n          );\n\n          continue;\n        }\n        if (library.repo_tag && this.argv.reinstall) {\n          await installer.install(library.uri, library.repo_tag);\n        } else {\n          await installer.install(library.uri);\n        }\n      }\n      if (!found) {\n        if (this.argv.library_uri) {\n          throw new qx.tool.utils.Utils.UserError(\n            `Library '${this.argv.library_uri}' is not installed.`\n          );\n        } else {\n          qx.tool.compiler.Console.info(\"No packages to upgrade.\");\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}