{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "path",
    "require",
    "log",
    "tool",
    "utils",
    "LogManager",
    "createLog",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "analyser",
    "__analyser",
    "__dbFilename",
    "getResDbFilename",
    "__loaders",
    "compiler",
    "resources",
    "ImageLoader",
    "MetaLoader",
    "__converters",
    "ScssConverter",
    "ScssIncludeConverter",
    "members",
    "__db",
    "__librariesByResourceUri",
    "__allResourceUris",
    "loadDatabase",
    "Json",
    "loadJsonAsync",
    "saveDatabase",
    "debug",
    "saveJsonAsync",
    "getDatabase",
    "findLibraryForResource",
    "uri",
    "result",
    "findLibrariesForResource",
    "length",
    "Console",
    "error",
    "map",
    "l",
    "getNamespace",
    "join",
    "findLibrariesForResourceImpl",
    "ns",
    "pos",
    "isAbsolute",
    "library",
    "getLibraries",
    "find",
    "lib",
    "startsWith",
    "resolve",
    "getRootDir",
    "indexOf",
    "substring",
    "findLibrary",
    "pos1",
    "pos2",
    "Math",
    "min",
    "isFolderMatch",
    "keys",
    "sort",
    "thisUriPos",
    "Values",
    "binaryStartsWith",
    "libraries",
    "thisUri",
    "values",
    "lang",
    "Type",
    "isArray",
    "findAllResources",
    "t",
    "db",
    "__assets",
    "Promise",
    "all",
    "unconfirmed",
    "relFile",
    "scanResources",
    "resourcePath",
    "rootDir",
    "get",
    "files",
    "Utils",
    "findAllFiles",
    "filename",
    "replace",
    "fileInfo",
    "mtime",
    "safeStat",
    "asset",
    "Asset",
    "__addAsset",
    "stat",
    "Promisify",
    "poolEachOf",
    "load",
    "getFileInfo",
    "meta",
    "altPath",
    "getLibrary",
    "otherAsset",
    "addMetaReferee",
    "addMetaReferTo",
    "warn",
    "dependsOn",
    "forEach",
    "str",
    "push",
    "setDependsOn",
    "toUri",
    "getFilename",
    "tmp",
    "split",
    "seg",
    "index",
    "current",
    "Array",
    "contains",
    "setLoaders",
    "filter",
    "loader",
    "matches",
    "setConverters",
    "converter",
    "getAsset",
    "srcPath",
    "create",
    "isThemeFile",
    "resourceDir",
    "getThemePath",
    "getResourcePath",
    "relative",
    "getAssetsForPaths",
    "srcPaths",
    "metas",
    "libraryName",
    "libraryData",
    "assets",
    "assetPaths",
    "resourceNames",
    "resourceName",
    "undefined",
    "doNotCopy",
    "getMetaReferees",
    "resMetaData",
    "composite",
    "x",
    "y",
    "Manager"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/compiler/resources/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2017 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\n\n/* eslint-disable @qooxdoo/qx/no-illegal-private-usage */\n\nvar path = require(\"upath\");\n\nvar log = qx.tool.utils.LogManager.createLog(\"resource-manager\");\n\n/**\n * Analyses library resources, collecting information into a cached database\n * file\n */\nqx.Class.define(\"qx.tool.compiler.resources.Manager\", {\n  extend: qx.core.Object,\n\n  /**\n   * Constructor\n   *\n   * @param analyser {qx.tool.compiler.Analyser}\n   */\n  construct(analyser) {\n    super();\n    this.__analyser = analyser;\n    this.__dbFilename = analyser.getResDbFilename() || \"resource-db.json\";\n    this.__loaders = [\n      new qx.tool.compiler.resources.ImageLoader(),\n      new qx.tool.compiler.resources.MetaLoader()\n    ];\n\n    this.__converters = [\n      new qx.tool.compiler.resources.ScssConverter(),\n      new qx.tool.compiler.resources.ScssIncludeConverter()\n    ];\n  },\n\n  members: {\n    /** {String} filename of database */\n    __dbFilename: null,\n\n    /** {Object} Database */\n    __db: null,\n\n    /** the used analyser */\n    __analyser: null,\n\n    /** {Map{String,Library}} Lookup of libraries, indexed by resource URI */\n    __librariesByResourceUri: null,\n\n    /** {String[]} Array of all resource URIs, sorted alphabetically (ie these are the keys in __librariesByResourceUri) */\n    __allResourceUris: null,\n\n    /** {ResourceLoader[]} list of resource loaders, used to add info to the database */\n    __loaders: null,\n\n    /** {ResourceConverter[]} list of resource converters, used to copy resources to the target */\n    __converters: null,\n\n    /**\n     * Loads the cached database\n     */\n    async loadDatabase() {\n      this.__db =\n        (await qx.tool.utils.Json.loadJsonAsync(this.__dbFilename)) || {};\n    },\n\n    /**\n     * Saves the database\n     */\n    async saveDatabase() {\n      log.debug(\"saving resource manager database\");\n      return qx.tool.utils.Json.saveJsonAsync(this.__dbFilename, this.__db);\n    },\n\n    /**\n     * Returns the loaded database\n     *\n     * @returns\n     */\n    getDatabase() {\n      return this.__db;\n    },\n\n    /**\n     * Finds the library needed for a resource, see `findLibrariesForResource`.  This reports\n     * an error if more than one library is found.\n     *\n     * @param uri {String} URI\n     * @return {Library[]} the libraries, empty list if not found\n     */\n    findLibraryForResource(uri) {\n      let result = this.findLibrariesForResource(uri);\n      if (result.length == 0) {\n        return null;\n      }\n      if (result.length > 1) {\n        qx.tool.compiler.Console.error(\n          `Cannot determine a single library for the URI '${uri}'; ` +\n            `found ${result\n              .map(l => l.getNamespace())\n              .join(\",\")} returning first library`\n        );\n      }\n      return result[0];\n    },\n\n    /**\n     * Finds the libraries needed for a resource; this depends on `findAllResources` having\n     * already been called.  `uri` can include optional explicit namespace (eg \"qx:blah/blah.png\"),\n     * otherwise the library resource lookups are examined to find the library.\n     *\n     * Note that there can be more than one directory because the lookup holds directory names (used\n     * for wildcards) and they are allowed to be duplicated.\n     *\n     * @param uri {String} URI\n     * @return {Library[]} the libraries, empty list if not found\n     */\n    findLibrariesForResource(uri) {\n      const findLibrariesForResourceImpl = () => {\n        var ns;\n        var pos;\n\n        // check for absolute path first, in windows c:/ is a valid absolute name\n        if (path.isAbsolute(uri)) {\n          let library = this.__analyser\n            .getLibraries()\n            .find(lib => uri.startsWith(path.resolve(lib.getRootDir())));\n          return library || null;\n        }\n\n        // Explicit library?\n        pos = uri.indexOf(\":\");\n        if (pos !== -1) {\n          ns = uri.substring(0, pos);\n          let library = this.__analyser.findLibrary(ns);\n          return library || null;\n        }\n\n        // Non-wildcards are a direct lookup\n        // check for $ and *. less pos wins\n        // fix for https://github.com/qooxdoo/qooxdoo/issues/260\n        var pos1 = uri.indexOf(\"$\"); // Variable references are effectively a wildcard lookup\n        var pos2 = uri.indexOf(\"*\");\n        if (pos1 === -1) {\n          pos = pos2;\n        } else if (pos2 === -1) {\n          pos = pos1;\n        } else {\n          pos = Math.min(pos1, pos2);\n        }\n        if (pos === -1) {\n          let library = this.__librariesByResourceUri[uri] || null;\n          return library;\n        }\n\n        // Strip wildcard\n        var isFolderMatch = uri[pos - 1] === \"/\";\n        uri = uri.substring(0, pos - 1);\n\n        // Fast folder match\n        if (isFolderMatch) {\n          let library = this.__librariesByResourceUri[uri] || null;\n          return library;\n        }\n\n        // Slow scan\n        if (!this.__allResourceUris) {\n          this.__allResourceUris = Object.keys(\n            this.__librariesByResourceUri\n          ).sort();\n        }\n        var thisUriPos = qx.tool.utils.Values.binaryStartsWith(\n          this.__allResourceUris,\n          uri\n        );\n\n        if (thisUriPos > -1) {\n          let libraries = {};\n          for (; thisUriPos < this.__allResourceUris.length; thisUriPos++) {\n            var thisUri = this.__allResourceUris[thisUriPos];\n            if (!thisUri.startsWith(uri)) {\n              break;\n            }\n\n            pos = uri.indexOf(\":\");\n            if (pos !== -1) {\n              ns = uri.substring(0, pos);\n              if (!libraries[ns]) {\n                libraries[ns] = this.__analyser.findLibrary(ns);\n              }\n            }\n          }\n\n          return Object.values(libraries);\n        }\n\n        return null;\n      };\n\n      let result = findLibrariesForResourceImpl();\n      if (!result) {\n        return [];\n      }\n      if (!qx.lang.Type.isArray(result)) {\n        return [result];\n      }\n      return result;\n    },\n\n    /**\n     * Scans all libraries looking for resources; this does not analyse the\n     * files, simply compiles the list\n     */\n    async findAllResources() {\n      var t = this;\n      var db = this.__db;\n      if (!db.resources) {\n        db.resources = {};\n      }\n      t.__librariesByResourceUri = {};\n      this.__allResourceUris = null;\n      this.__assets = {};\n\n      await qx.Promise.all(\n        t.__analyser.getLibraries().map(async library => {\n          var resources = db.resources[library.getNamespace()];\n          if (!resources) {\n            db.resources[library.getNamespace()] = resources = {};\n          }\n          var unconfirmed = {};\n          for (let relFile in resources) {\n            unconfirmed[relFile] = true;\n          }\n\n          const scanResources = async resourcePath => {\n            // If the root folder exists, scan it\n            var rootDir = path.join(\n              library.getRootDir(),\n              library.get(resourcePath)\n            );\n\n            await qx.tool.utils.files.Utils.findAllFiles(\n              rootDir,\n              async filename => {\n                var relFile = filename\n                  .substring(rootDir.length + 1)\n                  .replace(/\\\\/g, \"/\");\n                var fileInfo = resources[relFile];\n                delete unconfirmed[relFile];\n                if (!fileInfo) {\n                  fileInfo = resources[relFile] = {};\n                }\n                fileInfo.resourcePath = resourcePath;\n                fileInfo.mtime = await qx.tool.utils.files.Utils.safeStat(\n                  filename\n                ).mtime;\n\n                let asset = new qx.tool.compiler.resources.Asset(\n                  library,\n                  relFile,\n                  fileInfo\n                );\n\n                this.__addAsset(asset);\n              }\n            );\n          };\n\n          await scanResources(\"resourcePath\");\n          await scanResources(\"themePath\");\n\n          // Check the unconfirmed resources to make sure that they still exist;\n          //  delete from the database if they don't\n          await qx.Promise.all(\n            Object.keys(unconfirmed).map(async filename => {\n              let fileInfo = resources[filename];\n              if (!fileInfo) {\n                delete resources[filename];\n              } else {\n                let stat = await qx.tool.utils.files.Utils.safeStat(filename);\n                if (!stat) {\n                  delete resources[filename];\n                }\n              }\n            })\n          );\n        })\n      );\n\n      await qx.tool.utils.Promisify.poolEachOf(\n        Object.values(this.__assets),\n        10,\n        async asset => {\n          await asset.load();\n          let fileInfo = asset.getFileInfo();\n          if (fileInfo.meta) {\n            for (var altPath in fileInfo.meta) {\n              let lib = this.findLibraryForResource(altPath);\n              if (!lib) {\n                lib = asset.getLibrary();\n              }\n              let otherAsset =\n                this.__assets[lib.getNamespace() + \":\" + altPath];\n              if (otherAsset) {\n                otherAsset.addMetaReferee(asset);\n                asset.addMetaReferTo(otherAsset);\n              } else {\n                qx.tool.compiler.Console.warn(\n                  \"Cannot find asset \" + altPath + \" referenced in \" + asset\n                );\n              }\n            }\n          }\n          if (fileInfo.dependsOn) {\n            let dependsOn = [];\n            fileInfo.dependsOn.forEach(str => {\n              let otherAsset = this.__assets[str];\n              if (!otherAsset) {\n                qx.tool.compiler.Console.warn(\n                  \"Cannot find asset \" + str + \" depended on by \" + asset\n                );\n              } else {\n                dependsOn.push(otherAsset);\n              }\n            });\n            if (dependsOn.length) {\n              asset.setDependsOn(dependsOn);\n            }\n          }\n          return null;\n        }\n      );\n    },\n\n    /**\n     * Adds an asset\n     *\n     * @param asset {Asset} the asset to add\n     */\n    __addAsset(asset) {\n      this.__assets[asset.toUri()] = asset;\n\n      let library = asset.getLibrary();\n      let filename = asset.getFilename();\n      let tmp = \"\";\n      filename.split(\"/\").forEach((seg, index) => {\n        if (index) {\n          tmp += \"/\";\n        }\n        tmp += seg;\n        let current = this.__librariesByResourceUri[tmp];\n        if (current) {\n          if (qx.lang.Type.isArray(current)) {\n            if (!qx.lang.Array.contains(current, library)) {\n              current.push(library);\n            }\n          } else if (current !== library) {\n            current = this.__librariesByResourceUri[tmp] = [current, library];\n          }\n        } else {\n          this.__librariesByResourceUri[tmp] = library;\n        }\n      });\n\n      asset.setLoaders(\n        this.__loaders.filter(loader => loader.matches(filename, library))\n      );\n\n      asset.setConverters(\n        this.__converters.filter(converter =>\n          converter.matches(filename, library)\n        )\n      );\n    },\n\n    /**\n     * Gets an individual asset\n     *\n     * @param srcPath {String} the resource name, with or without a namespace prefix\n     * @param create {Boolean?} if true the asset will be created if it does not exist\n     * @param isThemeFile {Boolean?} if true the asset will be expected to be in the theme folder\n     * @return {Asset?} the asset, if found\n     */\n    getAsset(srcPath, create, isThemeFile) {\n      let library = this.findLibraryForResource(srcPath);\n      if (!library) {\n        qx.tool.compiler.Console.warn(\"Cannot find library for \" + srcPath);\n        return null;\n      }\n\n      let resourceDir = path.join(\n        library.getRootDir(),\n        isThemeFile ? library.getThemePath() : library.getResourcePath()\n      );\n\n      srcPath = path.relative(\n        resourceDir,\n        path.isAbsolute(srcPath) ? srcPath : path.join(resourceDir, srcPath)\n      );\n\n      let asset = this.__assets[library.getNamespace() + \":\" + srcPath];\n      if (!asset && create) {\n        asset = new qx.tool.compiler.resources.Asset(library, srcPath, {\n          resourcePath: \"resourcePath\"\n        });\n\n        this.__addAsset(asset);\n      }\n      return asset;\n    },\n\n    /**\n     * Collects information about the assets listed in srcPaths;\n     *\n     * @param srcPaths\n     * @return {Asset[]}\n     */\n    getAssetsForPaths(srcPaths) {\n      var db = this.__db;\n\n      // Generate a lookup that maps the resource name to the meta file that\n      //  contains the composite\n      var metas = {};\n      for (var libraryName in db.resources) {\n        var libraryData = db.resources[libraryName];\n        for (var resourcePath in libraryData) {\n          var fileInfo = libraryData[resourcePath];\n          if (!fileInfo.meta) {\n            continue;\n          }\n          for (var altPath in fileInfo.meta) {\n            metas[altPath] = resourcePath;\n          }\n        }\n      }\n\n      var assets = [];\n      var assetPaths = {};\n\n      srcPaths.forEach(srcPath => {\n        let pos = srcPath.indexOf(\":\");\n        let libraries = null;\n        if (pos > -1) {\n          let ns = srcPath.substring(0, pos);\n          let tmp = this.__analyser.findLibrary(ns);\n          libraries = tmp ? [tmp] : [];\n          srcPath = srcPath.substring(pos + 1);\n        } else {\n          libraries = this.findLibrariesForResource(srcPath);\n        }\n\n        if (libraries.length == 0) {\n          qx.tool.compiler.Console.warn(\"Cannot find library for \" + srcPath);\n          return;\n        }\n\n        libraries.forEach(library => {\n          let libraryData = db.resources[library.getNamespace()];\n          pos = srcPath.indexOf(\"*\");\n          let resourceNames = [];\n          if (pos > -1) {\n            srcPath = srcPath.substring(0, pos);\n            resourceNames = Object.keys(libraryData).filter(\n              resourceName =>\n                resourceName.substring(0, srcPath.length) === srcPath\n            );\n          } else if (libraryData[srcPath]) {\n            resourceNames = [srcPath];\n          }\n\n          resourceNames.forEach(resourceName => {\n            if (assetPaths[resourceName] !== undefined) {\n              return;\n            }\n            let asset =\n              this.__assets[library.getNamespace() + \":\" + resourceName];\n\n            let fileInfo = asset.getFileInfo();\n            if (fileInfo.doNotCopy === true) {\n              return;\n            }\n\n            (asset.getMetaReferees() || []).forEach(meta => {\n              // Extract the fragment from the meta data for this particular resource\n              var resMetaData = meta.getFileInfo().meta[resourceName];\n              fileInfo.composite = resMetaData[3];\n              fileInfo.x = resMetaData[4];\n              fileInfo.y = resMetaData[5];\n            });\n\n            assets.push(asset);\n            assetPaths[resourceName] = assets.length - 1;\n          });\n        });\n      });\n\n      return assets;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}