{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "path",
    "require",
    "fsp",
    "promises",
    "process",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "argv",
    "properties",
    "compilerApi",
    "check",
    "nullable",
    "members",
    "compileJs",
    "set",
    "configDb",
    "tool",
    "cli",
    "ConfigDb",
    "getInstance",
    "forEach",
    "kv",
    "m",
    "match",
    "key",
    "value",
    "setOverride",
    "utils",
    "Utils",
    "UserError",
    "processArgs",
    "getArgs",
    "checkMigrations",
    "appQxVersion",
    "getAppQxVersion",
    "e",
    "semaphore",
    "join",
    "cwd",
    "stat",
    "debug",
    "writeFile",
    "runner",
    "migration",
    "Runner",
    "dryRun",
    "pending",
    "applied",
    "runMigrations",
    "unlink",
    "compiler",
    "Console",
    "warn",
    "env",
    "IGNORE_MIGRATION_WARNING",
    "exit",
    "getQxPath",
    "config",
    "bind",
    "getCompilerVersion",
    "getQxVersion",
    "qxVersion",
    "message",
    "commands",
    "Command"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/Command.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017-2021 Zenesis Ltd\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n     * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\nconst path = require(\"path\");\nconst fsp = require(\"fs\").promises;\nconst process = require(\"process\");\n\n/**\n * Base class for commands\n */\nqx.Class.define(\"qx.tool.cli.commands.Command\", {\n  extend: qx.core.Object,\n\n  construct(argv) {\n    super();\n    this.argv = argv;\n  },\n\n  properties: {\n    /**\n     * A reference to the current compilerApi instance\n     * @var {qx.tool.cli.api.CompilerApi}\n     */\n    compilerApi: {\n      check: \"qx.tool.cli.api.CompilerApi\",\n      nullable: true\n    }\n  },\n\n  members: {\n    argv: null,\n    compileJs: null,\n\n    async process() {\n      let argv = this.argv;\n      if (argv.set) {\n        let configDb = await qx.tool.cli.ConfigDb.getInstance();\n        argv.set.forEach(function (kv) {\n          var m = kv.match(/^([^=\\s]+)(=(.+))?$/);\n          if (m) {\n            var key = m[1];\n            var value = m[3];\n            configDb.setOverride(key, value);\n          } else {\n            throw new qx.tool.utils.Utils.UserError(\n              `Failed to parse environment setting commandline option '--set ${kv}'`\n            );\n          }\n        });\n      }\n    },\n\n    /**\n     * This is to notify the commands after loading the full args.\n     * The commands can overload special arg arguments here.\n     * e.g. Deploy will will overload the target.\n     *\n     * @param {*} argv : args to process\n     *\n     */\n    processArgs(argv) {\n      // Nothing\n    },\n\n    /**\n     * Returns the parsed command line arguments\n     * @return {Object}\n     */\n    getArgs() {\n      return this.argv;\n    },\n\n    /**\n     * Check if the current application needs to be migrated\n     */\n    async checkMigrations() {\n      let appQxVersion;\n      try {\n        appQxVersion = await this.getAppQxVersion();\n      } catch (e) {\n        // if no application qx verson exists, do nothing\n        return;\n      }\n      const semaphore = path.join(process.cwd(), \".qxmigrationcheck\");\n      try {\n        await fsp.stat(semaphore);\n        this.debug(\n          `Not checking migration because check is already in progress.`\n        );\n      } catch (e) {\n        // run migration in dry-run mode\n        await fsp.writeFile(semaphore, \"\");\n        let runner = new qx.tool.migration.Runner().set({\n          dryRun: true\n        });\n\n        let { pending, applied } = await runner.runMigrations();\n        await fsp.unlink(semaphore);\n        if (pending) {\n          qx.tool.compiler.Console.warn(\n            `*** There are ${pending} pending migrations. \\n` +\n              `*** Please run '(npx) qx migrate --dry-run --verbose' for details, \\n` +\n              `*** and '(npx) qx migrate' to apply the changes.`\n          );\n\n          if (!process.env.IGNORE_MIGRATION_WARNING) {\n            process.exit(1);\n          }\n          return;\n        }\n        this.debug(\"No migrations necessary.\");\n      }\n    },\n\n    /**\n     * @see {@link qx.tool.config.Utils#getQxPath}\n     */\n    getQxPath: qx.tool.config.Utils.getQxPath.bind(qx.tool.config.Utils),\n\n    /**\n     *\n     * @returns @see {@link qx.tool.config.Utils#getCompilerVersion}\n     */\n    getCompilerVersion() {\n      return qx.tool.config.Utils.getCompilerVersion();\n    },\n\n    /**\n     * Returns the qooxdoo version, either from the `--qx-version` command line\n     * parameter (if supported by the command and supplied by the user) or from\n     * {@link qqx.tool.config.Utils#getQxVersion()}. Throws if no version can be\n     * determined.\n     *\n     * @throws {qx.tool.utils.Utils.UserError}\n     * @return {Promise<String>}\n     */\n    getQxVersion() {\n      try {\n        return this.argv.qxVersion || qx.tool.config.Utils.getQxVersion();\n      } catch (e) {\n        throw new qx.tool.utils.Utils.UserError(e.message);\n      }\n    },\n\n    /**\n     * Returns the qooxdoo version used in the application in the current\n     * directory via {@link qx.tool.config.Utils#getAppQxVersion}. Can be\n     * overridden by the `--qx-version` command line parameter (if supported by\n     * the command and supplied by the user). Throws if no version can be\n     * determined.\n     *\n     * @return {Promise<String>}\n     * @throws {qx.tool.utils.Utils.UserError}\n     */\n    getAppQxVersion() {\n      try {\n        return this.argv.qxVersion || qx.tool.config.Utils.getAppQxVersion();\n      } catch (e) {\n        throw new qx.tool.utils.Utils.UserError(e.message);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}