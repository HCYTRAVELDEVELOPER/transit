{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "fs",
    "tool",
    "utils",
    "Promisify",
    "Class",
    "define",
    "extend",
    "compiler",
    "targets",
    "meta",
    "AbstractJavascriptMeta",
    "construct",
    "appMeta",
    "filename",
    "originalSourceFile",
    "members",
    "compile",
    "writeSourceCodeToStream",
    "ws",
    "rs",
    "createReadStream",
    "getFilename",
    "Promise",
    "resolve",
    "reject",
    "on",
    "pipe",
    "end",
    "getSourceMap",
    "existsSync",
    "readFileAsync",
    "Javascript"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/compiler/targets/meta/Javascript.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo-compiler\n *\n *    Copyright:\n *      2011-2021 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * ************************************************************************/\n\nconst fs = qx.tool.utils.Promisify.fs;\n\n/**\n * An implementation of IJavascriptMeta for plain old javascript files\n */\nqx.Class.define(\"qx.tool.compiler.targets.meta.Javascript\", {\n  extend: qx.tool.compiler.targets.meta.AbstractJavascriptMeta,\n\n  /**\n   * Constructor\n   *\n   * @param appMeta {qx.tool.compiler.targets.meta.ApplicationMeta}\n   * @param filename {String} the sourcefile\n   * @param originalSourceFile {String?} the URI to give to the source map\n   */\n  construct(appMeta, filename, originalSourceFile) {\n    super(appMeta, filename, originalSourceFile);\n  },\n\n  members: {\n    /*\n     * @Override\n     */\n    compile() {\n      // Nothing\n    },\n\n    /*\n     * @Override\n     */\n    async writeSourceCodeToStream(ws) {\n      let rs = fs.createReadStream(this.getFilename(), \"utf8\");\n      await new Promise((resolve, reject) => {\n        rs.on(\"end\", resolve);\n        rs.on(\"error\", reject);\n        rs.pipe(ws, { end: false });\n      });\n    },\n\n    /*\n     * @Override\n     */\n    async getSourceMap() {\n      if (!fs.existsSync(this.getFilename() + \".map\")) {\n        return null;\n      }\n      return await fs.readFileAsync(this.getFilename() + \".map\", \"utf8\");\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEA,MAAMC,EAAE,GAAGJ,EAAE,CAACK,IAAH,CAAQC,KAAR,CAAcC,SAAd,CAAwBH,EAAnC;EAEA;AACA;AACA;;EACAJ,EAAE,CAACQ,KAAH,CAASC,MAAT,CAAgB,0CAAhB,EAA4D;IAC1DC,MAAM,EAAEV,EAAE,CAACK,IAAH,CAAQM,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BC,sBADoB;;IAG1D;AACF;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,CAACC,OAAD,EAAUC,QAAV,EAAoBC,kBAApB,EAAwC;MAC/C,4EAAMF,OAAN,EAAeC,QAAf,EAAyBC,kBAAzB;IACD,CAZyD;;IAc1DC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,OAAO,GAAG,CACR;MACD,CANM;;MAQP;AACJ;AACA;MACI,MAAMC,uBAAN,CAA8BC,EAA9B,EAAkC;QAChC,IAAIC,EAAE,GAAGnB,EAAE,CAACoB,gBAAH,CAAoB,KAAKC,WAAL,EAApB,EAAwC,MAAxC,CAAT;QACA,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;UACrCL,EAAE,CAACM,EAAH,CAAM,KAAN,EAAaF,OAAb;UACAJ,EAAE,CAACM,EAAH,CAAM,OAAN,EAAeD,MAAf;UACAL,EAAE,CAACO,IAAH,CAAQR,EAAR,EAAY;YAAES,GAAG,EAAE;UAAP,CAAZ;QACD,CAJK,CAAN;MAKD,CAlBM;;MAoBP;AACJ;AACA;MACI,MAAMC,YAAN,GAAqB;QACnB,IAAI,CAAC5B,EAAE,CAAC6B,UAAH,CAAc,KAAKR,WAAL,KAAqB,MAAnC,CAAL,EAAiD;UAC/C,OAAO,IAAP;QACD;;QACD,OAAO,MAAMrB,EAAE,CAAC8B,aAAH,CAAiB,KAAKT,WAAL,KAAqB,MAAtC,EAA8C,MAA9C,CAAb;MACD;;IA5BM;EAdiD,CAA5D;EA3BAzB,EAAE,CAACK,IAAH,CAAQM,QAAR,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BsB,UAA9B,CAAyChC,aAAzC,GAAyDA,aAAzD"
}