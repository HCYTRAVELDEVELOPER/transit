{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "labelPath",
    "__lookupTable",
    "__boundProperties",
    "__boundPropertiesReverse",
    "__onUpdate",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "allowNull",
    "nullValueTitle",
    "nullValueIcon",
    "members",
    "__changeModelListenerId",
    "__syncTargetSelection",
    "__syncModelSelection",
    "update",
    "__changeModelLength",
    "__renewBindings",
    "_updateSelection",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setFilter",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "Environment",
    "get",
    "assertFalse",
    "lang",
    "Type",
    "isObject",
    "assertTrue",
    "converter",
    "onUpdate",
    "onSetFail",
    "ignoreConverter",
    "_applyLabelOptions",
    "_applyIconPath",
    "_applyLabelPath",
    "_applyAllowNull",
    "oldValue",
    "__refreshModel",
    "_applyNullValueTitle",
    "_applyNullValueIcon",
    "getModel",
    "getTarget",
    "_applyModel",
    "undefined",
    "removeListenerById",
    "getSelection",
    "length",
    "splice",
    "dispose",
    "addListener",
    "__changeModel",
    "__buildUpLookupTable",
    "_changeTargetSelection",
    "ui",
    "queue",
    "Widget",
    "add",
    "getChildren",
    "i",
    "__removeItem",
    "_applyTarget",
    "_addChangeTargetListener",
    "removed",
    "removeAll",
    "destroy",
    "removeAllBindings",
    "__addItem",
    "__lookup",
    "__inChangeModel",
    "syncWidget",
    "newLength",
    "currentLength",
    "j",
    "__moveChangeListenerAtTheEnd",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "form",
    "ListItem",
    "configureItem",
    "index",
    "listItem",
    "_bindListItem",
    "_startSelectionModification",
    "children",
    "oldItem",
    "_removeBindingsFrom",
    "removeAt",
    "_endSelectionModification",
    "getVisibleModels",
    "visibleModels",
    "items",
    "push",
    "Array",
    "setLabel",
    "getNullValueTitle",
    "setIcon",
    "getNullValueIcon",
    "bindItem",
    "bindDefaultProperties",
    "bindProperty",
    "getLabelPath",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "sourcePath",
    "targetProperty",
    "options",
    "targetWidget",
    "clone",
    "Function",
    "bind",
    "_onBindingSet",
    "bindPath",
    "id",
    "setUserData",
    "includes",
    "bindPropertyReverse",
    "targetPath",
    "sourceWidget",
    "targetBindPath",
    "sourceObject",
    "targetObject",
    "_inSelectionModification",
    "getUserData",
    "removeBinding",
    "l",
    "filter",
    "__removeFilter",
    "oldTable",
    "tempItem",
    "listItems",
    "isAllowNull",
    "getLength",
    "getItem",
    "destruct",
    "remove",
    "List"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/data/controller/List.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * <h2>List Controller</h2>\n *\n * *General idea*\n * The list controller is responsible for synchronizing every list like widget\n * with a data array. It does not matter if the array contains atomic values\n * like strings of complete objects where one property holds the value for\n * the label and another property holds the icon url. You can even use converters\n * that make the label show a text corresponding to the icon, by binding both\n * label and icon to the same model property and converting one of them.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Label and icon are bindable\n * * Takes care of the selection\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n *\n * *Usage*\n *\n * As model, only {@link qx.data.Array}s do work. The currently supported\n * targets are\n *\n * * {@link qx.ui.form.SelectBox}\n * * {@link qx.ui.form.List}\n * * {@link qx.ui.form.ComboBox}\n *\n * All the properties like model, target or any property path is bindable.\n * Especially the model is nice to bind to another selection for example.\n * The controller itself can only work if it has a model and a target set. The\n * rest of the properties may be empty.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.List\", {\n  extend: qx.core.Object,\n  include: qx.data.controller.MSelection,\n  implement: qx.data.controller.ISelection,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.data.Array?null} The array containing the data.\n   *\n   * @param target {qx.ui.core.Widget?null} The widget which should show the\n   *   ListItems.\n   *\n   * @param labelPath {String?null} If the model contains objects, the labelPath\n   *   is the path reference to the property in these objects which should be\n   *   shown as label.\n   */\n  construct(model, target, labelPath) {\n    super();\n\n    // lookup table for filtering and sorting\n    this.__lookupTable = [];\n\n    // register for bound target properties and onUpdate methods\n    // from the binding options\n    this.__boundProperties = [];\n    this.__boundPropertiesReverse = [];\n    this.__onUpdate = {};\n\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** Data array containing the data which should be shown in the list. */\n    model: {\n      check: \"qx.data.IListData\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n    /** The target widget which should show the data. */\n    target: {\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as a label. This is only needed if objects are stored in the model.\n     */\n    labelPath: {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon. This is only needed if objects are stored in the model\n     * and if the icon should be shown.\n     */\n    iconPath: {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions: {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions: {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link IControllerDelegate} interface.\n     */\n    delegate: {\n      apply: \"_applyDelegate\",\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * Whether a special \"null\" value is included in the list\n     */\n    allowNull: {\n      apply: \"_applyAllowNull\",\n      event: \"changeAllowNull\",\n      init: false,\n      nullable: false,\n      check: \"Boolean\"\n    },\n\n    /**\n     * Title for the special null value entry\n     */\n    nullValueTitle: {\n      apply: \"_applyNullValueTitle\",\n      event: \"changeNullValueTitle\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n\n    /**\n     * Icon for the special null value entry\n     */\n    nullValueIcon: {\n      apply: \"_applyNullValueIcon\",\n      event: \"changeNullValueIcon\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // private members\n    __changeModelListenerId: null,\n    __lookupTable: null,\n    __onUpdate: null,\n    __boundProperties: null,\n    __boundPropertiesReverse: null,\n    __syncTargetSelection: null,\n    __syncModelSelection: null,\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Updates the filter and the target. This could be used if the filter\n     * uses an additional parameter which changes the filter result.\n     */\n    update() {\n      this.__changeModelLength();\n      this.__renewBindings();\n\n      this._updateSelection();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * If a new delegate is set, it applies the stored configuration for the\n     * list items to the already created list items once.\n     *\n     * @param value {qx.core.Object|null} The new delegate.\n     * @param old {qx.core.Object|null} The old delegate.\n     */\n    _applyDelegate(value, old) {\n      this._setConfigureItem(value, old);\n      this._setFilter(value, old);\n      this._setCreateItem(value, old);\n      this._setBindItem(value, old);\n    },\n\n    /**\n     * Apply-method which will be called if the icon options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new icon options.\n     * @param old {Map|null} The old icon options.\n     */\n    _applyIconOptions(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFalse(\n          value && !qx.lang.Type.isObject(value),\n          \"expecting an object\"\n        );\n\n        this.assertTrue(\n          !!value.converter ||\n            !!value.onUpdate ||\n            !!value.onSetFail ||\n            !!value.ignoreConverter\n        );\n      }\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called if the label options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new label options.\n     * @param old {Map|null} The old label options.\n     */\n    _applyLabelOptions(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFalse(\n          value && !qx.lang.Type.isObject(value),\n          \"expecting an object\"\n        );\n\n        this.assertTrue(\n          !!value.converter ||\n            !!value.onUpdate ||\n            !!value.onSetFail ||\n            !!value.ignoreConverter\n        );\n      }\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called if the icon path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new icon path.\n     * @param old {String|null} The old icon path.\n     */\n    _applyIconPath(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called if the label path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new label path.\n     * @param old {String|null} The old label path.\n     */\n    _applyLabelPath(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply method for the `allowNull` property\n     */\n    _applyAllowNull(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Apply method for the `allowNull` property\n     */\n    _applyNullValueTitle(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Apply method for the `allowNull` property\n     */\n    _applyNullValueIcon(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Refreshes the model, uses when the model and target are not changing but the appearance\n     * and bindings may need to be updated\n     */\n    __refreshModel() {\n      if (this.getModel() && this.getTarget()) {\n        this.update();\n      }\n    },\n\n    /**\n     * Apply-method which will be called if the model has been changed. It\n     * removes all the listeners from the old model and adds the needed\n     * listeners to the new model. It also invokes the initial filling of the\n     * target widgets if there is a target set.\n     *\n     * @param value {qx.data.Array|null} The new model array.\n     * @param old {qx.data.Array|null} The old model array.\n     */\n    _applyModel(value, old) {\n      // remove the old listener\n      if (old != undefined) {\n        if (this.__changeModelListenerId != undefined) {\n          old.removeListenerById(this.__changeModelListenerId);\n        }\n      }\n\n      // erase the selection if there is something selected\n      if (this.getSelection() != undefined && this.getSelection().length > 0) {\n        this.getSelection().splice(0, this.getSelection().length).dispose();\n      }\n\n      // if a model is set\n      if (value != null) {\n        // add a new listener\n        this.__changeModelListenerId = value.addListener(\n          \"change\",\n          this.__changeModel,\n          this\n        );\n\n        // renew the index lookup table\n        this.__buildUpLookupTable();\n        // check for the new length\n        this.__changeModelLength();\n\n        // as we only change the labels of the items, the selection change event\n        // may be missing so we invoke it here\n        if (old == null) {\n          this._changeTargetSelection();\n        } else {\n          // update the selection asynchronously\n          this.__syncTargetSelection = true;\n          qx.ui.core.queue.Widget.add(this);\n        }\n      } else {\n        var target = this.getTarget();\n        // if the model is set to null, we should remove all items in the target\n        if (target != null) {\n          // we need to remove the bindings too so use the controller method\n          // for removing items\n          var length = target.getChildren().length;\n          for (var i = 0; i < length; i++) {\n            this.__removeItem();\n          }\n        }\n      }\n    },\n\n    /**\n     * Apply-method which will be called if the target has been changed.\n     * When the target changes, every binding needs to be reset and the old\n     * target needs to be cleaned up. If there is a model, the target will be\n     * filled with the data of the model.\n     *\n     * @param value {qx.ui.core.Widget|null} The new target.\n     * @param old {qx.ui.core.Widget|null} The old target.\n     */\n    _applyTarget(value, old) {\n      // add a listener for the target change\n      this._addChangeTargetListener(value, old);\n\n      // if there was an old target\n      if (old != undefined) {\n        // remove all element of the old target\n        var removed = old.removeAll();\n        for (var i = 0; i < removed.length; i++) {\n          removed[i].destroy();\n        }\n        // remove all bindings\n        this.removeAllBindings();\n      }\n\n      if (value != null) {\n        if (this.getModel() != null) {\n          // add a binding for all elements in the model\n          for (var i = 0; i < this.__lookupTable.length; i++) {\n            this.__addItem(this.__lookup(i));\n          }\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the change event of the model. If the model changes,\n     * Only the selection needs to be changed. The change of the data will\n     * be done by the binding.\n     */\n    __inChangeModel: false,\n\n    /**\n     * Event handler for the changeModel of the model. Updates the controller.\n     */\n    __changeModel() {\n      if (this.__inChangeModel) {\n        return;\n      }\n\n      this.__inChangeModel = true;\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      // this.__syncTargetSelection = true;\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n\n      // update on filtered lists... (bindings need to be renewed)\n      this.update();\n      this.__inChangeModel = false;\n    },\n\n    /**\n     * Internal method used to sync the selection. The controller uses the\n     * widget queue to schedule the selection update. An asynchronous handling of\n     * the selection is needed because the bindings (event listeners for the\n     * binding) need to be executed before the selection is updated.\n     * @internal\n     */\n    syncWidget() {\n      if (this.__syncTargetSelection) {\n        this._changeTargetSelection();\n      }\n      if (this.__syncModelSelection) {\n        this._updateSelection();\n      }\n      this.__syncModelSelection = this.__syncTargetSelection = null;\n    },\n\n    /**\n     * Event handler for the changeLength of the model. If the length changes\n     * of the model, either ListItems need to be removed or added to the target.\n     */\n    __changeModelLength() {\n      // only do something if there is a target\n      if (this.getTarget() == null) {\n        return;\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // get the length\n      var newLength = this.__lookupTable.length;\n      var currentLength = this.getTarget().getChildren().length;\n\n      // if there are more item\n      if (newLength > currentLength) {\n        // add the new elements\n        for (var j = currentLength; j < newLength; j++) {\n          this.__addItem(this.__lookup(j));\n        }\n        // if there are less elements\n      } else if (newLength < currentLength) {\n        // remove the unnecessary items\n        for (var j = currentLength; j > newLength; j--) {\n          this.__removeItem();\n        }\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // sync the target selection in case someone deleted a item in\n      // selection mode \"one\" [BUG #4839]\n      this.__syncTargetSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /**\n     * Helper method which removes and adds the change listener of the\n     * controller to the model. This is sometimes necessary to ensure that the\n     * listener of the controller is executed as the last listener of the chain.\n     */\n    __moveChangeListenerAtTheEnd() {\n      var model = this.getModel();\n      // it can be that the bindings has been reset without the model so\n      // maybe there is no model in some scenarios\n      if (model != null) {\n        model.removeListenerById(this.__changeModelListenerId);\n        this.__changeModelListenerId = model.addListener(\n          \"change\",\n          this.__changeModel,\n          this\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       ITEM HANDLING\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Creates a ListItem and delegates the configure method if a delegate is\n     * set and the needed function (configureItem) is available.\n     *\n     * @return {qx.ui.form.ListItem} The created and configured ListItem.\n     */\n    _createItem() {\n      var delegate = this.getDelegate();\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        var item = delegate.createItem();\n      } else {\n        var item = new qx.ui.form.ListItem();\n      }\n\n      // if there is a configure method, invoke it\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n      return item;\n    },\n\n    /**\n     * Internal helper to add ListItems to the target including the creation\n     * of the binding.\n     *\n     * @param index {Number} The index of the item to add.\n     */\n    __addItem(index) {\n      // create a new ListItem\n      var listItem = this._createItem();\n      // set up the binding\n      this._bindListItem(listItem, index);\n      // add the ListItem to the target\n      this.getTarget().add(listItem);\n    },\n\n    /**\n     * Internal helper to remove ListItems from the target. Also the binding\n     * will be removed properly.\n     */\n    __removeItem() {\n      this._startSelectionModification();\n      var children = this.getTarget().getChildren();\n      // get the last binding id\n      var index = children.length - 1;\n      // get the item\n      var oldItem = children[index];\n      this._removeBindingsFrom(oldItem);\n      // remove the item\n      this.getTarget().removeAt(index);\n      oldItem.destroy();\n      this._endSelectionModification();\n    },\n\n    /**\n     * Returns all models currently visible by the list. This method is only\n     * useful if you use the filter via the {@link #delegate}.\n     *\n     * @return {qx.data.Array} A new data array container all the models\n     *   which representation items are currently visible.\n     */\n    getVisibleModels() {\n      var visibleModels = [];\n      var target = this.getTarget();\n      if (target != null) {\n        var items = target.getChildren();\n        for (var i = 0; i < items.length; i++) {\n          visibleModels.push(items[i].getModel());\n        }\n      }\n\n      return new qx.data.Array(visibleModels);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       BINDING STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Sets up the binding for the given ListItem and index.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    _bindListItem(item, index) {\n      // -1 is the special, \"null\" value item.  Nothing to bind, just fix the display and model\n      if (index < 0) {\n        item.setLabel(this.getNullValueTitle() || \"\");\n        item.setIcon(this.getNullValueIcon());\n        item.setModel(null);\n        return;\n      }\n      var delegate = this.getDelegate();\n      // if a delegate for creating the binding is given, use it\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, item, index);\n        // otherwise, try to bind the listItem by default\n      } else {\n        this.bindDefaultProperties(item, index);\n      }\n    },\n\n    /**\n     * Helper-Method for binding the default properties (label, icon and model)\n     * from the model to the target widget.\n     *\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    bindDefaultProperties(item, index) {\n      // model\n      this.bindProperty(\"\", \"model\", null, item, index);\n\n      // label\n      this.bindProperty(\n        this.getLabelPath(),\n        \"label\",\n        this.getLabelOptions(),\n        item,\n        index\n      );\n\n      // if the iconPath is set\n      if (this.getIconPath() != null) {\n        this.bindProperty(\n          this.getIconPath(),\n          \"icon\",\n          this.getIconOptions(),\n          item,\n          index\n        );\n      }\n    },\n\n    /**\n     * Helper-Method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetProperty {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options used by\n     *   {@link qx.data.SingleValueBinding#bind} to use for the binding.\n     * @param targetWidget {qx.ui.core.Widget} The target widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindProperty(sourcePath, targetProperty, options, targetWidget, index) {\n      // create the options for the binding containing the old options\n      // including the old onUpdate function\n      if (options != null) {\n        var options = qx.lang.Object.clone(options);\n        this.__onUpdate[targetProperty] = options.onUpdate;\n        delete options.onUpdate;\n      } else {\n        options = {};\n        this.__onUpdate[targetProperty] = null;\n      }\n      options.onUpdate = qx.lang.Function.bind(this._onBindingSet, this, index);\n      options.ignoreConverter = \"model\";\n\n      // build up the path for the binding\n      var bindPath = \"model[\" + index + \"]\";\n      if (sourcePath != null && sourcePath != \"\") {\n        bindPath += \".\" + sourcePath;\n      }\n      // create the binding\n      var id = this.bind(bindPath, targetWidget, targetProperty, options);\n      targetWidget.setUserData(targetProperty + \"BindingId\", id);\n\n      // save the bound property\n      if (!this.__boundProperties.includes(targetProperty)) {\n        this.__boundProperties.push(targetProperty);\n      }\n    },\n\n    /**\n     * Helper-Method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourcePath {String} The name of the property in the target.\n     * @param options {Map | null} The options to use by\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param sourceWidget {qx.ui.core.Widget} The source widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindPropertyReverse(targetPath, sourcePath, options, sourceWidget, index) {\n      // build up the path for the binding\n      var targetBindPath = \"model[\" + index + \"]\";\n      if (targetPath != null && targetPath != \"\") {\n        targetBindPath += \".\" + targetPath;\n      }\n      // create the binding\n      var id = sourceWidget.bind(sourcePath, this, targetBindPath, options);\n      sourceWidget.setUserData(targetPath + \"ReverseBindingId\", id);\n\n      // save the bound property\n      if (!this.__boundPropertiesReverse.includes(targetPath)) {\n        this.__boundPropertiesReverse.push(targetPath);\n      }\n    },\n\n    /**\n     * Method which will be called on the invoke of every binding. It takes\n     * care of the selection on the change of the binding.\n     *\n     * @param index {Number} The index of the current binding.\n     * @param sourceObject {qx.core.Object} The source object of the binding.\n     * @param targetObject {qx.core.Object} The target object of the binding.\n     */\n    _onBindingSet(index, sourceObject, targetObject) {\n      // ignore the binding set if the model is already set to null\n      if (this.getModel() == null || this._inSelectionModification()) {\n        return;\n      }\n\n      // go through all bound target properties\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        // if there is an onUpdate for one of it, invoke it\n        if (this.__onUpdate[this.__boundProperties[i]] != null) {\n          this.__onUpdate[this.__boundProperties[i]]();\n        }\n      }\n    },\n\n    /**\n     * Internal helper method to remove the binding of the given item.\n     *\n     * @param item {Number} The item of which the binding which should\n     *   be removed.\n     */\n    _removeBindingsFrom(item) {\n      // go through all bound target properties\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(this.__boundProperties[i] + \"BindingId\");\n        if (id != null) {\n          this.removeBinding(id);\n          item.setUserData(this.__boundProperties[i] + \"BindingId\", null);\n        }\n      }\n      // go through all reverse bound properties\n      for (var i = 0; i < this.__boundPropertiesReverse.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(\n          this.__boundPropertiesReverse[i] + \"ReverseBindingId\"\n        );\n\n        if (id != null) {\n          item.removeBinding(id);\n          item.getUserData(\n            this.__boundPropertiesReverse[i] + \"ReverseBindingId\",\n            null\n          );\n        }\n      }\n    },\n\n    /**\n     * Internal helper method to renew all set bindings.\n     */\n    __renewBindings() {\n      // ignore, if no target is set (startup)\n      if (this.getTarget() == null || this.getModel() == null) {\n        return;\n      }\n\n      // get all children of the target\n      var items = this.getTarget().getChildren();\n      // go through all items\n      for (var i = 0; i < items.length; i++) {\n        this._removeBindingsFrom(items[i]);\n        // add the new binding\n        this._bindListItem(items[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       DELEGATE HELPER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for applying the delegate It checks if a configureItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setConfigureItem(value, old) {\n      if (\n        value != null &&\n        value.configureItem != null &&\n        this.getTarget() != null\n      ) {\n        var children = this.getTarget().getChildren();\n        for (var i = 0; i < children.length; i++) {\n          value.configureItem(children[i]);\n        }\n      }\n    },\n\n    /**\n     * Helper method for applying the delegate It checks if a bindItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setBindItem(value, old) {\n      // if a new bindItem function is set\n      if (value != null && value.bindItem != null) {\n        // do nothing if the bindItem function did not change\n        if (\n          old != null &&\n          old.bindItem != null &&\n          value.bindItem == old.bindItem\n        ) {\n          return;\n        }\n        this.__renewBindings();\n      }\n    },\n\n    /**\n     * Helper method for applying the delegate It checks if a createItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setCreateItem(value, old) {\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.createItem == null\n      ) {\n        return;\n      }\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // remove all elements of the target\n      var removed = this.getTarget().removeAll();\n      for (var i = 0; i < removed.length; i++) {\n        removed[i].destroy();\n      }\n\n      // update\n      this.update();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n    /**\n     * Apply-Method for setting the filter. It removes all bindings,\n     * check if the length has changed and adds or removes the items in the\n     * target. After that, the bindings will be set up again and the selection\n     * will be updated.\n     *\n     * @param value {Function|null} The new filter function.\n     * @param old {Function|null} The old filter function.\n     */\n    _setFilter(value, old) {\n      // update the filter if it has been removed\n      if (\n        (value == null || value.filter == null) &&\n        old != null &&\n        old.filter != null\n      ) {\n        this.__removeFilter();\n      }\n\n      // check if it is necessary to do anything\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.filter == null\n      ) {\n        return;\n      }\n      // if yes, continue\n\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // store the old lookup table\n      var oldTable = this.__lookupTable;\n      // generate a new lookup table\n      this.__buildUpLookupTable();\n\n      // if there are lesser items\n      if (oldTable.length > this.__lookupTable.length) {\n        // remove the unnecessary items\n        for (var j = oldTable.length; j > this.__lookupTable.length; j--) {\n          this.getTarget()\n            .removeAt(j - 1)\n            .destroy();\n        }\n        // if there are more items\n      } else if (oldTable.length < this.__lookupTable.length) {\n        // add the new elements\n        for (var j = oldTable.length; j < this.__lookupTable.length; j++) {\n          var tempItem = this._createItem();\n          this.getTarget().add(tempItem);\n        }\n      }\n\n      // bind every list item again\n      var listItems = this.getTarget().getChildren();\n      for (var i = 0; i < listItems.length; i++) {\n        this._bindListItem(listItems[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n    /**\n     * This helper is responsible for removing the filter and setting the\n     * controller to a valid state without a filtering.\n     */\n    __removeFilter() {\n      // renew the index lookup table\n      this.__buildUpLookupTable();\n      // check for the new length\n      this.__changeModelLength();\n      // renew the bindings\n      this.__renewBindings();\n\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       LOOKUP STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper-Method which builds up the index lookup for the filter feature.\n     * If no filter is set, the lookup table will be a 1:1 mapping.\n     */\n    __buildUpLookupTable() {\n      var model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      var delegate = this.getDelegate();\n      if (delegate != null) {\n        var filter = delegate.filter;\n      }\n\n      this.__lookupTable = [];\n\n      // -1 is a special lookup value, to represent the \"null\" option\n      if (this.isAllowNull()) {\n        this.__lookupTable.push(-1);\n      }\n      for (var i = 0; i < model.getLength(); i++) {\n        if (filter == null || filter(model.getItem(i))) {\n          this.__lookupTable.push(i);\n        }\n      }\n    },\n\n    /**\n     * Function for accessing the lookup table.\n     *\n     * @param index {Integer} The index of the lookup table.\n     * @return {Number} Item index from lookup table\n     */\n    __lookup(index) {\n      return this.__lookupTable[index];\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct() {\n    this.__lookupTable = this.__onUpdate = this.__boundProperties = null;\n    this.__boundPropertiesReverse = null;\n\n    // remove yourself from the widget queue\n    qx.ui.core.queue.Widget.remove(this);\n  }\n});\n"
  ],
  "mappings": "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"
}