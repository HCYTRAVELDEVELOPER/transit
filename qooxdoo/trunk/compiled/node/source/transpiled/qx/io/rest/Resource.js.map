{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "description",
    "__longPollHandlers",
    "__pollTimers",
    "__routes",
    "_resource",
    "_tailorResource",
    "_getResource",
    "Environment",
    "get",
    "Assert",
    "assertMap",
    "__mapFromDescription",
    "e",
    "dispose",
    "events",
    "success",
    "actionSuccess",
    "error",
    "actionError",
    "statics",
    "POLL_THROTTLE_LIMIT",
    "POLL_THROTTLE_COUNT",
    "REQUIRED",
    "placeholdersFromUrl",
    "url",
    "bom",
    "rest",
    "Resource",
    "members",
    "resource",
    "setRequestFactory",
    "_getRequest",
    "setRequestHandler",
    "onsuccess",
    "callback",
    "req",
    "action",
    "props",
    "getResponse",
    "getPhase",
    "fireEvent",
    "event",
    "type",
    "Rest",
    "context",
    "onfail",
    "onloadend",
    "configureRequest",
    "io",
    "request",
    "Xhr",
    "map",
    "method",
    "check",
    "__addAction",
    "undefined",
    "Error",
    "__declareEvent",
    "lang",
    "Function",
    "bind",
    "Array",
    "prototype",
    "unshift",
    "call",
    "arguments",
    "invoke",
    "apply",
    "params",
    "data",
    "setBaseUrl",
    "baseUrl",
    "abort",
    "varargs",
    "refresh",
    "poll",
    "interval",
    "immediately",
    "intervalListener",
    "reqs",
    "getRequestsByAction",
    "isDone",
    "isDisposed",
    "timer",
    "Timer",
    "addListener",
    "start",
    "longPoll",
    "res",
    "lastResponse",
    "immediateResponseCount",
    "throttle",
    "isImmediateResponse",
    "Date",
    "_getThrottleLimit",
    "_getThrottleCount",
    "debug",
    "handlerId",
    "longPollHandler",
    "_getRequestConfig",
    "keys",
    "forEach",
    "route",
    "assertString",
    "constructor",
    "$$events",
    "destruct",
    "stop",
    "id",
    "removeListenerById"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/io/rest/Resource.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Client-side wrapper of a REST resource.\n *\n * Each instance represents a resource in terms of REST. A number of actions\n * (usually HTTP methods) unique to the resource can be defined and invoked.\n * A resource with its actions is configured declaratively by passing a resource\n * description to the constructor, or programmatically using {@link #map}.\n *\n * Each action is associated to a route. A route is a combination of method,\n * URL pattern and optional parameter constraints.\n *\n * An action is invoked by calling a method with the same name. When a URL\n * pattern of a route contains positional parameters, those parameters must be\n * passed when invoking the associated action. Also, constraints defined in the\n * route must be satisfied.\n *\n * When an action is invoked, a request is configured according to the associated\n * route, is passed the URL parameters, request body data, and finally send.\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\n *\n * No constraints on the action's name or the scope of the URLs are imposed. However,\n * if you want to follow RESTful design patterns it is recommended to name actions\n * the same as the HTTP action.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\" },\n *  \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\n *  \"post\": { method: \"POST\", url: \"/photos/\"}\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // Can also be written: photo.invoke(\"get\", {id: 1});\n * photo.get({id: 1});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this creates a new resource with the given 'id'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.put({id: 1}, {title: \"Monkey\"});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this adds a new resource to the resource collection 'photos'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.post(null, {title: \"Monkey\"});\n * </pre>\n *\n * To check for existence of URL parameters or constrain them to a certain format, you\n * can add a <code>check</code> property to the description. See {@link #map} for details.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // photo.get({id: \"FAIL\"});\n * // -- Error: \"Parameter 'id' is invalid\"\n * </pre>\n *\n * If your description happens to use the same action more than once, consider\n * defining another resource.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos\"},\n * };\n * // Distinguish \"photo\" (singular) and \"photos\" (plural) resource\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * </pre>\n *\n * Basically, all routes of a resource should point to the same URL (resource in\n * terms of HTTP). One acceptable exception of this constraint are resources where\n * required parameters are part of the URL (<code>/photos/1/</code>) or filter\n * resources. For instance:\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\n * };\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * photos.get({tag: \"wildlife\"})\n * </pre>\n *\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\n * and could therefore just as well mapped to two distinct resources (for instance,\n * named photos and photosTagged). What style to choose depends on the kind of data\n * returned. For instance, it seems sensible to stick with one resource if the filter\n * only limits the result set (i.e. the individual results have the same properties).\n *\n * In order to respond to successful (or erroneous) invocations of actions,\n * either listen to the generic \"success\" or \"error\" event and get the action\n * from the event data, or listen to action specific events defined at runtime.\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.rest.Resource\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param description {Map?} Each key of the map is interpreted as\n   *  <code>action</code> name. The value associated to the key must be a map\n   *  with the properties <code>method</code> and <code>url</code>.\n   *  <code>check</code> is optional. Also see {@link #map}.\n   *\n   * For example:\n   *\n   * <pre class=\"javascript\">\n   * { get: {method: \"GET\", url: \"/photos/{id}\", check: { id: /\\d+/ }} }\n   * </pre>\n   *\n   * @see qx.bom.rest\n   * @see qx.io.rest\n   */\n  construct(description) {\n    super();\n\n    this.__longPollHandlers = {};\n    this.__pollTimers = {};\n    this.__routes = {};\n\n    this._resource = this._tailorResource(this._getResource());\n\n    try {\n      if (typeof description !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertMap(description);\n        }\n        this.__mapFromDescription(description);\n      }\n    } catch (e) {\n      this.dispose();\n      throw e;\n    }\n  },\n\n  events: {\n    /**\n     * Fired when any request was successful.\n     *\n     * The action the successful request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Success\", e.g. \"indexSuccess\".\n     */\n    success: \"qx.event.type.Rest\",\n\n    /**\n     * Fired when request associated to action given in prefix was successful.\n     *\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\n     * successful.\n     */\n    actionSuccess: \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request fails.\n     *\n     * The action the failed request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Error\", e.g. \"indexError\".\n     */\n    error: \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request associated to action given in prefix fails.\n     *\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\n     */\n    actionError: \"qx.event.type.Rest\"\n  },\n\n  statics: {\n    /**\n     * Number of milliseconds below a long-poll request is considered immediate and\n     * subject to throttling checks.\n     */\n    POLL_THROTTLE_LIMIT: 100,\n\n    /**\n     * Number of immediate long-poll responses accepted before throttling takes place.\n     */\n    POLL_THROTTLE_COUNT: 30,\n\n    /**\n     * A symbol used in checks to declare required parameter.\n     */\n    REQUIRED: true,\n\n    /**\n     * Get placeholders from URL.\n     *\n     * @param url {String} The URL to parse for placeholders.\n     * @return {Array} Array of placeholders without the placeholder prefix.\n     */\n    placeholdersFromUrl(url) {\n      return qx.bom.rest.Resource.placeholdersFromUrl(url);\n    }\n  },\n\n  members: {\n    _resource: null,\n    __longPollHandlers: null,\n    __pollTimers: null,\n    __routes: null,\n\n    /**\n     * Get resource.\n     *\n     * May be overridden to change type of resource.\n     * @param description {Map?} See construct.\n     * @return {qx.bom.rest.Resource} Resource implementation which does the heavy lifting.\n     */\n    _getResource(description) {\n      return new qx.bom.rest.Resource(description);\n    },\n\n    /**\n     * Tailors (apply dependency injection) the given resource to fit our needs.\n     *\n     * @param resource {qx.bom.rest.Resource} Resource.\n     * @return {qx.bom.rest.Resource} Tailored resource.\n     */\n    _tailorResource(resource) {\n      // inject different request implementation\n      resource.setRequestFactory(this._getRequest);\n\n      // inject different request handling\n      resource.setRequestHandler({\n        onsuccess: {\n          callback(req, action) {\n            return function () {\n              var props = [\n                req.getResponse(),\n                null,\n                false,\n                req,\n                action,\n                req.getPhase()\n              ];\n\n              this.fireEvent(action + \"Success\", qx.event.type.Rest, props);\n              this.fireEvent(\"success\", qx.event.type.Rest, props);\n            };\n          },\n          context: this\n        },\n\n        onfail: {\n          callback(req, action) {\n            return function () {\n              var props = [\n                req.getResponse(),\n                null,\n                false,\n                req,\n                action,\n                req.getPhase()\n              ];\n\n              this.fireEvent(action + \"Error\", qx.event.type.Rest, props);\n              this.fireEvent(\"error\", qx.event.type.Rest, props);\n            };\n          },\n          context: this\n        },\n\n        onloadend: {\n          callback(req, action) {\n            return function () {\n              req.dispose();\n            };\n          },\n          context: this\n        }\n      });\n\n      return resource;\n    },\n\n    //\n    // Request\n    //\n\n    /**\n     * Configure request.\n     *\n     * @param callback {Function} Function called before request is send.\n     *   Receives request, action, params and data.\n     *\n     * <pre class=\"javascript\">\n     * res.configureRequest(function(req, action, params, data) {\n     *   if (action === \"index\") {\n     *     req.setAccept(\"application/json\");\n     *   }\n     * });\n     * </pre>\n     */\n    configureRequest(callback) {\n      this._resource.configureRequest(callback);\n    },\n\n    /**\n     * Get request.\n     *\n     * May be overridden to change type of request.\n     * @return {qx.io.request.Xhr} Xhr object\n     */\n    _getRequest() {\n      return new qx.io.request.Xhr();\n    },\n\n    //\n    // Routes and actions\n    //\n\n    /**\n     * Map action to combination of method and URL pattern.\n     *\n     * <pre class=\"javascript\">\n     *   res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n     *\n     *   // GET /photos/123\n     *   res.get({id: \"123\"});\n     * </pre>\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    map(action, method, url, check) {\n      // add dynamic methods also on ourself to allow 'invoke()' delegation\n      this.__addAction(action, method, url, check);\n\n      this._resource.map(action, method, url, check);\n    },\n\n    /**\n     * Map actions to members.\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    __addAction(action, method, url, check) {\n      this.__routes[action] = [method, url, check];\n\n      // Undefine generic getter when action is named \"get\"\n      if (action == \"get\") {\n        this[action] = undefined;\n      }\n\n      // Do not overwrite existing \"non-action\" methods unless the method is\n      // null (i.e. because it exists as a stub for documentation)\n      if (\n        typeof this[action] !== \"undefined\" &&\n        this[action] !== null &&\n        this[action].action !== true\n      ) {\n        throw new Error(\n          \"Method with name of action (\" + action + \") already exists\"\n        );\n      }\n\n      this.__declareEvent(action + \"Success\");\n      this.__declareEvent(action + \"Error\");\n\n      this[action] = qx.lang.Function.bind(function () {\n        Array.prototype.unshift.call(arguments, action);\n        return this.invoke.apply(this, arguments);\n      }, this);\n\n      // Method is safe to overwrite\n      this[action].action = true;\n    },\n\n    /**\n     * Invoke action with parameters.\n     *\n     * Internally called by actions dynamically created.\n     *\n     * May be overridden to customize action and parameter handling.\n     *\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\n     *\n     * @param action {String} Action to invoke.\n     * @param params {Map} Map of parameters inserted into URL when a matching\n     *  positional parameter is found.\n     * @param data {Map|String} Data to be send as part of the request.\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\n     * @return {Number} Id of the action's invocation.\n     */\n    invoke(action, params, data) {\n      var params = params == null ? {} : params;\n\n      // Cache parameters\n      this.__routes[action].params = params;\n\n      return this._resource.invoke(action, params, data);\n    },\n\n    /**\n     * Set base URL.\n     *\n     * The base URL is prepended to the URLs given in the description.\n     * Changes affect all future invocations.\n     *\n     * @param baseUrl {String} Base URL.\n     */\n    setBaseUrl(baseUrl) {\n      this._resource.setBaseUrl(baseUrl);\n    },\n\n    /**\n     * Abort action.\n     *\n     * Example:\n     *\n     * <pre class=\"javascript\">\n     *   // Abort all invocations of action\n     *   res.get({id: 1});\n     *   res.get({id: 2});\n     *   res.abort(\"get\");\n     *\n     *   // Abort specific invocation of action (by id)\n     *   var actionId = res.get({id: 1});\n     *   res.abort(actionId);\n     * </pre>\n     *\n     * @param varargs {String|Number} Action of which all invocations to abort\n     *  (when string), or a single invocation of an action to abort (when number)\n     */\n    abort(varargs) {\n      this._resource.abort(varargs);\n    },\n\n    /**\n     * Resend request associated to action.\n     *\n     * Replays parameters given when action was invoked originally.\n     *\n     * @param action {String} Action to refresh.\n     */\n    refresh(action) {\n      this._resource.refresh(action);\n    },\n\n    /**\n     * Periodically invoke action.\n     *\n     * Replays parameters given when action was invoked originally. When the\n     * action was not yet invoked and requires parameters, parameters must be\n     * given.\n     *\n     * Please note that IE tends to cache overly aggressive. One work-around is\n     * to disable caching on the client side by configuring the request with\n     * <code>setCache(false)</code>. If you control the server, a better\n     * work-around is to include appropriate headers to explicitly control\n     * caching. This way you still avoid requests that can be correctly answered\n     * from cache (e.g. when nothing has changed since the last poll). Please\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n     * XMLHttpRequest Caching Test</a> for available options.\n     *\n     * @lint ignoreUnused(intervalListener)\n     *\n     * @param action {String} Action to poll.\n     * @param interval {Number} Interval in ms.\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\n     *   invoke a call immediately.\n     * @return {qx.event.Timer} Timer that periodically invokes action. Use to\n     *   stop or resume. Is automatically disposed on disposal of object.\n     */\n    poll(action, interval, params, immediately) {\n      // Dispose timer previously created for action\n      if (this.__pollTimers[action]) {\n        this.__pollTimers[action].dispose();\n      }\n\n      // Fallback to previous params\n      if (typeof params == \"undefined\") {\n        params = this.__routes[action].params;\n      }\n\n      // Invoke immediately\n      if (immediately) {\n        this.invoke(action, params);\n      }\n\n      var intervalListener = function () {\n        var reqs = this.getRequestsByAction(action),\n          req = reqs ? reqs[0] : null;\n\n        if (!immediately && !req) {\n          this.invoke(action, params);\n          return;\n        }\n        if (req && (req.isDone() || req.isDisposed())) {\n          this.refresh(action);\n        }\n      };\n\n      var timer = (this.__pollTimers[action] = new qx.event.Timer(interval));\n      timer.addListener(\"interval\", intervalListener, this._resource);\n      timer.start();\n      return timer;\n    },\n\n    /**\n     * Long-poll action.\n     *\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\n     * server signals new data. The server determines when new data is available,\n     * while the client keeps open a request. Requires configuration on the\n     * server side. Basically, the server must not close a connection until\n     * new data is available. For a high level introduction to long-polling,\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n     * Ajax with long polling</a>.\n     *\n     * Uses {@link #refresh} internally. Make sure you understand the\n     * implications of IE's tendency to cache overly aggressive.\n     *\n     * Note no interval is given on the client side.\n     *\n     * @lint ignoreUnused(longPollHandler)\n     *\n     * @param action {String} Action to poll.\n     * @return {String} Id of handler responsible for long-polling. To stop\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\n     */\n    longPoll(action) {\n      var res = this,\n        lastResponse, // Keep track of last response\n        immediateResponseCount = 0; // Count immediate responses\n\n      // Throttle to prevent high load on server and client\n      function throttle() {\n        var isImmediateResponse =\n          lastResponse && new Date() - lastResponse < res._getThrottleLimit();\n\n        if (isImmediateResponse) {\n          immediateResponseCount += 1;\n          if (immediateResponseCount > res._getThrottleCount()) {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              res.debug(\n                \"Received successful response more than \" +\n                  res._getThrottleCount() +\n                  \" times subsequently, each within \" +\n                  res._getThrottleLimit() +\n                  \" ms. Throttling.\"\n              );\n            }\n            return true;\n          }\n        }\n\n        // Reset counter on delayed response\n        if (!isImmediateResponse) {\n          immediateResponseCount = 0;\n        }\n\n        return false;\n      }\n\n      var handlerId = (this.__longPollHandlers[action] = this.addListener(\n        action + \"Success\",\n        function longPollHandler() {\n          if (res.isDisposed()) {\n            return;\n          }\n\n          if (!throttle()) {\n            lastResponse = new Date();\n            res.refresh(action);\n          }\n        }\n      ));\n\n      this.invoke(action);\n      return handlerId;\n    },\n\n    /**\n     * Get request configuration for action and parameters.\n     *\n     * This is were placeholders are replaced with parameters.\n     *\n     * @param action {String} Action associated to request.\n     * @param params {Map} Parameters to embed in request.\n     * @return {Map} Map of configuration settings. Has the properties\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\n     */\n    _getRequestConfig(action, params) {\n      return this._resource._getRequestConfig(action, params);\n    },\n\n    /**\n     * Override to adjust the throttle limit.\n     * @return {Integer} Throttle limit in milliseconds\n     */\n    _getThrottleLimit() {\n      return qx.io.rest.Resource.POLL_THROTTLE_LIMIT;\n    },\n\n    /**\n     * Override to adjust the throttle count.\n     * @return {Integer} Throttle count\n     */\n    _getThrottleCount() {\n      return qx.io.rest.Resource.POLL_THROTTLE_COUNT;\n    },\n\n    /**\n     * Map actions from description.\n     *\n     * Allows to decoratively define routes.\n     *\n     * @param description {Map} Map that defines the routes.\n     */\n    __mapFromDescription(description) {\n      Object.keys(description).forEach(function (action) {\n        var route = description[action],\n          method = route.method,\n          url = route.url,\n          check = route.check;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertString(\n            method,\n            \"Method must be string for route '\" + action + \"'\"\n          );\n\n          qx.core.Assert.assertString(\n            url,\n            \"URL must be string for route '\" + action + \"'\"\n          );\n        }\n\n        this.map(action, method, url, check);\n      }, this);\n    },\n\n    /**\n     * Declare event at runtime.\n     *\n     * @param type {String} Type of event.\n     */\n    __declareEvent(type) {\n      if (!this.constructor.$$events) {\n        this.constructor.$$events = {};\n      }\n\n      if (!this.constructor.$$events[type]) {\n        this.constructor.$$events[type] = \"qx.event.type.Rest\";\n      }\n    }\n  },\n\n  /**\n   * Destructs the Resource.\n   *\n   * All created requests, routes and pollTimers will be disposed.\n   */\n  destruct() {\n    var action;\n\n    if (this.__pollTimers) {\n      for (action in this.__pollTimers) {\n        var timer = this.__pollTimers[action];\n        timer.stop();\n        timer.dispose();\n      }\n    }\n\n    if (this.__longPollHandlers) {\n      for (action in this.__longPollHandlers) {\n        var id = this.__longPollHandlers[action];\n        this.removeListenerById(id);\n      }\n    }\n\n    this._resource.destruct();\n    this._resource =\n      this.__routes =\n      this.__pollTimers =\n      this.__longPollHandlers =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}