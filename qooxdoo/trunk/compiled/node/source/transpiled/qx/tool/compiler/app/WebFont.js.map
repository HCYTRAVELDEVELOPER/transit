{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "fs",
    "require",
    "path",
    "tmp",
    "http",
    "fontkit",
    "log",
    "tool",
    "utils",
    "LogManager",
    "createLog",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "library",
    "__library",
    "properties",
    "name",
    "check",
    "defaultSize",
    "init",
    "mapping",
    "nullable",
    "comparisonString",
    "resources",
    "members",
    "__fontData",
    "_loadLocalFont",
    "filename",
    "Promise",
    "resolve",
    "reject",
    "fontpath",
    "join",
    "getRootDir",
    "getResourcePath",
    "__processFontFile",
    "_loadRemoteFont",
    "url",
    "get",
    "res",
    "error",
    "statusCode",
    "contentType",
    "headers",
    "Error",
    "test",
    "resume",
    "tmpName",
    "_tempNameGenerated",
    "err",
    "tmpFilename",
    "outFile",
    "createWriteStream",
    "on",
    "unlink",
    "bind",
    "chunk",
    "write",
    "end",
    "e",
    "open",
    "font",
    "getMapping",
    "mapPath",
    "readFile",
    "encoding",
    "data",
    "code",
    "map",
    "JSON",
    "parse",
    "keys",
    "forEach",
    "key",
    "codePoint",
    "parseInt",
    "glyph",
    "glyphForCodePoint",
    "id",
    "compiler",
    "Console",
    "trace",
    "getName",
    "Math",
    "ceil",
    "getDefaultSize",
    "advanceWidth",
    "advanceHeight",
    "GSUB",
    "ligatureName",
    "lookupList",
    "toArray",
    "lookupListIndexes",
    "featureList",
    "feature",
    "index",
    "subTable",
    "subTables",
    "leadingCharacters",
    "coverage",
    "rangeRecords",
    "i",
    "start",
    "character",
    "stringsForGlyph",
    "push",
    "ligatureSets",
    "ligatureSet",
    "ligatureSetIndex",
    "leadingCharacter",
    "ligature",
    "ligatureText",
    "components",
    "x",
    "hexId",
    "charCodeAt",
    "toString",
    "undefined",
    "characterSet",
    "commands",
    "length",
    "layers",
    "found",
    "gName",
    "names",
    "getBootstrapCode",
    "target",
    "application",
    "initial",
    "size",
    "lineHeight",
    "family",
    "sources",
    "source",
    "getResources",
    "getComparisonString",
    "stringify",
    "generateForTarget",
    "__generateForTargetPromise",
    "resource",
    "basename",
    "match",
    "then",
    "catch",
    "generateForApplication",
    "str",
    "app",
    "WebFont"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/compiler/app/WebFont.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2017 GONICUS GmbH, http://www.gonicus.de\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * Cajus Pollmeier (pollmeier@gonicus.de, @cajus)\n *\n * *********************************************************************** */\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst tmp = require(\"tmp\");\nconst http = require(\"http\");\nconst fontkit = require(\"@foliojs-fork/fontkit\");\n\nvar log = qx.tool.utils.LogManager.createLog(\"font\");\n\n/**\n * Represents a WebFont provided by a Library\n */\nqx.Class.define(\"qx.tool.compiler.app.WebFont\", {\n  extend: qx.core.Object,\n\n  construct(library) {\n    super();\n    this.__library = library;\n  },\n\n  properties: {\n    /** The name of the webfont */\n    name: {\n      check: \"String\"\n    },\n\n    /** The default size */\n    defaultSize: {\n      check: \"Integer\",\n      init: 40\n    },\n\n    /**\n     * Optional mapping filename. The path is relative to the location of the\n     * `Manifest.json` file. The mapping file is in json format and should contain\n     * a map of icon name to code point in hex:\n     * `{ \"my_icon\": \"ef99\", \"my_other_icon\": \"483c\"}`\n     */\n    mapping: {\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n\n    /**\n     * Characters that are used to test if the font has loaded properly. These\n     * default to \"WEei\" in `qx.bom.webfont.Validator` and can be overridden\n     * for certain cases like icon fonts that do not provide the predefined\n     * characters.\n     */\n    comparisonString: {\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n\n    /** {String[]} Resources that make up the font; an array of Strings, each of which can be a URL or a local file */\n    resources: {\n      check: \"Array\"\n    }\n  },\n\n  members: {\n    __library: null,\n    __fontData: null,\n\n    /**\n     * Helper which triggers a local font analyze run.\n     *\n     * @param filename {String} Filename for the local font\n     * @return {Promise}\n     */\n    _loadLocalFont(filename) {\n      return new Promise((resolve, reject) => {\n        let fontpath = path.join(\n          this.__library.getRootDir(),\n          path.join(this.__library.getResourcePath(), filename)\n        );\n\n        this.__processFontFile(fontpath, resolve, reject);\n      });\n    },\n\n    /**\n     * Helper which loads a remote font to analyze the result.\n     *\n     * @param url {String} URL for the font download\n     * @return {Promise}\n     */\n    _loadRemoteFont(url) {\n      return new Promise(\n        function (resolve, reject) {\n          http\n            .get(\n              url,\n              function (res) {\n                let error;\n                const { statusCode } = res;\n                const contentType = res.headers[\"content-type\"];\n\n                if (statusCode !== 200) {\n                  error = new Error(\n                    `Request Failed.\\nStatus Code: ${statusCode}`\n                  );\n                } else if (\n                  !/^font\\/(ttf|svg|eot|woff|woff2)$/.test(contentType)\n                ) {\n                  error = new Error(\n                    \"Invalid content-type.\\n\" +\n                      `Expected font/ttf, font/svg, font/eot, font/woff or font/woff2 but received ${contentType}`\n                  );\n                }\n\n                if (error) {\n                  res.resume();\n                  reject(error);\n                  return;\n                }\n\n                tmp.tmpName(\n                  function _tempNameGenerated(err, tmpFilename) {\n                    if (err) {\n                      reject(err);\n                      return;\n                    }\n\n                    let outFile = fs.createWriteStream(tmpFilename);\n                    outFile.on(\n                      \"close\",\n                      function () {\n                        this.__processFontFile(tmpFilename, resolve, reject);\n                        fs.unlink(tmpFilename);\n                      }.bind(this)\n                    );\n\n                    res.on(\"data\", chunk => {\n                      outFile.write(chunk);\n                    });\n                    res.on(\"end\", function () {\n                      outFile.end();\n                    });\n                  }.bind(this)\n                );\n              }.bind(this)\n            )\n            .on(\"error\", e => {\n              reject(e);\n            });\n        }.bind(this)\n      );\n    },\n\n    /**\n     * Common code to extract the desired font information from a font file\n     * on disk. It resolves the promises given by the calling stub (remote or\n     * local font retrieval).\n     *\n     * @param filename {String} Path to font file\n     * @param resolve {Function} External promise resolve\n     * @param reject {Function} External promise reject\n     */\n    __processFontFile(filename, resolve, reject) {\n      fontkit.open(\n        filename,\n        null,\n        function (err, font) {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          let resources = {};\n\n          // If we have a mapping file, take qx.tool.compiler.Console.information instead\n          // of anaylzing the font.\n          if (this.getMapping()) {\n            let mapPath = path.join(\n              this.__library.getRootDir(),\n              path.join(this.__library.getResourcePath(), this.getMapping())\n            );\n\n            fs.readFile(mapPath, { encoding: \"utf-8\" }, (err, data) => {\n              if (err) {\n                log.error(`Cannot read mapping file '${mapPath}': ${err.code}`);\n                reject(err);\n                return;\n              }\n\n              let map = JSON.parse(data);\n              Object.keys(map).forEach(key => {\n                let codePoint = parseInt(map[key], 16);\n                let glyph = font.glyphForCodePoint(codePoint);\n                if (!glyph.id) {\n                  qx.tool.compiler.Console.trace(\n                    `WARN: no glyph found in ${filename} ${key}: ${codePoint}`\n                  );\n\n                  return;\n                }\n                resources[\"@\" + this.getName() + \"/\" + key] = [\n                  Math.ceil(\n                    (this.getDefaultSize() * glyph.advanceWidth) /\n                      glyph.advanceHeight\n                  ),\n\n                  // width\n                  this.getDefaultSize(), // height\n                  codePoint\n                ];\n              }, this);\n\n              resolve(resources);\n              return;\n            });\n\n            return;\n          }\n\n          if (!font.GSUB) {\n            qx.tool.compiler.Console.error(\n              `The webfont in ${filename} does not have any ligatures`\n            );\n\n            resolve(resources);\n            return;\n          }\n\n          // some IconFonts (MaterialIcons for example) use ligatures\n          // to name their icons. This code extracts the ligatures\n          // hat tip to Jossef Harush https://stackoverflow.com/questions/54721774/extracting-ttf-font-ligature-mappings/54728584\n          let ligatureName = {};\n          let lookupList = font.GSUB.lookupList.toArray();\n          let lookupListIndexes =\n            font.GSUB.featureList[0].feature.lookupListIndexes;\n          lookupListIndexes.forEach(index => {\n            let subTable = lookupList[index].subTables[0];\n            let leadingCharacters = [];\n            subTable.coverage.rangeRecords.forEach(coverage => {\n              for (let i = coverage.start; i <= coverage.end; i++) {\n                let character = font.stringsForGlyph(i)[0];\n                leadingCharacters.push(character);\n              }\n            });\n            let ligatureSets = subTable.ligatureSets.toArray();\n            ligatureSets.forEach((ligatureSet, ligatureSetIndex) => {\n              let leadingCharacter = leadingCharacters[ligatureSetIndex];\n              ligatureSet.forEach(ligature => {\n                let character = font.stringsForGlyph(ligature.glyph)[0];\n                if (!character) {\n                  // qx.tool.compiler.Console.log(`WARN: ${this.getName()} no character ${ligature}`);\n                  return;\n                }\n                let ligatureText =\n                  leadingCharacter +\n                  ligature.components\n                    .map(x => font.stringsForGlyph(x)[0])\n                    .join(\"\");\n                var hexId = character.charCodeAt(0).toString(16);\n                if (ligatureName[hexId] == undefined) {\n                  ligatureName[hexId] = [ligatureText];\n                } else {\n                  ligatureName[hexId].push(ligatureText);\n                }\n              });\n            });\n          });\n\n          let defaultSize = this.getDefaultSize();\n          font.characterSet.forEach(codePoint => {\n            let glyph = font.glyphForCodePoint(codePoint);\n            if (glyph.path.commands.length < 1 && !glyph.layers) {\n              return;\n            }\n\n            const found = gName => {\n              resources[\"@\" + this.getName() + \"/\" + gName] = [\n                Math.ceil(\n                  (this.getDefaultSize() * glyph.advanceWidth) /\n                    glyph.advanceHeight\n                ),\n\n                // width\n                defaultSize, // height\n                codePoint\n              ];\n            };\n            if (glyph.name) {\n              found(glyph.name);\n            }\n            var names = ligatureName[codePoint.toString(16)];\n            if (names) {\n              names.forEach(found);\n            }\n          }, this);\n\n          resolve(resources);\n        }.bind(this)\n      );\n    },\n\n    /**\n     * Return bootstrap code that is executed before the Application starts.\n     *\n     * @param target  {qx.tool.compiler.targets.Target} the target\n     * @param application  {qx.tool.compiler.app.Application} the application being built\n     * @param initial {Boolean} true if this is the first pass\n     * @return {String}\n     */\n    getBootstrapCode(target, application, initial) {\n      let res = \"\";\n\n      if (initial) {\n        res = \"qx.$$fontBootstrap={};\\n\";\n      }\n\n      let font = {\n        size: this.getDefaultSize(),\n        lineHeight: 1,\n        family: [this.getName()],\n        sources: [\n          {\n            family: this.getName(),\n            source: this.getResources()\n          }\n        ]\n      };\n\n      if (this.getComparisonString()) {\n        font.comparisonString = this.getComparisonString();\n      }\n\n      return (res +=\n        \"qx.$$fontBootstrap['\" +\n        this.getName() +\n        \"']=\" +\n        JSON.stringify(font) +\n        \";\");\n    },\n\n    /**\n     * Called by {Target} to compile the fonts, called once per application build\n     * (NOTE:: right now, this is called for each application - that is soon to be fixed)\n     *\n     * @param target  {qx.tool.compiler.targets.Target} the target\n     * @return {Promise}\n     */\n    generateForTarget(target) {\n      if (this.__generateForTargetPromise) {\n        return this.__generateForTargetPromise;\n      }\n\n      this.__generateForTargetPromise = new Promise((resolve, reject) => {\n        for (let resource of this.getResources()) {\n          // Search for the first supported extension\n          let basename = resource.match(/^.*[/\\\\]([^/\\\\\\?#]+).*$/)[1];\n          // fontkit knows about these font formats\n          if (!basename.match(/\\.(ttf|otf|woff|woff2)$/)) {\n            continue;\n          }\n          // We support http/https and local files, check for URLs\n          // first.\n          if (resource.match(/^https?:\\/\\//)) {\n            this._loadRemoteFont(resource)\n              .then(data => {\n                this.__fontData = data;\n                resolve();\n              })\n              .catch(err => {\n                reject(err);\n              });\n            return;\n          }\n          // handle local file\n          this._loadLocalFont(resource)\n            .then(data => {\n              this.__fontData = data;\n              resolve();\n            })\n            .catch(err => {\n              reject(err);\n            });\n          return;\n        }\n        reject(\n          `Failed to load/validate FontMap for webfont (expected ttf, otf, woff or woff2) ${this.getName()}`\n        );\n      });\n\n      return this.__generateForTargetPromise;\n    },\n\n    /**\n     * Called by Target to add fonts to an application\n     *\n     * @param target  {qx.tool.compiler.targets.Target} the target\n     * @param application  {qx.tool.compiler.app.Application} the application being built\n     * @return {Promise}\n     */\n    async generateForApplication(target, application) {\n      return this.__fontData || null;\n    },\n\n    /**\n     * Returns a string representation of this for debugging\n     *\n     * @return {String} the name or resource of this font\n     */\n    toString() {\n      var str = this.getName();\n      if (!str) {\n        str = JSON.stringify(this.getResources());\n      }\n      return str;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}