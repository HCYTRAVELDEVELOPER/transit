{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "fs",
    "tool",
    "utils",
    "Promisify",
    "process",
    "require",
    "path",
    "semver",
    "get_value",
    "set_value",
    "unset_value",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "schemaBaseUrl",
    "construct",
    "config",
    "lang",
    "Type",
    "isObject",
    "set",
    "prop",
    "get",
    "Error",
    "classname",
    "baseDir",
    "setBaseDir",
    "cwd",
    "properties",
    "fileName",
    "check",
    "version",
    "validate",
    "coerce",
    "nullable",
    "data",
    "event",
    "dirty",
    "init",
    "loaded",
    "warnOnly",
    "createIfNotExists",
    "templateFunction",
    "members",
    "__schema",
    "_validateData",
    "isValidate",
    "getVersion",
    "Json",
    "e",
    "msg",
    "getRelativeDataPath",
    "message",
    "isWarnOnly",
    "compiler",
    "Console",
    "warn",
    "Utils",
    "UserError",
    "getDataPath",
    "join",
    "getBaseDir",
    "getFileName",
    "relative",
    "_getSchemaFileName",
    "name",
    "ext",
    "split",
    "String",
    "replace",
    "getSchemaPath",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "getSchemaUri",
    "Abstract",
    "getSchema",
    "exists",
    "existsAsync",
    "load",
    "undefined",
    "isLoaded",
    "parseJson",
    "readFileAsync",
    "isCreateIfNotExists",
    "Manifest",
    "getTemplateFunction",
    "bind",
    "dataSchemaInfo",
    "getSchemaInfo",
    "dataVersion",
    "major",
    "schemaVersion",
    "setVersion",
    "setValidate",
    "s",
    "loadJsonAsync",
    "setData",
    "setLoaded",
    "getValue",
    "prop_path",
    "options",
    "getData",
    "setValue",
    "value",
    "originalValue",
    "preservePaths",
    "setDirty",
    "unset",
    "transform",
    "transformFunc",
    "transformedValue",
    "keyExists",
    "propOrMap",
    "isString",
    "res",
    "key",
    "getOwnPropertyNames",
    "TypeError",
    "save",
    "saveJsonAsync"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/config/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2019 The qooxdoo developers\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\n\nconst fs = qx.tool.utils.Promisify.fs;\nconst process = require(\"process\");\nconst path = require(\"upath\");\nconst semver = require(\"semver\");\nconst get_value = require(\"get-value\");\nconst set_value = require(\"set-value\");\nconst unset_value = require(\"unset-value\");\n\n/**\n * An abstract model for config files\n */\nqx.Class.define(\"qx.tool.config.Abstract\", {\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * The base URL of all json schema definitions\n     */\n    schemaBaseUrl: \"https://qooxdoo.org/schema\"\n  },\n\n  construct(config) {\n    super();\n    if (qx.lang.Type.isObject(config)) {\n      this.set(config);\n    }\n    for (let prop of [\"fileName\", \"version\"]) {\n      if (!this.get(prop)) {\n        throw new Error(\n          `Property ${prop} must be set when instantiating ${this.classname}`\n        );\n      }\n    }\n    if (!config.baseDir) {\n      this.setBaseDir(process.cwd());\n    }\n  },\n\n  properties: {\n    /**\n     * Name of the config file\n     */\n    fileName: {\n      check: \"String\"\n    },\n\n    /**\n     * The path to the directory containing the config file\n     * Defaults to process.cwd()\n     */\n    baseDir: {\n      check: \"String\"\n    },\n\n    /**\n     * Schema version of the config file\n     * If string, validate all data against this version of the schema\n     * If null, do not validate\n     */\n    version: {\n      validate: version => semver.coerce(version) !== null,\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The config data\n     */\n    data: {\n      check: \"Object\",\n      event: \"changeData\",\n      validate: \"_validateData\",\n      nullable: false\n    },\n\n    /**\n     * Flag to indicate that data has changed and needs to be saved\n     */\n    dirty: {\n      check: \"Boolean\",\n      init: false,\n      event: \"changeDirty\"\n    },\n\n    /**\n     * Flag to indicate that data has been loaded\n     */\n    loaded: {\n      check: \"Boolean\",\n      init: false,\n      event: \"changeLoaded\"\n    },\n\n    /**\n     * Whether to throw an Error if validation fails (false, default),\n     * or to simply output a warning to the console (true)\n     */\n    warnOnly: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to validate the model data (default: true)\n     */\n    validate: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether to create the file if it doesn't exist yet (default: false)\n     * Setting this to true doesn't automatically create it, you still need to\n     * call save(). It just prevents an error during loading the config data.\n     * Only works if a \"templateFunction\" has been set.\n     */\n    createIfNotExists: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * A function that returns the config file template which is used if no\n     * file exists and the \"createIfNotExists\" property is set to true\n     */\n    templateFunction: {\n      check: \"Function\",\n      nullable: false\n    }\n  },\n\n  members: {\n    /**\n     * The json-schema object\n     */\n    __schema: null,\n\n    /**\n     * Validates the given data against the schema that the model has been\n     * initialized with. Throws if not valid.\n     * @param data The config data\n     * @private\n     */\n    _validateData(data) {\n      if (!this.isValidate() || this.getVersion() === null) {\n        return;\n      }\n      if (!this.__schema) {\n        throw new Error(\n          `Cannot validate - no schema available! Please load the model first.`\n        );\n      }\n      try {\n        qx.tool.utils.Json.validate(data, this.__schema);\n      } catch (e) {\n        let msg = `Error validating data for ${this.getRelativeDataPath()}: ${\n          e.message\n        }`;\n        if (this.isWarnOnly()) {\n          qx.tool.compiler.Console.warn(msg);\n        } else {\n          throw new qx.tool.utils.Utils.UserError(msg);\n        }\n      }\n    },\n\n    /**\n     * The path to the configuration file\n     * @return {String}\n     */\n    getDataPath() {\n      return path.join(this.getBaseDir(), this.getFileName());\n    },\n\n    /**\n     * The path to the configuration file, relative to CWD\n     */\n    getRelativeDataPath() {\n      return path.relative(process.cwd(), this.getDataPath());\n    },\n\n    /**\n     * Returns the part of the schema URI that is identical for all paths\n     * @private\n     */\n    _getSchemaFileName() {\n      let [name, ext] = this.getFileName().split(/\\./);\n      let version = String(semver.coerce(this.getVersion())).replace(\n        /\\./g,\n        \"-\"\n      );\n\n      return `${name}-${version}.${ext}`;\n    },\n\n    /**\n     * Path to the schema json file in the file system\n     * @return {String}\n     */\n    getSchemaPath() {\n      return qx.util.ResourceManager.getInstance().toUri(\n        `qx/tool/schema/${this._getSchemaFileName()}`\n      );\n    },\n\n    /**\n     * Returns the URL of the JSON schema\n     * @return {String}\n     */\n    getSchemaUri() {\n      return (\n        qx.tool.config.Abstract.schemaBaseUrl + \"/\" + this._getSchemaFileName()\n      );\n    },\n\n    /**\n     * Returns the json-schema object\n     * @return {Object}\n     */\n    getSchema() {\n      return this.__schema;\n    },\n\n    /**\n     * Returns true if the config file exists, false if not\n     * @return {Promise<Boolean>}\n     */\n    async exists() {\n      return await fs.existsAsync(this.getDataPath());\n    },\n\n    /**\n     * This method can be used to get the config model singleton in a initialized\n     * state. It loads the config data into the model, unless data has already been\n     * loaded. If no argument is given, load from the file specified when the\n     * instance was created. If an json object is passed, use that data. In both\n     * cases, the data is validated against the schema that the model has been\n     * initialized with, unless it is missing schema information (for\n     * backwards-compatibility). Returns the instance for chaining. To reload\n     * the data, set the \"loaded\" property to false first.\n     *\n     * @param {Object|undefined} data The json data\n     * @return {qx.tool.config.Abstract} Returns the instance for chaining\n     */\n    async load(data = undefined) {\n      if (data === undefined) {\n        if (this.isLoaded()) {\n          // don't load again\n          return this;\n        }\n        if (await fs.existsAsync(this.getDataPath())) {\n          // load data from file\n          data = qx.tool.utils.Json.parseJson(\n            await fs.readFileAsync(this.getDataPath(), \"utf8\")\n          );\n        } else if (this.isCreateIfNotExists()) {\n          // we're supposed to create it, make sure we're in the library root\n          if (await qx.tool.config.Manifest.getInstance().exists()) {\n            // but only if we have a template\n            let templateFunction = this.getTemplateFunction();\n            if (templateFunction) {\n              data = templateFunction.bind(this)();\n              if (!qx.lang.Type.isObject(data)) {\n                throw new Error(\n                  `Template for config file ${this.getRelativeDataPath()} is invalid. Must be an object.`\n                );\n              }\n            } else {\n              throw new Error(\n                `Cannot create config file ${this.getRelativeDataPath()} without a template.`\n              );\n            }\n          } else {\n            throw new Error(\n              `Cannot create config file ${this.getRelativeDataPath()} since no Manifest exists. Are you in the library root?`\n            );\n          }\n        } else {\n          throw new Error(\n            `Cannot load config file: ${this.getRelativeDataPath()} does not exist. Are you in the library root?`\n          );\n        }\n      }\n      // load schema if validation is enabled\n      if (this.isValidate() && this.getVersion() !== null) {\n        // check initial data\n        let dataSchemaInfo = qx.tool.utils.Json.getSchemaInfo(data);\n        if (!dataSchemaInfo) {\n          throw new Error(\n            `Invalid data: no schema found, must be of schema ${this.getSchemaUri()}!`\n          );\n        }\n        let dataVersion = semver.major(semver.coerce(dataSchemaInfo.version));\n        let schemaVersion = semver.major(semver.coerce(this.getVersion()));\n        // use version given in the config file, but warn if we expect a different one\n        if (dataVersion !== schemaVersion) {\n          this.warn(\n            `Possible schema version mismatch in ${this.getDataPath()}: expected v${schemaVersion}, found v${dataVersion}.`\n          );\n\n          if (dataVersion) {\n            this.setVersion(dataSchemaInfo.version);\n          } else {\n            // don't validate if there is no schema\n            this.setValidate(false);\n          }\n        }\n        // load schema\n        if (!this.__schema) {\n          let s = this.getSchemaPath();\n          if (!(await fs.existsAsync(s))) {\n            throw new Error(`No schema file exists at ${this.getSchemaPath()}`);\n          }\n          this.__schema = await qx.tool.utils.Json.loadJsonAsync(s);\n        }\n      }\n      // validate and save\n      this.setData(data);\n      this.setLoaded(true);\n      return this;\n    },\n\n    /**\n     * Returns a value from the configuration map\n     * @param prop_path {String|Array} The property path. See https://github.com/jonschlinkert/get-value#usage\n     * @param options {*?} See https://github.com/jonschlinkert/get-value#options\n     * @return {*}\n     */\n    getValue(prop_path, options) {\n      return get_value(this.getData(), prop_path, options);\n    },\n\n    /**\n     * Sets a value from the configuration map and validates the result against\n     * the json schema of the model\n     * @param prop_path {String|Array} The property path. See https://github.com/jonschlinkert/set-value#usage\n     * @param value {*}\n     * @param options {*?} See https://github.com/jonschlinkert/get-value#options\n     * @return {qx.tool.config.Abstract} Returns the instance for chaining\n     */\n    setValue(prop_path, value, options) {\n      let originalValue = this.getValue(prop_path, options);\n      set_value(this.getData(), prop_path, value, { preservePaths: false });\n      try {\n        this.validate();\n      } catch (e) {\n        // revert change\n        if (originalValue === undefined) {\n          unset_value(this.getData(), prop_path);\n        } else {\n          set_value(this.getData(), prop_path, originalValue, {\n            preservePaths: false\n          });\n        }\n        // throw\n        throw e;\n      }\n      this.setDirty(true);\n      return this;\n    },\n\n    /**\n     * Unsets a property from the configuration map and validates the model\n     * @param prop_path {String|Array} The property path. See https://github.com/jonschlinkert/set-value#usage\n     * @param options {*?} See https://github.com/jonschlinkert/get-value#options\n     * @return {qx.tool.config.Abstract} Returns the instance for chaining\n     */\n    unset(prop_path, options) {\n      let originalValue = this.getValue(prop_path, options);\n      unset_value(this.getData(), prop_path);\n      try {\n        this.validate();\n      } catch (e) {\n        // revert value\n        set_value(this.getData(), prop_path, originalValue, {\n          preservePaths: false\n        });\n\n        // throw\n        throw e;\n      }\n      this.setDirty(true);\n      return this;\n    },\n\n    /**\n     * Transforms a value at a given property path, using a function.\n     * @param prop_path {String|Array}\n     *    The property path. See https://github.com/jonschlinkert/set-value#usage\n     * @param transformFunc {Function}\n     *    The transformation function, which receives the value of the property\n     *    and returns the transformed value, which then is validated and saved.\n     * @param options {*?} See https://github.com/jonschlinkert/get-value#options\n     * @return {qx.tool.config.Abstract} Returns the instance for chaining\n     */\n    transform(prop_path, transformFunc, options) {\n      let transformedValue = transformFunc(this.getValue(prop_path, options));\n      if (transformedValue === undefined) {\n        throw new Error(\n          \"Return value of transformation fuction must not be undefined.\"\n        );\n      }\n      this.setValue(prop_path, transformedValue, options);\n      return this;\n    },\n\n    /**\n     * Given a map containing property paths as keys and arbitrary values,\n     * return the map with values that are true if the property path exists\n     * and false otherwise.\n     * @param propOrMap\n     * @return {boolean|*}\n     */\n    keyExists(propOrMap) {\n      if (qx.lang.Type.isString(propOrMap)) {\n        return this.getValue(propOrMap) !== undefined;\n      } else if (qx.lang.Type.isObject(propOrMap)) {\n        let res = false;\n        for (let key of Object.getOwnPropertyNames(propOrMap)) {\n          propOrMap[key] = this.keyExists(key);\n          res = res || propOrMap[key];\n        }\n        return res;\n      }\n      throw new TypeError(\"Invalid argument\");\n    },\n\n    /**\n     * Validates the stored config model data. Used when data is changed\n     * outside of the API. Will not validate if validate property is false.\n     */\n    validate() {\n      this._validateData(this.getData());\n    },\n\n    /**\n     * Save the data to the config file\n     * @return {Promise<void>}\n     */\n    async save() {\n      this.validate();\n      await qx.tool.utils.Json.saveJsonAsync(\n        this.getDataPath(),\n        this.getData()\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}