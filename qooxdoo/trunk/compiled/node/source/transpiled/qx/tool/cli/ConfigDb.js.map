{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "path",
    "require",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__overrides",
    "properties",
    "nullable",
    "check",
    "apply",
    "members",
    "__db",
    "_applyPath",
    "value",
    "oldValue",
    "load",
    "tool",
    "utils",
    "Json",
    "loadJsonAsync",
    "getPath",
    "save",
    "Utils",
    "makeParentDir",
    "saveJsonAsync",
    "setOverride",
    "key",
    "undefined",
    "db",
    "defaultValue",
    "override",
    "result",
    "segs",
    "split",
    "i",
    "length",
    "seg",
    "tmp",
    "defer",
    "statics",
    "__directory",
    "join",
    "homedir",
    "__instance",
    "getInstance",
    "cli",
    "ConfigDb",
    "setPath",
    "getDirectory"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/ConfigDb.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2018 Zenesis Ltd\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n\n************************************************************************ */\n\nconst path = require(\"path\");\n\n/**\n * Controls access to the local configuration\n */\nqx.Class.define(\"qx.tool.cli.ConfigDb\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n    this.__overrides = {};\n  },\n\n  properties: {\n    path: {\n      nullable: false,\n      check: \"String\",\n      apply: \"_applyPath\"\n    }\n  },\n\n  members: {\n    __db: null,\n    __overrides: null,\n\n    /**\n     * Apply for path property\n     * @returns\n     */\n    async _applyPath(value, oldValue) {\n      this.__db = {};\n    },\n\n    /**\n     * Loads the configuration\n     */\n    async load() {\n      this.__db =\n        (await qx.tool.utils.Json.loadJsonAsync(this.getPath())) || {};\n    },\n\n    /**\n     * Saves the configuration\n     */\n    async save() {\n      await qx.tool.utils.Utils.makeParentDir(this.getPath());\n      await qx.tool.utils.Json.saveJsonAsync(this.getPath(), this.__db);\n    },\n\n    /**\n     * Sets a temporary override\n     */\n    setOverride(key, value) {\n      if (value === undefined) {\n        delete this.__overrides[key];\n      } else {\n        this.__overrides[key] = value;\n      }\n    },\n\n    /**\n     * Returns the database root.  If the `path` parameter is provided, this will try and locate it;\n     * if `defaultValue` is provided then it will create the object and also any intermediate objects\n     * along the way.  If `path` is not returned, then the root object is returned\n     *\n     * @param path {String?} optional path into the database; note array subscripts are not supported\n     * @param defaultValue {Object?} optional value to assign if it does not exist.\n     * @return {Object?} the value\n     */\n    db(path, defaultValue) {\n      if (path) {\n        let override = this.__overrides[path];\n        if (override) {\n          return override;\n        }\n        var result = this.__db;\n        var segs = path.split(\".\");\n        for (var i = 0; i < segs.length; i++) {\n          let seg = segs[i];\n          var tmp = result[seg];\n          if (tmp === undefined) {\n            if (defaultValue === undefined) {\n              return undefined;\n            }\n            if (i == segs.length - 1) {\n              tmp = result[seg] = defaultValue;\n            } else {\n              tmp = result[seg] = {};\n            }\n          }\n          result = tmp;\n        }\n        return result;\n      }\n      return this.__db;\n    }\n  },\n\n  defer(statics) {\n    statics.__directory = path.join(require(\"os\").homedir(), \".qooxdoo/\");\n  },\n\n  statics: {\n    /** Singleton default instance */\n    __instance: null,\n\n    /** The directory where config files (any any other temporary/cached data) is kept */\n    __directory: null,\n\n    /**\n     * Gets the default instance of ConfigDb, loaded with the global config\n     *\n     * @returns {ConfigDb}\n     */\n    async getInstance() {\n      let db = qx.tool.cli.ConfigDb.__instance;\n      if (!db) {\n        db = qx.tool.cli.ConfigDb.__instance = new qx.tool.cli.ConfigDb();\n        db.setPath(\n          path.join(qx.tool.cli.ConfigDb.getDirectory(), \"config.json\")\n        );\n\n        await db.load();\n      }\n      return db;\n    },\n\n    /**\n     * Returns the local directory, where cache and configuration are kept\n     */\n    getDirectory() {\n      return this.__directory;\n    },\n\n    /**\n     * Wrapper for non-static version of db\n     *\n     * @see qx.tool.cli.ConfigDb.db\n     */\n    db(path, defaultValue) {\n      return qx.tool.cli.ConfigDb.getInstance().db(path, defaultValue);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;EAEA;AACA;AACA;;;EACAL,EAAE,CAACM,KAAH,CAASC,MAAT,CAAgB,sBAAhB,EAAwC;IACtCC,MAAM,EAAER,EAAE,CAACS,IAAH,CAAQC,MADsB;;IAGtCC,SAAS,GAAG;MACV;MACA,KAAKC,kBAAL,GAAmB,EAAnB;IACD,CANqC;;IAQtCC,UAAU,EAAE;MACVT,IAAI,EAAE;QACJU,QAAQ,EAAE,KADN;QAEJC,KAAK,EAAE,QAFH;QAGJC,KAAK,EAAE;MAHH;IADI,CAR0B;IAgBtCC,OAAO,EAAE;MACPC,WAAI,EAAE,IADC;MAEPN,kBAAW,EAAE,IAFN;;MAIP;AACJ;AACA;AACA;MACI,MAAMO,UAAN,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkC;QAChC,KAAKH,WAAL,GAAY,EAAZ;MACD,CAVM;;MAYP;AACJ;AACA;MACI,MAAMI,IAAN,GAAa;QACX,KAAKJ,WAAL,GACE,CAAC,MAAMlB,EAAE,CAACuB,IAAH,CAAQC,KAAR,CAAcC,IAAd,CAAmBC,aAAnB,CAAiC,KAAKC,OAAL,EAAjC,CAAP,KAA4D,EAD9D;MAED,CAlBM;;MAoBP;AACJ;AACA;MACI,MAAMC,IAAN,GAAa;QACX,MAAM5B,EAAE,CAACuB,IAAH,CAAQC,KAAR,CAAcK,KAAd,CAAoBC,aAApB,CAAkC,KAAKH,OAAL,EAAlC,CAAN;QACA,MAAM3B,EAAE,CAACuB,IAAH,CAAQC,KAAR,CAAcC,IAAd,CAAmBM,aAAnB,CAAiC,KAAKJ,OAAL,EAAjC,EAAiD,KAAKT,WAAtD,CAAN;MACD,CA1BM;;MA4BP;AACJ;AACA;MACIc,WAAW,CAACC,GAAD,EAAMb,KAAN,EAAa;QACtB,IAAIA,KAAK,KAAKc,SAAd,EAAyB;UACvB,OAAO,KAAKtB,kBAAL,CAAiBqB,GAAjB,CAAP;QACD,CAFD,MAEO;UACL,KAAKrB,kBAAL,CAAiBqB,GAAjB,IAAwBb,KAAxB;QACD;MACF,CArCM;;MAuCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIe,EAAE,CAAC/B,IAAD,EAAOgC,YAAP,EAAqB;QACrB,IAAIhC,IAAJ,EAAU;UACR,IAAIiC,QAAQ,GAAG,KAAKzB,kBAAL,CAAiBR,IAAjB,CAAf;;UACA,IAAIiC,QAAJ,EAAc;YACZ,OAAOA,QAAP;UACD;;UACD,IAAIC,MAAM,GAAG,KAAKpB,WAAlB;UACA,IAAIqB,IAAI,GAAGnC,IAAI,CAACoC,KAAL,CAAW,GAAX,CAAX;;UACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;YACpC,IAAIE,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAd;YACA,IAAIG,GAAG,GAAGN,MAAM,CAACK,GAAD,CAAhB;;YACA,IAAIC,GAAG,KAAKV,SAAZ,EAAuB;cACrB,IAAIE,YAAY,KAAKF,SAArB,EAAgC;gBAC9B,OAAOA,SAAP;cACD;;cACD,IAAIO,CAAC,IAAIF,IAAI,CAACG,MAAL,GAAc,CAAvB,EAA0B;gBACxBE,GAAG,GAAGN,MAAM,CAACK,GAAD,CAAN,GAAcP,YAApB;cACD,CAFD,MAEO;gBACLQ,GAAG,GAAGN,MAAM,CAACK,GAAD,CAAN,GAAc,EAApB;cACD;YACF;;YACDL,MAAM,GAAGM,GAAT;UACD;;UACD,OAAON,MAAP;QACD;;QACD,OAAO,KAAKpB,WAAZ;MACD;;IA1EM,CAhB6B;;IA6FtC2B,KAAK,CAACC,OAAD,EAAU;MACbA,OAAO,CAACC,kBAAR,GAAsB3C,IAAI,CAAC4C,IAAL,CAAU3C,OAAO,CAAC,IAAD,CAAP,CAAc4C,OAAd,EAAV,EAAmC,WAAnC,CAAtB;IACD,CA/FqC;;IAiGtCH,OAAO,EAAE;MACP;MACAI,iBAAU,EAAE,IAFL;;MAIP;MACAH,kBAAW,EAAE,IALN;;MAOP;AACJ;AACA;AACA;AACA;MACI,MAAMI,WAAN,GAAoB;QAClB,IAAIhB,EAAE,GAAGnC,EAAE,CAACuB,IAAH,CAAQ6B,GAAR,CAAYC,QAAZ,CAAqBH,iBAA9B;;QACA,IAAI,CAACf,EAAL,EAAS;UACPA,EAAE,GAAGnC,EAAE,CAACuB,IAAH,CAAQ6B,GAAR,CAAYC,QAAZ,CAAqBH,iBAArB,GAAkC,IAAIlD,EAAE,CAACuB,IAAH,CAAQ6B,GAAR,CAAYC,QAAhB,EAAvC;UACAlB,EAAE,CAACmB,OAAH,CACElD,IAAI,CAAC4C,IAAL,CAAUhD,EAAE,CAACuB,IAAH,CAAQ6B,GAAR,CAAYC,QAAZ,CAAqBE,YAArB,EAAV,EAA+C,aAA/C,CADF;UAIA,MAAMpB,EAAE,CAACb,IAAH,EAAN;QACD;;QACD,OAAOa,EAAP;MACD,CAvBM;;MAyBP;AACJ;AACA;MACIoB,YAAY,GAAG;QACb,OAAO,KAAKR,kBAAZ;MACD,CA9BM;;MAgCP;AACJ;AACA;AACA;AACA;MACIZ,EAAE,CAAC/B,IAAD,EAAOgC,YAAP,EAAqB;QACrB,OAAOpC,EAAE,CAACuB,IAAH,CAAQ6B,GAAR,CAAYC,QAAZ,CAAqBF,WAArB,GAAmChB,EAAnC,CAAsC/B,IAAtC,EAA4CgC,YAA5C,CAAP;MACD;;IAvCM;EAjG6B,CAAxC;EAvBApC,EAAE,CAACuB,IAAH,CAAQ6B,GAAR,CAAYC,QAAZ,CAAqBlD,aAArB,GAAqCA,aAArC"
}