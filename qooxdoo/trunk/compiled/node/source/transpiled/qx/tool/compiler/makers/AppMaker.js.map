{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "log",
    "tool",
    "utils",
    "LogManager",
    "createLog",
    "Class",
    "define",
    "extend",
    "compiler",
    "makers",
    "AbstractAppMaker",
    "construct",
    "className",
    "theme",
    "__applications",
    "app",
    "Application",
    "setTheme",
    "addApplication",
    "members",
    "push",
    "getApplications",
    "make",
    "analyser",
    "getAnalyser",
    "target",
    "getTarget",
    "fireEventAsync",
    "setSuccess",
    "setHasWarnings",
    "success",
    "hasWarnings",
    "compileEnv",
    "Values",
    "merge",
    "ClassFile",
    "ENVIRONMENT_CONSTANTS",
    "config",
    "Utils",
    "getCompilerVersion",
    "getEnvironment",
    "getDefaultEnvironment",
    "preserve",
    "getPreserveEnvironment",
    "tmp",
    "forEach",
    "key",
    "appEnvironments",
    "toHashCode",
    "getCalculatedEnvironment",
    "allAppEnv",
    "env",
    "Object",
    "keys",
    "value",
    "same",
    "undefined",
    "open",
    "setEnvironment",
    "isNoErase",
    "isContextChanged",
    "eraseOutputDir",
    "makeParentDir",
    "getOutputDir",
    "resetDatabase",
    "promisifyThis",
    "initialScan",
    "updateEnvironmentData",
    "setAnalyser",
    "isOutputTypescript",
    "getLibraries",
    "library",
    "symbols",
    "getKnownSymbols",
    "name",
    "type",
    "addClass",
    "getRequiredClasses",
    "getTheme",
    "analyseClasses",
    "saveDatabase",
    "compiledClasses",
    "getRecentlyCompiledClasses",
    "appsThisTime",
    "filter",
    "loadDeps",
    "getDependencies",
    "length",
    "some",
    "Boolean",
    "allAppInfos",
    "db",
    "getDatabase",
    "i",
    "application",
    "getType",
    "Console",
    "print",
    "getName",
    "appEnv",
    "calcDependencies",
    "getFatalCompileErrors",
    "classname",
    "classInfo",
    "markers",
    "marker",
    "getInstance",
    "getMessageType",
    "msgId",
    "appInfo",
    "maker",
    "fireDataEventAsync",
    "generateApplication",
    "targets",
    "TypeScriptWriter",
    "set",
    "outputTo",
    "getOutputTypescriptTo",
    "run",
    "AppMaker"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/compiler/makers/AppMaker.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2017 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\nvar log = qx.tool.utils.LogManager.createLog(\"analyser\");\n\n/**\n * Application maker; supports multiple applications to compile against a single\n * target\n */\nqx.Class.define(\"qx.tool.compiler.makers.AppMaker\", {\n  extend: qx.tool.compiler.makers.AbstractAppMaker,\n\n  /**\n   * Constructor\n   * @param className {String|String[]} classname(s) to generate\n   * @param theme {String} the theme classname\n   */\n  construct(className, theme) {\n    super();\n    this.__applications = [];\n    if (className) {\n      var app = new qx.tool.compiler.app.Application(className);\n      if (theme) {\n        app.setTheme(theme);\n      }\n      this.addApplication(app);\n    }\n  },\n\n  members: {\n    __applications: null,\n\n    /**\n     * Adds an Application to be made\n     * @param app\n     */\n    addApplication(app) {\n      this.__applications.push(app);\n    },\n\n    /**\n     * Returns the array of applications\n     * @returns {Application[]}\n     */\n    getApplications() {\n      return this.__applications;\n    },\n\n    /*\n     * @Override\n     */\n    async make() {\n      var analyser = this.getAnalyser();\n      let target = this.getTarget();\n\n      await this.fireEventAsync(\"making\");\n      this.setSuccess(null);\n      this.setHasWarnings(null);\n      let success = true;\n      let hasWarnings = false;\n\n      // merge all environment settings for the analyser\n      const compileEnv = qx.tool.utils.Values.merge(\n        {},\n        qx.tool.compiler.ClassFile.ENVIRONMENT_CONSTANTS,\n        {\n          \"qx.compiler\": true,\n          \"qx.compiler.version\": qx.tool.config.Utils.getCompilerVersion()\n        },\n\n        this.getEnvironment(),\n        target.getDefaultEnvironment(),\n        target.getEnvironment()\n      );\n\n      let preserve = target.getPreserveEnvironment();\n      if (preserve) {\n        let tmp = {};\n        preserve.forEach(key => (tmp[key] = true));\n        preserve = tmp;\n      } else {\n        preserve = {};\n      }\n\n      let appEnvironments = {};\n      this.getApplications().forEach(app => {\n        appEnvironments[app.toHashCode()] = qx.tool.utils.Values.merge(\n          {},\n          compileEnv,\n          app.getCalculatedEnvironment()\n        );\n      });\n\n      // Analyze the list of environment variables, detect which are shared between all apps\n      let allAppEnv = {};\n      this.getApplications().forEach(app => {\n        let env = appEnvironments[app.toHashCode()];\n        Object.keys(env).forEach(key => {\n          if (!allAppEnv[key]) {\n            allAppEnv[key] = {\n              value: env[key],\n              same: true\n            };\n          } else if (allAppEnv[key].value !== env[key]) {\n            allAppEnv[key].same = false;\n          }\n        });\n      });\n\n      // If an env setting is the same for all apps, move it to the target for code elimination; similarly,\n      //  if it varies between apps, then remove it from the target and make each app specify it individually\n      this.getApplications().forEach(app => {\n        let env = appEnvironments[app.toHashCode()];\n        Object.keys(allAppEnv).forEach(key => {\n          if (preserve[key]) {\n            env[key] = compileEnv[key];\n          } else if (allAppEnv[key].same) {\n            delete env[key];\n          } else if (env[key] === undefined) {\n            env[key] = compileEnv[key];\n          }\n        });\n      });\n\n      // Cleanup to remove env that have been moved to the app\n      Object.keys(allAppEnv).forEach(key => {\n        if (!preserve[key] && allAppEnv[key].same) {\n          compileEnv[key] = allAppEnv[key].value;\n        } else {\n          delete compileEnv[key];\n        }\n      });\n\n      await analyser.open();\n      analyser.setEnvironment(compileEnv);\n      if (!this.isNoErase() && analyser.isContextChanged()) {\n        log.log(\"enviroment changed - delete output dir\");\n        await this.eraseOutputDir();\n        await qx.tool.utils.Utils.makeParentDir(this.getOutputDir());\n        await analyser.resetDatabase();\n      }\n\n      await qx.tool.utils.Utils.promisifyThis(analyser.initialScan, analyser);\n      await analyser.updateEnvironmentData();\n\n      target.setAnalyser(analyser);\n      this.__applications.forEach(app => app.setAnalyser(analyser));\n      await target.open();\n\n      if (this.isOutputTypescript()) {\n        analyser.getLibraries().forEach(library => {\n          var symbols = library.getKnownSymbols();\n          for (var name in symbols) {\n            var type = symbols[name];\n            if (type === \"class\" && name !== \"q\" && name !== \"qxWeb\") {\n              analyser.addClass(name);\n            }\n          }\n        });\n      }\n\n      this.__applications.forEach(function (app) {\n        app.getRequiredClasses().forEach(function (className) {\n          analyser.addClass(className);\n        });\n        if (app.getTheme()) {\n          analyser.addClass(app.getTheme());\n        }\n      });\n      await analyser.analyseClasses();\n\n      await analyser.saveDatabase();\n      await this.fireEventAsync(\"writingApplications\");\n\n      // Detect which applications need to be recompiled by looking for classes recently compiled\n      //  which is on the application's dependency list.  The first time `.make()` is called there\n      //  will be no dependencies so we just compile anyway, but `qx compile --watch` will call it\n      //  multiple times\n      let compiledClasses = this.getRecentlyCompiledClasses(true);\n      var appsThisTime = this.__applications.filter(app => {\n        let loadDeps = app.getDependencies();\n        if (!loadDeps || !loadDeps.length) {\n          return true;\n        }\n        return loadDeps.some(name => Boolean(compiledClasses[name]));\n      });\n\n      let allAppInfos = [];\n\n      let db = analyser.getDatabase();\n      for (let i = 0; i < appsThisTime.length; i++) {\n        let application = appsThisTime[i];\n        if (application.getType() != \"browser\" && !compileEnv[\"qx.headless\"]) {\n          qx.tool.compiler.Console.print(\n            \"qx.tool.compiler.maker.appNotHeadless\",\n            application.getName()\n          );\n        }\n        var appEnv = qx.tool.utils.Values.merge(\n          {},\n          compileEnv,\n          appEnvironments[application.toHashCode()]\n        );\n\n        application.calcDependencies();\n        if (application.getFatalCompileErrors()) {\n          qx.tool.compiler.Console.print(\n            \"qx.tool.compiler.maker.appFatalError\",\n            application.getName()\n          );\n\n          success = false;\n          continue;\n        }\n        if (!hasWarnings) {\n          application.getDependencies().forEach(classname => {\n            if (!db.classInfo[classname] || !db.classInfo[classname].markers) {\n              return;\n            }\n            db.classInfo[classname].markers.forEach(marker => {\n              let type = qx.tool.compiler.Console.getInstance().getMessageType(\n                marker.msgId\n              );\n\n              if (type == \"warning\") {\n                hasWarnings = true;\n              }\n            });\n          });\n        }\n\n        let appInfo = {\n          application,\n          analyser,\n          maker: this\n        };\n\n        allAppInfos.push(appInfo);\n        await this.fireDataEventAsync(\"writingApplication\", appInfo);\n        await target.generateApplication(application, appEnv);\n        await this.fireDataEventAsync(\"writtenApplication\", appInfo);\n      }\n\n      await this.fireDataEventAsync(\"writtenApplications\", allAppInfos);\n      if (this.isOutputTypescript()) {\n        await new qx.tool.compiler.targets.TypeScriptWriter(target)\n          .set({ outputTo: this.getOutputTypescriptTo() })\n          .run();\n      }\n\n      await analyser.saveDatabase();\n      await this.fireEventAsync(\"made\");\n      this.setSuccess(success);\n      this.setHasWarnings(hasWarnings);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}