{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "fs",
    "require",
    "path",
    "process",
    "Octokit",
    "semver",
    "inquirer",
    "glob",
    "Class",
    "define",
    "extend",
    "tool",
    "cli",
    "commands",
    "Package",
    "statics",
    "getYargsCommand",
    "command",
    "describe",
    "builder",
    "type",
    "alias",
    "nargs",
    "choices",
    "split",
    "noninteractive",
    "prerelease",
    "quiet",
    "message",
    "dryrun",
    "force",
    "check",
    "argv",
    "valid",
    "qxVersion",
    "breaking",
    "events",
    "beforeCommit",
    "members",
    "getQxVersion",
    "existsSync",
    "getAppQxVersion",
    "verbose",
    "info",
    "status",
    "utils",
    "Utils",
    "exec",
    "e",
    "UserError",
    "debug",
    "trim",
    "includes",
    "cfg",
    "ConfigDb",
    "getInstance",
    "github",
    "db",
    "token",
    "response",
    "prompt",
    "name",
    "compiler",
    "Console",
    "error",
    "save",
    "octokit",
    "auth",
    "i",
    "__createIndexFile",
    "libraries",
    "version",
    "manifestModels",
    "mainManifestModel",
    "cwd",
    "registryModel",
    "config",
    "Registry",
    "exists",
    "load",
    "getValue",
    "library",
    "manifestModel",
    "Abstract",
    "Manifest",
    "set",
    "baseDir",
    "join",
    "push",
    "main",
    "old_version",
    "new_version",
    "useVersion",
    "coerce",
    "toString",
    "Boolean",
    "inc",
    "tag",
    "url",
    "repo_name",
    "replace",
    "owner",
    "repo",
    "repoExists",
    "repos",
    "getReleaseByTag",
    "result",
    "topics",
    "getAllTopics",
    "data",
    "names",
    "semver_range",
    "qxVersionRange",
    "satisfies",
    "loose",
    "doRelease",
    "question",
    "default",
    "answer",
    "exit",
    "setValue",
    "getRelativeDataPath",
    "JSON",
    "stringify",
    "getData",
    "package_json_path",
    "existsAsync",
    "Json",
    "loadJsonAsync",
    "saveJsonAsync",
    "fireDataEventAsync",
    "run",
    "release_data",
    "tag_name",
    "target_commitish",
    "body",
    "draft",
    "createRelease",
    "topic",
    "replaceAllTopics",
    "Promise",
    "resolve",
    "reject",
    "fileName",
    "matchBase",
    "err",
    "files",
    "length",
    "mainpath",
    "map",
    "p",
    "m",
    "parseJson",
    "readFileSync",
    "summary",
    "value",
    "dirname",
    "package",
    "Publish"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/package/Publish.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\nconst fs = require(\"fs\");\nconst path = require(\"upath\");\nconst process = require(\"process\");\nconst { Octokit } = require(\"@octokit/rest\");\nconst semver = require(\"semver\");\nconst inquirer = require(\"inquirer\");\nconst glob = require(\"glob\");\n\n/**\n * Publishes a release on GitHub\n */\nqx.Class.define(\"qx.tool.cli.commands.package.Publish\", {\n  extend: qx.tool.cli.commands.Package,\n\n  statics: {\n    getYargsCommand() {\n      return {\n        command: \"publish\",\n        describe:\n          \"publishes a new release of the package on GitHub. Requires a GitHub access token. By default, makes a patch release.\",\n        builder: {\n          type: {\n            alias: \"t\",\n            describe: \"Set the release type\",\n            nargs: 1,\n            choices:\n              \"major,premajor,minor,preminor,patch,prepatch,prerelease\".split(\n                /,/\n              ),\n\n            type: \"string\"\n          },\n\n          noninteractive: {\n            alias: \"I\",\n            type: \"boolean\",\n            describe: \"Do not prompt user\"\n          },\n\n          \"use-version\": {\n            alias: \"V\",\n            type: \"string\",\n            describe: \"Use given version number\"\n          },\n\n          prerelease: {\n            type: \"boolean\",\n            alias: \"p\",\n            describe: \"Publish as a prerelease (as opposed to a stable release)\"\n          },\n\n          quiet: {\n            type: \"boolean\",\n            alias: \"q\",\n            describe: \"No output\"\n          },\n\n          message: {\n            alias: \"m\",\n            type: \"string\",\n            describe: \"Set commit/release message\"\n          },\n\n          dryrun: {\n            type: \"boolean\",\n            alias: \"d\",\n            describe: \"Show result only, do not publish to GitHub\"\n          },\n\n          force: {\n            type: \"boolean\",\n            alias: \"f\",\n            describe: \"Ignore warnings (such as demo check)\"\n          },\n\n          \"create-index\": {\n            type: \"boolean\",\n            alias: \"i\",\n            describe:\n              \"Create an index file (qooxdoo.json) with paths to Manifest.json files\"\n          },\n\n          \"qx-version\": {\n            type: \"string\",\n            check: argv => semver.valid(argv.qxVersion),\n            describe:\n              \"A semver string. If given, the qooxdoo version for which to publish the package\"\n          },\n\n          breaking: {\n            type: \"boolean\",\n            describe:\n              \"Do not create a backwards-compatible release, i.e. allow compatibility with current version only\"\n          },\n\n          \"qx-version-range\": {\n            type: \"string\",\n            describe:\n              \"A semver range. If given, it overrides --qx-version and --breaking and sets this specific version range\"\n          }\n        }\n      };\n    }\n  },\n\n  events: {\n    /**\n     * Fired before commit happens. Data is an object with\n     *   version: new_version,\n     *   argv: this.argv\n     */\n    beforeCommit: \"qx.event.type.Data\"\n  },\n\n  members: {\n    /**\n     * Publishes a new release of the package on GitHub, by executing the following steps:\n     *\n     * 1. In Manifest.json, update the qooxdoo-range value to include the version of the qooxdoo\n     *    framework (As per package.json).\n     * 2. In Manifest.json, based the given options, increment the version number (patch,\n     *    feature, breaking).\n     * 3. Create a release with the tag vX.Y.Z according to the current version.\n     * 4. Add \"qooxdoo-package\" to the list of GitHub topics.\n     *\n     */\n    async process() {\n      await super.process();\n      // init\n      const argv = this.argv;\n\n      // qooxdoo version\n      let qxVersion = await this.getQxVersion();\n      if (fs.existsSync(\"Manifest.json\")) {\n        qxVersion = await this.getAppQxVersion();\n      }\n      if (argv.verbose) {\n        this.info(`Using qooxdoo version:  ${qxVersion}`);\n      }\n\n      // check git status\n      let status;\n      try {\n        status = await qx.tool.utils.Utils.exec(\"git status --porcelain\");\n      } catch (e) {\n        throw new qx.tool.utils.Utils.UserError(\n          \"Cannot determine remote repository.\"\n        );\n      }\n      this.debug(status);\n      if (status.trim() !== \"\") {\n        throw new qx.tool.utils.Utils.UserError(\n          \"Please commit or stash all remaining changes first.\"\n        );\n      }\n      status = await qx.tool.utils.Utils.exec(\n        \"git status --porcelain --branch\"\n      );\n\n      this.debug(status);\n      if (status.includes(\"ahead\")) {\n        throw new qx.tool.utils.Utils.UserError(\n          \"Please push all local commits to GitHub first.\"\n        );\n      }\n\n      // token\n      let cfg = await qx.tool.cli.ConfigDb.getInstance();\n      let github = cfg.db(\"github\", {});\n      if (!github.token) {\n        let response = await inquirer.prompt([\n          {\n            type: \"input\",\n            name: \"token\",\n            message:\n              \"Publishing to GitHub requires an API token - visit https://github.com/settings/tokens to obtain one \" +\n              \"(you must assign permission to publish);\\nWhat is your GitHub API Token ? \"\n          }\n        ]);\n\n        if (!response.token) {\n          qx.tool.compiler.Console.error(\n            \"You have not provided a GitHub token.\"\n          );\n\n          return;\n        }\n        github.token = response.token;\n        cfg.save();\n      }\n      let token = github.token;\n      if (!token) {\n        throw new qx.tool.utils.Utils.UserError(\n          `GitHub access token required.`\n        );\n      }\n      const octokit = new Octokit({\n        auth: token\n      });\n\n      // create index file first?\n      if (argv.i) {\n        await this.__createIndexFile(argv);\n      }\n\n      let libraries;\n      let version;\n      let manifestModels = [];\n      let mainManifestModel;\n      const cwd = process.cwd();\n      const registryModel = qx.tool.config.Registry.getInstance();\n      if (await registryModel.exists()) {\n        // we have a qooxdoo.json index file containing the paths of libraries in the repository\n        await registryModel.load();\n        libraries = registryModel.getValue(\"libraries\");\n        for (let library of libraries) {\n          let manifestModel = await new qx.tool.config.Abstract(\n            qx.tool.config.Manifest.config\n          )\n            .set({ baseDir: path.join(cwd, library.path) })\n            .load();\n          manifestModels.push(manifestModel);\n          // use the first manifest or the one with a truthy property \"main\" as reference\n          if (!version || library.main) {\n            version = manifestModel.getValue(\"info.version\");\n            mainManifestModel = manifestModel;\n          }\n        }\n      } else {\n        // read Manifest.json\n        mainManifestModel = await qx.tool.config.Manifest.getInstance().load();\n        manifestModels.push(mainManifestModel);\n        // prevent accidental publication of demo manifest.\n        if (\n          !argv.force &&\n          mainManifestModel.getValue(\"provides.namespace\").includes(\".demo\")\n        ) {\n          throw new qx.tool.utils.Utils.UserError(\n            \"This seems to be the library demo. Please go into the library root directory to publish the library.\"\n          );\n        }\n        libraries = [{ path: \".\" }];\n      }\n\n      // version\n      let old_version = mainManifestModel.getValue(\"info.version\");\n      let new_version;\n      if (argv.useVersion) {\n        // use user-supplied value\n        new_version = semver.coerce(argv.useVersion);\n        if (!new_version) {\n          throw new qx.tool.utils.Utils.UserError(\n            `${argv.useVersion} is not a valid version number.`\n          );\n        }\n        new_version = new_version.toString();\n      } else {\n        // use version number from manifest and increment it\n        if (!semver.valid(old_version)) {\n          throw new qx.tool.utils.Utils.UserError(\n            \"Invalid version number in Manifest. Must be a valid semver version (x.y.z).\"\n          );\n        }\n        if (!argv.type) {\n          argv.type = semver.prerelease(old_version) ? \"prerelease\" : \"patch\";\n        }\n        argv.prerelease =\n          Boolean(argv.prerelease) ||\n          argv.type === \"prerelease\" ||\n          argv.type === \"prepatch\" ||\n          argv.type === \"preminor\" ||\n          argv.type === \"premajor\";\n        new_version = semver.inc(old_version, argv.type);\n      }\n\n      // tag and repo name\n      let tag = `v${new_version}`;\n      let url;\n      try {\n        url = (\n          await qx.tool.utils.Utils.exec(\"git config --get remote.origin.url\")\n        ).trim();\n      } catch (e) {\n        throw new qx.tool.utils.Utils.UserError(\n          \"Cannot determine remote repository.\"\n        );\n      }\n      let repo_name = url\n        .replace(/(https:\\/\\/github.com\\/|git@github.com:)/, \"\")\n        .replace(/\\.git/, \"\");\n      let [owner, repo] = repo_name.split(/\\//);\n      if (argv.verbose) {\n        this.debug(`>>> Repository:  ${repo_name}`);\n      }\n      let repoExists = false;\n      try {\n        await octokit.repos.getReleaseByTag({ owner, repo, tag });\n        repoExists = true;\n      } catch (e) {}\n      if (repoExists) {\n        throw new qx.tool.utils.Utils.UserError(\n          `A release with tag '${tag} already exists.'`\n        );\n      }\n\n      // get topics, this will also check credentials\n      let result;\n      let topics;\n      try {\n        result = await octokit.repos.getAllTopics({ owner, repo });\n        topics = result.data.names;\n      } catch (e) {\n        if (e.message.includes(\"Bad credentials\")) {\n          throw new qx.tool.utils.Utils.UserError(`Your token is invalid.`);\n        }\n        throw e;\n      }\n\n      // semver range of framework dependency\n      let semver_range = this.argv.qxVersionRange; // use CLI-supplied range\n      if (!semver_range) {\n        // no CLI value\n        if (this.argv.breaking) {\n          // use current version only -> breaking\n          semver_range = \"^\" + qxVersion;\n        } else {\n          // get current semver range -> backward-compatible\n          semver_range = mainManifestModel.getValue(\n            \"requires.@qooxdoo/framework\"\n          );\n\n          if (!semver.satisfies(qxVersion, semver_range, { loose: true })) {\n            // make it compatible with current version\n            semver_range = `^${qxVersion} || ${semver_range}`;\n          }\n        }\n      }\n\n      // prompt user to confirm\n      let doRelease = true;\n      if (!argv.noninteractive) {\n        let question = {\n          type: \"confirm\",\n          name: \"doRelease\",\n          message: `This will ${\n            argv.version ? \"set\" : \"increment\"\n          } the version from ${old_version} to ${new_version}, having a dependency on qooxdoo ${semver_range}, and create a release of the current master on GitHub. Do you want to proceed?`,\n          default: \"y\"\n        };\n\n        let answer = await inquirer.prompt(question);\n        doRelease = answer.doRelease;\n      }\n      if (!doRelease) {\n        process.exit(0);\n      }\n\n      // update Manifest(s)\n      for (let manifestModel of manifestModels) {\n        manifestModel\n          .setValue(\"requires.@qooxdoo/framework\", semver_range)\n          .setValue(\"info.version\", new_version);\n        if (argv.dryrun) {\n          if (!argv.quiet) {\n            qx.tool.compiler.Console.info(\n              `Dry run: Not committing ${manifestModel.getRelativeDataPath()} with the following content:`\n            );\n\n            qx.tool.compiler.Console.info(\n              JSON.stringify(manifestModel.getData(), null, 2)\n            );\n          }\n        } else {\n          manifestModel.save();\n        }\n      }\n\n      // package.json, only supported in the root\n      const package_json_path = path.join(process.cwd(), \"package.json\");\n      if (await fs.existsAsync(package_json_path)) {\n        let data = await qx.tool.utils.Json.loadJsonAsync(package_json_path);\n        data.version = new_version;\n        if (this.argv.dryrun) {\n          qx.tool.compiler.Console.info(\n            \"Dry run: Not changing package.json version...\"\n          );\n        } else {\n          await qx.tool.utils.Json.saveJsonAsync(package_json_path, data);\n          if (!this.argv.quiet) {\n            qx.tool.compiler.Console.info(`Updated version in package.json.`);\n          }\n        }\n      }\n\n      await this.fireDataEventAsync(\"beforeCommit\", {\n        version: new_version,\n        argv: this.argv\n      });\n\n      if (argv.dryrun) {\n        qx.tool.compiler.Console.info(\n          `Dry run: not creating tag and release '${tag}' of ${repo_name}...`\n        );\n\n        return;\n      }\n\n      // commit message\n      let message;\n      if (argv.message) {\n        message = argv.message.replace(/\"/g, '\\\\\"');\n      } else if (!argv.noninteractive) {\n        let question = {\n          type: \"input\",\n          name: \"message\",\n          message: `Please enter a commit message:`\n        };\n\n        let answer = await inquirer.prompt([question]);\n        message = answer.message;\n      }\n      if (!message) {\n        message = `Release v${new_version}`;\n      }\n\n      if (!argv.quiet) {\n        qx.tool.compiler.Console.info(\n          `Creating tag and release '${tag}' of ${repo_name}...`\n        );\n      }\n\n      // commit and push\n      const run = qx.tool.utils.Utils.run;\n      try {\n        await run(\"git\", [\"add\", \"--all\"]);\n        await run(\"git\", [\"commit\", `-m \"${message}\"`, \"--allow-empty\"]);\n        await run(\"git\", [\"push\"]);\n        let release_data = {\n          owner,\n          repo,\n          tag_name: tag,\n          target_commitish: \"master\",\n          name: tag,\n          body: message,\n          draft: false,\n          prerelease: argv.prerelease\n        };\n\n        await octokit.repos.createRelease(release_data);\n        if (!argv.quiet) {\n          qx.tool.compiler.Console.info(`Published new version '${tag}'.`);\n        }\n      } catch (e) {\n        throw new qx.tool.utils.Utils.UserError(e.message);\n      }\n      // add GitHub topic\n      const topic = \"qooxdoo-package\";\n      if (!topics.includes(topic)) {\n        topics.push(topic);\n        await octokit.repos.replaceAllTopics({ owner, repo, names: topics });\n        if (!argv.quiet) {\n          qx.tool.compiler.Console.info(`Added GitHub topic '${topic}'.`);\n        }\n      }\n      run(\"git\", [\"pull\"]);\n    },\n\n    /**\n     * Creates a qooxdoo.json file with paths to Manifest.json files in this repository\n     * @private\n     */\n    __createIndexFile: async argv =>\n      new Promise((resolve, reject) => {\n        if (argv.verbose && !argv.quiet) {\n          qx.tool.compiler.Console.info(\"Creating index file...\");\n        }\n        glob(\n          qx.tool.config.Manifest.config.fileName,\n          { matchBase: true },\n          async (err, files) => {\n            if (err) {\n              reject(err);\n            }\n            if (!files || !files.length) {\n              reject(\n                new qx.tool.utils.Utils.UserError(\n                  \"No Manifest.json files could be found\"\n                )\n              );\n            }\n            let mainpath;\n            if (files.length > 1) {\n              let choices = files.map(p => {\n                let m = qx.tool.utils.Json.parseJson(\n                  fs.readFileSync(path.join(process.cwd(), p), \"utf-8\")\n                );\n\n                return {\n                  name:\n                    m.info.name + (m.info.summary ? \": \" + m.info.summary : \"\"),\n                  value: p\n                };\n              });\n              let answer = await inquirer.prompt({\n                name: \"mainpath\",\n                message: \"Please choose the main library\",\n                type: \"list\",\n                choices\n              });\n\n              mainpath = answer.mainpath;\n            }\n            let data = {\n              libraries: files.map(p =>\n                files.length > 1 && p === mainpath\n                  ? {\n                      path: path.dirname(p),\n                      main: true\n                    }\n                  : { path: path.dirname(p) }\n              )\n            };\n\n            // write index file\n            const registryModel = qx.tool.config.Registry.getInstance();\n            if (argv.dryrun) {\n              qx.tool.compiler.Console.info(\n                `Dry run: not creating index file ${registryModel.getRelativeDataPath()} with the following content:`\n              );\n\n              qx.tool.compiler.Console.info(data);\n            } else {\n              await registryModel.load(data);\n              await registryModel.save();\n              if (!argv.quiet) {\n                qx.tool.compiler.Console.info(\n                  `Created index file ${registryModel.getRelativeDataPath()}'.`\n                );\n              }\n            }\n            resolve();\n          }\n        );\n      })\n  }\n});\n"
  ],
  "mappings": "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"
}