{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "__tokenTypes",
    "LEFT_BRACE",
    "RIGHT_BRACE",
    "LEFT_BRACKET",
    "RIGHT_BRACKET",
    "COLON",
    "COMMA",
    "STRING",
    "NUMBER",
    "TRUE",
    "FALSE",
    "NULL",
    "COMMENT",
    "WHITESPACE",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "input",
    "settings",
    "tokens",
    "tokenIndex",
    "members",
    "token",
    "Error",
    "length",
    "next",
    "hasMore",
    "tokenTypes",
    "tool",
    "utils",
    "json",
    "Tokenizer",
    "returnWhitespace",
    "type",
    "tokenize",
    "line",
    "column",
    "index",
    "args",
    "matched",
    "parseWhitespace",
    "parseComment",
    "parseChar",
    "parseKeyword",
    "parseString",
    "parseNumber",
    "value",
    "loc",
    "Parser",
    "location",
    "source",
    "rawValue",
    "push",
    "error",
    "cannotTokenizeSymbol",
    "charAt",
    "statics",
    "punctuatorTokensMap",
    "keywordTokensMap",
    "true",
    "false",
    "null",
    "stringStates",
    "_START_",
    "START_QUOTE_OR_CHAR",
    "ESCAPE",
    "escapes",
    "b",
    "f",
    "n",
    "r",
    "t",
    "u",
    "numberStates",
    "MINUS",
    "ZERO",
    "DIGIT",
    "POINT",
    "DIGIT_FRACTION",
    "EXP",
    "EXP_DIGIT_OR_SIGN",
    "isDigit1to9",
    "char",
    "isDigit",
    "isHex",
    "isExp",
    "symbol",
    "str",
    "substring",
    "startIndex",
    "name",
    "hasOwnProperty",
    "substr",
    "buffer",
    "state",
    "result",
    "verbose",
    "i",
    "curChar",
    "passedValueIndex",
    "iterator",
    "parseFloat"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/utils/json/Tokenizer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2019 Zenesis Limited, http://www.zenesis.com\n *      Vlad Trushin <monospectr@mail.ru> (https://github.com/vtrushin)\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *      * Vlad Trushin (monospectr@mail.ru, @vtrushin)\n *\n * *********************************************************************** */\n\n/* eslint-disable no-labels */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-redeclare */\n/* eslint-disable no-constant-condition */\n/* eslint-disable no-labels */\n\nconst __tokenTypes = {\n  LEFT_BRACE: 0, // {\n  RIGHT_BRACE: 1, // }\n  LEFT_BRACKET: 2, // [\n  RIGHT_BRACKET: 3, // ]\n  COLON: 4, // :\n  COMMA: 5, // ,\n  STRING: 6, //\n  NUMBER: 7, //\n  TRUE: 8, // true\n  FALSE: 9, // false\n  NULL: 10, // null\n  COMMENT: 11,\n  WHITESPACE: 12\n};\n\n/**\n * Tokenizer, based on json-to-ast by Vlad trushin\n */\nqx.Class.define(\"qx.tool.utils.json.Tokenizer\", {\n  extend: qx.core.Object,\n\n  construct(input, settings) {\n    super();\n    this.input = input;\n    this.settings = settings || {};\n    this.tokens = null;\n    this.tokenIndex = -1;\n  },\n\n  members: {\n    token() {\n      if (this.tokens === null) {\n        throw new Error(\"No tokens to return (have you called tokenize?)\");\n      }\n      if (this.tokenIndex >= this.tokens.length) {\n        throw new Error(\"No more tokens available\");\n      }\n      if (this.tokenIndex < 0) {\n        return this.next();\n      }\n      return this.tokens[this.tokenIndex];\n    },\n\n    hasMore() {\n      const tokenTypes = qx.tool.utils.json.Tokenizer.tokenTypes;\n\n      if (this.tokens === null) {\n        throw new Error(\"No tokens to return (have you called tokenize?)\");\n      }\n\n      if (this.settings.returnWhitespace) {\n        return this.tokenIndex < this.tokens.length;\n      }\n\n      var tokenIndex = this.tokenIndex;\n      if (tokenIndex < 0) {\n        tokenIndex = 0;\n      }\n      for (; tokenIndex < this.tokens.length; tokenIndex++) {\n        var token = this.tokens[tokenIndex];\n        if (\n          token.type != tokenTypes.COMMENT &&\n          token.type != tokenTypes.WHITESPACE\n        ) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    next() {\n      const tokenTypes = qx.tool.utils.json.Tokenizer.tokenTypes;\n\n      if (this.tokens === null) {\n        throw new Error(\"No tokens to return (have you called tokenize?)\");\n      }\n      if (this.tokenIndex >= this.tokens.length) {\n        throw new Error(\"No more tokens to get\");\n      }\n\n      if (this.settings.returnWhitespace) {\n        if (this.tokenIndex < this.tokens.length) {\n          return this.tokens[++this.tokenIndex];\n        }\n      } else {\n        for (\n          ++this.tokenIndex;\n          this.tokenIndex < this.tokens.length;\n          this.tokenIndex++\n        ) {\n          var token = this.tokens[this.tokenIndex];\n          if (\n            token.type != tokenTypes.COMMENT &&\n            token.type != tokenTypes.WHITESPACE\n          ) {\n            return token;\n          }\n        }\n      }\n\n      return null;\n    },\n\n    tokenize() {\n      const Tokenizer = qx.tool.utils.json.Tokenizer;\n\n      let line = 1;\n      let column = 1;\n      let index = 0;\n      const tokens = (this.tokens = []);\n      var input = this.input;\n\n      while (index < input.length) {\n        const args = [input, index, line, column, this.settings];\n\n        const matched =\n          Tokenizer.parseWhitespace(...args) ||\n          Tokenizer.parseComment(...args) ||\n          Tokenizer.parseChar(...args) ||\n          Tokenizer.parseKeyword(...args) ||\n          Tokenizer.parseString(...args) ||\n          Tokenizer.parseNumber(...args);\n\n        if (matched) {\n          const token = {\n            type: matched.type,\n            value: matched.value,\n            loc: qx.tool.utils.json.Parser.location(\n              line,\n              column,\n              index,\n              matched.line,\n              matched.column,\n              matched.index,\n              this.settings.source\n            )\n          };\n\n          if (matched.rawValue) {\n            token.rawValue = matched.rawValue;\n          }\n\n          tokens.push(token);\n          index = matched.index;\n          line = matched.line;\n          column = matched.column;\n        } else {\n          qx.tool.utils.json.Parser.error(\n            Tokenizer.cannotTokenizeSymbol(input.charAt(index), line, column),\n            input,\n            line,\n            column\n          );\n        }\n      }\n\n      return tokens;\n    }\n  },\n\n  statics: {\n    tokenTypes: __tokenTypes,\n\n    punctuatorTokensMap: {\n      // Lexeme: Token\n      \"{\": __tokenTypes.LEFT_BRACE,\n      \"}\": __tokenTypes.RIGHT_BRACE,\n      \"[\": __tokenTypes.LEFT_BRACKET,\n      \"]\": __tokenTypes.RIGHT_BRACKET,\n      \":\": __tokenTypes.COLON,\n      \",\": __tokenTypes.COMMA\n    },\n\n    keywordTokensMap: {\n      // Lexeme: Token config\n      true: { type: __tokenTypes.TRUE, value: true },\n      false: { type: __tokenTypes.FALSE, value: false },\n      null: { type: __tokenTypes.NULL, value: null }\n    },\n\n    stringStates: {\n      _START_: 0,\n      START_QUOTE_OR_CHAR: 1,\n      ESCAPE: 2\n    },\n\n    escapes: {\n      '\"': '\"', // Quotation mask\n      \"\\\\\": \"\\\\\", // Reverse solidus\n      \"/\": \"/\", // Solidus\n      b: \"\\b\", // Backspace\n      f: \"\\f\", // Form feed\n      n: \"\\n\", // New line\n      r: \"\\r\", // Carriage return\n      t: \"\\t\", // Horizontal tab\n      u: \"u\" // 4 hexadecimal digits\n    },\n\n    numberStates: {\n      _START_: 0,\n      MINUS: 1,\n      ZERO: 2,\n      DIGIT: 3,\n      POINT: 4,\n      DIGIT_FRACTION: 5,\n      EXP: 6,\n      EXP_DIGIT_OR_SIGN: 7\n    },\n\n    // HELPERS\n\n    isDigit1to9(char) {\n      return char >= \"1\" && char <= \"9\";\n    },\n\n    isDigit(char) {\n      return char >= \"0\" && char <= \"9\";\n    },\n\n    isHex(char) {\n      return (\n        qx.tool.utils.json.Tokenizer.isDigit(char) ||\n        (char >= \"a\" && char <= \"f\") ||\n        (char >= \"A\" && char <= \"F\")\n      );\n    },\n\n    isExp(char) {\n      return char === \"e\" || char === \"E\";\n    },\n\n    // ERRORS\n\n    cannotTokenizeSymbol(symbol, line, column) {\n      return `Cannot tokenize symbol <${symbol}> at ${line}:${column}`;\n    },\n\n    // PARSERS\n\n    parseWhitespace(input, index, line, column) {\n      var value = \"\";\n\n      while (true) {\n        var char = input.charAt(index);\n        if (char === \"\\r\") {\n          // CR (Unix)\n          index++;\n          line++;\n          column = 1;\n          value += char;\n          if (input.charAt(index) === \"\\n\") {\n            // CRLF (Windows)\n            index++;\n            value += \"\\n\";\n          }\n        } else if (char === \"\\n\") {\n          // LF (MacOS)\n          index++;\n          line++;\n          column = 1;\n          value += char;\n        } else if (char === \"\\t\" || char === \" \") {\n          index++;\n          column++;\n          value += char;\n        } else {\n          break;\n        }\n      }\n      if (value.length == 0) {\n        return null;\n      }\n\n      return {\n        index,\n        line,\n        column,\n        type: qx.tool.utils.json.Tokenizer.tokenTypes.WHITESPACE,\n        value: value\n      };\n    },\n\n    parseComment(input, index, line, column) {\n      const str = input.substring(index, index + 2);\n      const startIndex = index;\n\n      if (str === \"/*\") {\n        for (index += 2; index < input.length; index++) {\n          var char = input[index];\n          if (char === \"*\" && input[index + 1] === \"/\") {\n            index += 2;\n            column += 2;\n            break;\n          } else if (char === \"\\r\") {\n            // CR (Unix)\n            index++;\n            line++;\n            column = 1;\n            if (input.charAt(index) === \"\\n\") {\n              // CRLF (Windows)\n              index++;\n            }\n          } else if (char === \"\\n\") {\n            // LF (MacOS)\n            index++;\n            line++;\n            column = 1;\n          } else {\n            column++;\n          }\n        }\n        return {\n          index,\n          line,\n          column,\n          type: qx.tool.utils.json.Tokenizer.tokenTypes.COMMENT,\n          value: input.substring(startIndex, index)\n        };\n      } else if (str === \"//\") {\n        for (index += 2; index < input.length; index++) {\n          var char = input[index];\n          if (char === \"\\r\") {\n            // CR (Unix)\n            index++;\n            line++;\n            column = 1;\n            if (input.charAt(index) === \"\\n\") {\n              // CRLF (Windows)\n              index++;\n            }\n            break;\n          } else if (char === \"\\n\") {\n            // LF (MacOS)\n            index++;\n            line++;\n            column = 1;\n            break;\n          }\n        }\n\n        return {\n          index,\n          line,\n          column,\n          type: qx.tool.utils.json.Tokenizer.tokenTypes.COMMENT,\n          value: input.substring(startIndex, index)\n        };\n      }\n\n      return null;\n    },\n\n    parseChar(input, index, line, column) {\n      const char = input.charAt(index);\n      const punctuatorTokensMap =\n        qx.tool.utils.json.Tokenizer.punctuatorTokensMap;\n\n      if (char in punctuatorTokensMap) {\n        return {\n          type: punctuatorTokensMap[char],\n          line,\n          column: column + 1,\n          index: index + 1,\n          value: char\n        };\n      }\n\n      return null;\n    },\n\n    parseKeyword(input, index, line, column) {\n      const keywordTokensMap = qx.tool.utils.json.Tokenizer.keywordTokensMap;\n\n      for (const name in keywordTokensMap) {\n        if (\n          keywordTokensMap.hasOwnProperty(name) &&\n          input.substr(index, name.length) === name\n        ) {\n          const { type, value } = keywordTokensMap[name];\n\n          return {\n            type,\n            line,\n            column: column + name.length,\n            index: index + name.length,\n            value\n          };\n        }\n      }\n\n      return null;\n    },\n\n    parseString(input, index, line, column, settings) {\n      const { stringStates, tokenTypes, escapes } =\n        qx.tool.utils.json.Tokenizer;\n\n      const startIndex = index;\n      let buffer = \"\";\n      let state = stringStates._START_;\n\n      while (index < input.length) {\n        const char = input.charAt(index);\n\n        switch (state) {\n          case stringStates._START_: {\n            if (char === '\"') {\n              state = stringStates.START_QUOTE_OR_CHAR;\n              index++;\n            } else {\n              return null;\n            }\n            break;\n          }\n\n          case stringStates.START_QUOTE_OR_CHAR: {\n            if (char === \"\\\\\") {\n              state = stringStates.ESCAPE;\n              index++;\n            } else if (char === '\"') {\n              index++;\n              var result = {\n                type: tokenTypes.STRING,\n                line,\n                column: column + index - startIndex,\n                index,\n                value: buffer\n              };\n\n              if (settings.verbose) {\n                result.rawValue = input.substring(startIndex, index);\n              }\n              return result;\n            } else {\n              buffer += char;\n              index++;\n            }\n            break;\n          }\n\n          case stringStates.ESCAPE: {\n            if (char in escapes) {\n              if (char === \"u\") {\n                index++;\n                for (let i = 0; i < 4; i++) {\n                  const curChar = input.charAt(index);\n                  if (curChar && qx.tool.utils.json.Tokenizer.isHex(curChar)) {\n                    buffer += curChar;\n                    index++;\n                  } else {\n                    return null;\n                  }\n                }\n              } else {\n                buffer += escapes[char];\n                index++;\n              }\n              state = stringStates.START_QUOTE_OR_CHAR;\n            } else {\n              return null;\n            }\n            break;\n          }\n        }\n      }\n\n      return null;\n    },\n\n    parseNumber(input, index, line, column) {\n      const numberStates = qx.tool.utils.json.Tokenizer.numberStates;\n\n      const startIndex = index;\n      let passedValueIndex = index;\n      let state = numberStates._START_;\n\n      iterator: while (index < input.length) {\n        const char = input.charAt(index);\n\n        switch (state) {\n          case numberStates._START_: {\n            if (char === \"-\") {\n              state = numberStates.MINUS;\n            } else if (char === \"0\") {\n              passedValueIndex = index + 1;\n              state = numberStates.ZERO;\n            } else if (qx.tool.utils.json.Tokenizer.isDigit1to9(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.DIGIT;\n            } else {\n              return null;\n            }\n            break;\n          }\n\n          case numberStates.MINUS: {\n            if (char === \"0\") {\n              passedValueIndex = index + 1;\n              state = numberStates.ZERO;\n            } else if (qx.tool.utils.json.Tokenizer.isDigit1to9(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.DIGIT;\n            } else {\n              return null;\n            }\n            break;\n          }\n\n          case numberStates.ZERO: {\n            if (char === \".\") {\n              state = numberStates.POINT;\n            } else if (qx.tool.utils.json.Tokenizer.isExp(char)) {\n              state = numberStates.EXP;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.DIGIT: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n            } else if (char === \".\") {\n              state = numberStates.POINT;\n            } else if (qx.tool.utils.json.Tokenizer.isExp(char)) {\n              state = numberStates.EXP;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.POINT: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.DIGIT_FRACTION;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.DIGIT_FRACTION: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n            } else if (qx.tool.utils.json.Tokenizer.isExp(char)) {\n              state = numberStates.EXP;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.EXP: {\n            if (char === \"+\" || char === \"-\") {\n              state = numberStates.EXP_DIGIT_OR_SIGN;\n            } else if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.EXP_DIGIT_OR_SIGN;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.EXP_DIGIT_OR_SIGN: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n        }\n\n        index++;\n      }\n\n      if (passedValueIndex > 0) {\n        return {\n          type: qx.tool.utils.json.Tokenizer.tokenTypes.NUMBER,\n          line,\n          column: column + passedValueIndex - startIndex,\n          index: passedValueIndex,\n          value: parseFloat(input.substring(startIndex, passedValueIndex))\n        };\n      }\n\n      return null;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}