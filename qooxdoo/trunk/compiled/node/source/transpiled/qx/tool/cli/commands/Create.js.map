{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "fs",
    "require",
    "path",
    "inquirer",
    "Class",
    "define",
    "extend",
    "tool",
    "cli",
    "commands",
    "Command",
    "statics",
    "getYargsCommand",
    "command",
    "describe",
    "builder",
    "type",
    "alias",
    "getSkeletonNames",
    "join",
    "nargs",
    "requiresArg",
    "out",
    "namespace",
    "name",
    "theme",
    "default",
    "icontheme",
    "noninteractive",
    "verbose",
    "dir",
    "utils",
    "Utils",
    "getTemplateDir",
    "res",
    "readdirSync",
    "filter",
    "entry",
    "existsSync",
    "e",
    "members",
    "process",
    "argv",
    "data",
    "questions",
    "values",
    "qooxdoo_path",
    "getQxPath",
    "qooxdoo_version",
    "config",
    "getLibraryVersion",
    "compiler",
    "Console",
    "error",
    "message",
    "UserError",
    "template_dir",
    "bind",
    "template_vars",
    "template_vars_path",
    "var_name",
    "Object",
    "getOwnPropertyNames",
    "v",
    "deflt",
    "value",
    "undefined",
    "call",
    "optional",
    "description",
    "push",
    "choices",
    "validate",
    "answer",
    "hash",
    "answers",
    "prompt",
    "match",
    "JSON",
    "stringify",
    "split",
    "map",
    "locale",
    "trim",
    "author_map",
    "authors",
    "a",
    "author",
    "parts",
    "email",
    "pop",
    "repeat",
    "appdir",
    "normalize",
    "parentDir",
    "dirname",
    "accessSync",
    "constants",
    "W_OK",
    "mkdirSync",
    "app_type",
    "skeleton_dir",
    "that",
    "traverseFileSystem",
    "sourceDir",
    "targetDir",
    "files",
    "part",
    "sourceFile",
    "stats",
    "statSync",
    "isFile",
    "targetFile",
    "replace",
    "includes",
    "template",
    "readFileSync",
    "RegExp",
    "info",
    "writeFileSync",
    "copyFileSync",
    "isDirectory",
    "newTargetDir",
    "Create"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/Create.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Christian Boulanger and others\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (info@bibliograph.org, @cboulanger)\n     * Henner Kollmann (hkollmann)\n\n************************************************************************ */\nconst fs = require(\"fs\");\nconst path = require(\"upath\");\nconst inquirer = require(\"inquirer\");\n\n/**\n * Create a new qooxdoo project. This will assemble the information needed to create the\n * new project by the following ways, in order of precedence:\n * 1. use parameters passed to the CLI command via the options\n * 2. if available, retrieve the info from the given environment\n * 3. ask the user the missing values interactively, offering default values where available\n * The variables needed are stored in the templates/template_vars.js file, together\n * with some metadata.\n *\n * Issues: automatic determination of qooxdoo path doesn't work yet.\n */\nqx.Class.define(\"qx.tool.cli.commands.Create\", {\n  extend: qx.tool.cli.commands.Command,\n  statics: {\n    getYargsCommand() {\n      return {\n        command: \"create <application namespace> [options]\",\n        describe: \"create a new qooxdoo project\",\n        builder: {\n          type: {\n            alias: \"t\",\n            describe:\n              \"Type of the application to create. Must be one of \" +\n              this.getSkeletonNames().join(\", \"),\n            nargs: 1,\n            requiresArg: true,\n            type: \"string\"\n          },\n\n          out: {\n            alias: \"o\",\n            describe: \"Output directory for the application content.\"\n          },\n\n          namespace: {\n            alias: \"s\",\n            describe: \"Top-level namespace.\"\n          },\n\n          name: {\n            alias: \"n\",\n            describe: \"Name of application/library (defaults to namespace).\"\n          },\n\n          theme: {\n            describe: \"The name of the theme to be used.\",\n            default: \"indigo\"\n          },\n\n          icontheme: {\n            describe: \"The name of the icon theme to be used.\",\n            default: \"Tango\"\n          },\n\n          noninteractive: {\n            alias: \"I\",\n            describe: \"Do not prompt for missing values\"\n          },\n\n          verbose: {\n            alias: \"v\",\n            describe: \"Verbose logging\"\n          }\n        }\n      };\n    },\n    /**\n     * Returns the names of the skeleton directories in the template folder\n     * @returns {string[]}\n     */\n    getSkeletonNames() {\n      // need access to an non static method...\n      let dir = path.join(qx.tool.utils.Utils.getTemplateDir(), \"skeleton\");\n      let res = fs.readdirSync(dir).filter(entry => {\n        try {\n          return fs.existsSync(`${dir}/${entry}/Manifest.tmpl.json`);\n        } catch (e) {\n          return false;\n        }\n      });\n      return res;\n    }\n  },\n\n  members: {\n    /**\n     * Creates a new qooxdoo application\n     */\n    async process() {\n      // init\n      let argv = this.argv;\n      let data = {};\n      let questions = [];\n      let values = {};\n\n      // qooxdoo path\n      data.qooxdoo_path = await this.getQxPath(); // use CLI options, if available\n\n      // qooxdoo version\n      try {\n        data.qooxdoo_version = await qx.tool.config.Utils.getLibraryVersion(\n          data.qooxdoo_path\n        );\n      } catch (e) {\n        qx.tool.compiler.Console.error(e.message);\n        throw new qx.tool.utils.Utils.UserError(\n          \"Cannot find qooxdoo framework folder.\"\n        );\n      }\n\n      // get map of metdata on variables that need to be inserted in the templates\n      data.template_dir = qx.tool.utils.Utils.getTemplateDir();\n      data.getLibraryVersion = qx.tool.config.Utils.getLibraryVersion.bind(\n        qx.tool.config.Utils\n      );\n\n      let template_vars;\n\n      const template_vars_path = path.join(\n        qx.tool.utils.Utils.getTemplateDir(),\n        \"template_vars\"\n      );\n\n      template_vars = require(template_vars_path)(argv, data);\n\n      // prepare inquirer question data\n      for (let var_name of Object.getOwnPropertyNames(template_vars)) {\n        let v = template_vars[var_name];\n        let deflt = typeof v.default === \"function\" ? v.default() : v.default;\n\n        // we have a final value that doesn't need to be asked for / confirmed.\n        if (v.value !== undefined) {\n          values[var_name] =\n            typeof v.value === \"function\" ? v.value.call(values) : v.value;\n          continue;\n        }\n        // do not ask for optional values in non-interactive mode\n        if (argv.noninteractive) {\n          if (v.optional || deflt) {\n            values[var_name] = deflt;\n            continue;\n          }\n          throw new qx.tool.utils.Utils.UserError(\n            `Cannot skip required value for '${var_name}'.`\n          );\n        }\n        // ask user\n        let message = `Please enter ${v.description} ${\n          v.optional ? \"(optional)\" : \"\"\n        }:`;\n        questions.push({\n          type: v.type || \"input\",\n          choices: v.choices,\n          name: var_name,\n          message,\n          default: v.default,\n          validate:\n            v.validate ||\n            function (answer, hash) {\n              return true;\n            }\n        });\n      }\n\n      // ask user for missing values\n      let answers;\n      try {\n        answers = await inquirer.prompt(questions);\n      } catch (e) {\n        throw new qx.tool.utils.Utils.UserError(e.message);\n      }\n\n      // finalize values\n      for (let var_name of Object.getOwnPropertyNames(template_vars)) {\n        let value = values[var_name];\n\n        // combine preset and inquirer data\n        if (answers[var_name] !== undefined) {\n          value = answers[var_name];\n        }\n\n        // handle special cases\n        switch (var_name) {\n          case \"namespace\":\n            // match valid javascript object accessor TODO: allow unicode characters\n            if (!value.match(/^([a-zA-Z_$][0-9a-zA-Z_$]*\\.?)+$/)) {\n              throw new qx.tool.utils.Utils.UserError(\n                `Illegal characters in namespace \"${value}.\"`\n              );\n            }\n            break;\n\n          case \"locales\":\n            value = JSON.stringify(\n              value.split(/,/).map(locale => locale.trim())\n            );\n\n            break;\n\n          // this sets 'authors' and 'authors_map'\n          case \"authors\": {\n            if (value === undefined) {\n              values.author_map = \"[]\";\n              break;\n            }\n            let authors = value.split(/,/).map(a => a.trim());\n            values.author_map = JSON.stringify(\n              authors.map(author => {\n                let parts = author.split(/ /);\n                let email = parts.pop();\n                return {\n                  name: parts.join(\" \"),\n                  email\n                };\n              }),\n              null,\n              2\n            );\n\n            value = authors.join(\"\\n\" + \" \".repeat(12));\n            break;\n          }\n        }\n\n        // update value\n        values[var_name] = value;\n      }\n\n      // create application folder if it doesn't exist\n      let appdir = path.normalize(values.out);\n      if (!fs.existsSync(appdir)) {\n        let parentDir = path.dirname(appdir);\n        if (!fs.existsSync(parentDir)) {\n          throw new qx.tool.utils.Utils.UserError(\n            `Invalid directory ${appdir}`\n          );\n        }\n        try {\n          fs.accessSync(parentDir, fs.constants.W_OK);\n        } catch (e) {\n          throw new qx.tool.utils.Utils.UserError(\n            `Directory ${parentDir} is not writable.`\n          );\n        }\n        fs.mkdirSync(appdir);\n      }\n\n      // skeleton dir might come from options or was input interactively\n      let app_type = argv.type || values.type;\n      let skeleton_dir = path.join(data.template_dir, \"skeleton\", app_type);\n      if (argv.type && !fs.existsSync(skeleton_dir)) {\n        throw new qx.tool.utils.Utils.UserError(\n          `Application type '${argv.type}' does not exist or has not been implemented yet.`\n        );\n      }\n\n      // copy template, replacing template vars\n      let that = this;\n      function traverseFileSystem(sourceDir, targetDir) {\n        let files = fs.readdirSync(sourceDir);\n        for (let part of files) {\n          let sourceFile = path.join(sourceDir, part);\n          let stats = fs.statSync(sourceFile);\n          if (stats.isFile()) {\n            let targetFile = path.join(targetDir, part.replace(/\\.tmpl/, \"\"));\n            if (sourceFile.includes(\".tmpl\")) {\n              // template file\n              let template = fs.readFileSync(sourceFile, \"utf-8\");\n              for (let var_name in values) {\n                template = template.replace(\n                  new RegExp(`\\\\$\\{${var_name}\\}`, \"g\"),\n                  values[var_name]\n                );\n              }\n              if (argv.verbose) {\n                qx.tool.compiler.Console.info(\n                  `>>> Creating ${targetFile} from template ${sourceFile}...`\n                );\n              }\n              // that.log(template);\n              if (fs.existsSync(targetFile)) {\n                throw new qx.tool.utils.Utils.UserError(\n                  `${targetFile} already exists.`\n                );\n              }\n              fs.writeFileSync(targetFile, template, \"utf-8\");\n            } else {\n              // normal file\n              if (argv.verbose) {\n                qx.tool.compiler.Console.info(\n                  `>>> Copying ${sourceFile} to ${targetFile}...`\n                );\n              }\n              fs.copyFileSync(sourceFile, targetFile);\n            }\n          } else if (stats.isDirectory()) {\n            let newTargetDir = targetDir;\n            // replace \"custon\" with namespace, creating namespaced folders in the \"class\" dir, but not anywhere else\n            let parts =\n              part === \"custom\" ? values.namespace.split(/\\./) : [part];\n            for (let part of parts) {\n              newTargetDir = path.join(newTargetDir, part);\n              fs.mkdirSync(newTargetDir);\n            }\n            traverseFileSystem(sourceFile, newTargetDir);\n          }\n        }\n      }\n      // go\n      traverseFileSystem.bind(this)(skeleton_dir, appdir);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}