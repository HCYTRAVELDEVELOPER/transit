{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "download",
    "require",
    "fs",
    "tool",
    "utils",
    "Promisify",
    "path",
    "process",
    "semver",
    "rimraf",
    "Class",
    "define",
    "extend",
    "cli",
    "commands",
    "Package",
    "statics",
    "getYargsCommand",
    "command",
    "describe",
    "builder",
    "release",
    "alias",
    "nargs",
    "requiresArg",
    "type",
    "ignore",
    "verbose",
    "quiet",
    "save",
    "default",
    "check",
    "argv",
    "valid",
    "qxVersion",
    "members",
    "__cacheUpdated",
    "install",
    "library_uri",
    "release_tag",
    "installee",
    "compiler",
    "Console",
    "info",
    "uri",
    "fromPath",
    "installFromLocaPath",
    "local_path",
    "isAbsolute",
    "join",
    "cwd",
    "isInstalled",
    "getLockfileModel",
    "getValue",
    "some",
    "lib",
    "undefined",
    "repo_tag",
    "__updateCache",
    "manifestModel",
    "lockfileModel",
    "_getConfigData",
    "length",
    "__downloadLibrariesInLockfile",
    "__installDependenciesFromManifest",
    "getData",
    "_saveConfigData",
    "id",
    "split",
    "Utils",
    "UserError",
    "saveToManifest",
    "__installFromPath",
    "lang",
    "Type",
    "isString",
    "startsWith",
    "__installFromRelease",
    "__installFromTree",
    "repos_cache",
    "getCache",
    "repos",
    "list",
    "clearCache",
    "package",
    "Update",
    "List",
    "__getUriInfo",
    "parts",
    "repo_name",
    "slice",
    "package_path",
    "data",
    "tag_name",
    "writeToManifest",
    "getAppQxVersion",
    "replace",
    "cache",
    "compat",
    "options",
    "all",
    "warn",
    "download_path",
    "__download",
    "found",
    "repo_data",
    "release_data",
    "releases",
    "manifest_path",
    "manifests",
    "dirname",
    "__updateInstalledLibraryData",
    "hash",
    "dir",
    "library_path",
    "config",
    "Manifest",
    "fileName",
    "existsSync",
    "Json",
    "parseJson",
    "readFileSync",
    "relative",
    "library_name",
    "name",
    "library_version",
    "version",
    "index",
    "findIndex",
    "elem",
    "setValue",
    "transform",
    "libs",
    "push",
    "appsInstalled",
    "__installApplication",
    "depsInstalled",
    "__installDependenciesFromPath",
    "downloadPath",
    "manifest_file",
    "manifest",
    "loadJsonAsync",
    "requires",
    "lib_uri",
    "Object",
    "getOwnPropertyNames",
    "lib_range",
    "satisfies",
    "loose",
    "validRange",
    "tag",
    "__getHighestCompatibleVersion",
    "e",
    "message",
    "version2release",
    "versionList",
    "map",
    "isObject",
    "debug",
    "filter",
    "Boolean",
    "highestCompatibleVersion",
    "maxSatisfying",
    "provides",
    "application",
    "manifestApp",
    "compileConfigModel",
    "Compile",
    "getInstance",
    "exists",
    "load",
    "app",
    "find",
    "apps",
    "concat",
    "isDirty",
    "Lockfile",
    "libraries",
    "getLockfileData",
    "Promise",
    "treeish",
    "force",
    "core",
    "Assert",
    "assertNotNull",
    "url",
    "dir_name",
    "cache_dir",
    "dir_exists",
    "reduce",
    "prev",
    "current",
    "sep",
    "mkdirSync",
    "extract",
    "strip",
    "sync",
    "error",
    "exit",
    "Install"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/package/Install.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017-2021 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\n\nconst download = require(\"download\");\nconst fs = qx.tool.utils.Promisify.fs;\nconst path = require(\"upath\");\nconst process = require(\"process\");\nconst semver = require(\"semver\");\nconst rimraf = require(\"rimraf\");\n\n/**\n * Installs a package\n */\nqx.Class.define(\"qx.tool.cli.commands.package.Install\", {\n  extend: qx.tool.cli.commands.Package,\n\n  statics: {\n    /**\n     * Yarg commands data\n     * @return {{}}\n     */\n    getYargsCommand() {\n      return {\n        command: \"install [uri[@release_tag]]\",\n        describe: `installs the latest compatible release of package (as per Manifest.json). Use \"-r <release tag>\" or @<release tag> to install a particular release.\n        examples:\n           * qx package install name: Install latest published version\n           * qx package install name@v0.0.2: Install version 0.0.2,\n           * qx package install name@master: Install current master branch from github`,\n        builder: {\n          release: {\n            alias: \"r\",\n            describe:\n              \"Use a specific release tag instead of the tag of the latest compatible release\",\n            nargs: 1,\n            requiresArg: true,\n            type: \"string\"\n          },\n\n          ignore: {\n            alias: \"i\",\n            describe: \"Ignore unmatch of qooxdoo\"\n          },\n\n          verbose: {\n            alias: \"v\",\n            describe: \"Verbose logging\"\n          },\n\n          quiet: {\n            alias: \"q\",\n            describe: \"No output\"\n          },\n\n          save: {\n            alias: \"s\",\n            default: false,\n            describe: \"Save the libraries as permanent dependencies\"\n          },\n\n          \"from-path\": {\n            alias: \"p\",\n            nargs: 1,\n            describe: \"Install a library/the given library from a local path\"\n          },\n\n          \"qx-version\": {\n            check: argv => semver.valid(argv.qxVersion),\n            describe:\n              \"A semver string. If given, the maximum qooxdoo version for which to install a package\"\n          }\n        }\n      };\n    }\n  },\n\n  members: {\n    /**\n     * @var {Boolean}\n     */\n    __cacheUpdated: false,\n\n    /**\n     * API method to install a library via its URI and version tag\n     * @param {String} library_uri\n     * @param {String} release_tag\n     * @return {Promise<void>}\n     */\n    async install(library_uri, release_tag) {\n      let installee = library_uri + (release_tag ? \"@\" + release_tag : \"\");\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(`>>> To be installed: ${installee}`);\n      }\n      this.argv.uri = installee;\n      this.argv.fromPath = false;\n      await this.process();\n    },\n\n    /**\n     * API method to install a library from a local path\n     * @param {String} local_path\n     * @param {String} library_uri Optional library URI.\n     * @return {Promise<void>}\n     */\n    async installFromLocaPath(local_path, library_uri) {\n      if (!path.isAbsolute(local_path)) {\n        local_path = path.join(process.cwd(), local_path);\n      }\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> To be installed: ${\n            library_uri || \"local libarary\"\n          } from ${local_path}`\n        );\n      }\n      this.argv.uri = library_uri;\n      this.argv.fromPath = local_path;\n      await this.process();\n    },\n\n    /**\n     * API method to check if a library has been installed\n     * @param {String} library_uri\n     * @param {String} release_tag\n     * @return {Promise<Boolean>}\n     */\n    async isInstalled(library_uri, release_tag) {\n      return (await this.getLockfileModel())\n        .getValue(\"libraries\")\n        .some(\n          lib =>\n            lib.uri === library_uri &&\n            (release_tag === undefined || release_tag === lib.repo_tag)\n        );\n    },\n\n    /**\n     * Installs a package\n     */\n    async process() {\n      await super.process();\n      await this.__updateCache();\n      const [manifestModel, lockfileModel] = await this._getConfigData();\n\n      // create shorthand for uri@id\n      this.argv.uri = this.argv.uri || this.argv[\"uri@release_tag\"];\n\n      // if no library uri has been passed, install from lockfile or manifest\n\n      if (!this.argv.uri && !this.argv.fromPath) {\n        if (lockfileModel.getValue(\"libraries\").length) {\n          await this.__downloadLibrariesInLockfile();\n        } else {\n          await this.__installDependenciesFromManifest(manifestModel.getData());\n          await this._saveConfigData();\n        }\n        return;\n      }\n\n      // library uri and id, which can be none (=latest), version, or tree-ish expression\n      let uri = this.argv.uri;\n      let id;\n      if (this.argv.release) {\n        id = this.argv.release;\n      } else if (uri) {\n        [uri, id] = uri.split(/@/);\n      }\n\n      // prepend \"v\" to valid semver strings\n      if (semver.valid(id) && id[0] !== \"v\") {\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(`>>> Prepending \"v\" to ${id}.`);\n        }\n        id = `v${id}`;\n      }\n\n      if (this.argv.fromPath) {\n        // install from local path?\n        if (id) {\n          throw new qx.tool.utils.Utils.UserError(\n            `Version identifier cannot be used when installing from local path.`\n          );\n        }\n        let saveToManifest = uri ? this.argv.save : false;\n        await this.__installFromPath(uri, this.argv.fromPath, saveToManifest);\n      } else if (!id || (qx.lang.Type.isString(id) && id.startsWith(\"v\"))) {\n        // install library/libraries from GitHub release\n        await this.__installFromRelease(uri, id, this.argv.save);\n      } else {\n        // install library from GitHub code tree\n        await this.__installFromTree(uri, id, this.argv.save);\n      }\n\n      await this._saveConfigData();\n\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\">>> Done.\");\n      }\n    },\n\n    /**\n     * Update repo cache\n     * @return {Promise<void>}\n     * @private\n     */\n    async __updateCache() {\n      let repos_cache = this.getCache().repos;\n      if (repos_cache.list.length === 0) {\n        if (!this.argv.quiet) {\n          qx.tool.compiler.Console.info(\">>> Updating cache...\");\n        }\n        this.clearCache();\n        // implicit update\n        await new qx.tool.cli.commands.package.Update({\n          quiet: true\n        }).process();\n        await new qx.tool.cli.commands.package.List({ quiet: true }).process();\n      }\n    },\n\n    /**\n     * Returns information on the given URI\n     * @param {String} uri\n     * @return {{package_path: string | string, repo_name: string}}\n     * @private\n     */\n    __getUriInfo(uri) {\n      if (!uri) {\n        throw new qx.tool.utils.Utils.UserError(\n          \"No package resource identifier given\"\n        );\n      }\n      // currently, the uri is github_username/repo_name[/path/to/repo].\n      let parts = uri.split(/\\//);\n      let repo_name = parts.slice(0, 2).join(\"/\");\n      let package_path = parts.length > 2 ? parts.slice(2).join(\"/\") : \"\";\n      if (!this.getCache().repos.data[repo_name]) {\n        throw new qx.tool.utils.Utils.UserError(\n          `A repository '${repo_name}' cannot be found.`\n        );\n      }\n      return {\n        repo_name,\n        package_path\n      };\n    },\n\n    /**\n     * Installs libraries in a repository from a given release tag name\n     * @param {String} uri The name of the repository (e.g. qooxdoo/qxl.apiviewer),\n     *  or of a library within a repository (such as ergobyte/qookery/qookeryace)\n     * @param {String} tag_name The tag name of the release, such as \"v1.1.0\"\n     * @param {Boolean} writeToManifest Whether the library should be written to\n     * Manifest.json as a dependency\n     * @return {Promise<void>}\n     * @private\n     */\n    async __installFromRelease(uri, tag_name, writeToManifest) {\n      let qxVersion = (await this.getAppQxVersion()).replace(\"-beta\", \"\");\n      let { repo_name, package_path } = this.__getUriInfo(uri);\n      if (!tag_name) {\n        let cache = this.getCache();\n        if (cache.compat[qxVersion] === undefined) {\n          if (this.argv.verbose && !this.argv.quiet) {\n            qx.tool.compiler.Console.info(\">>> Updating cache...\");\n          }\n          let options = { quiet: true, all: true, qxVersion };\n          await new qx.tool.cli.commands.package.List(options).process();\n          cache = this.getCache(true);\n        }\n        tag_name =\n          cache.compat[qxVersion] && cache.compat[qxVersion][repo_name];\n        if (!tag_name) {\n          qx.tool.compiler.Console.warn(\n            `'${repo_name}' has no (stable) release compatible with qooxdoo version ${qxVersion}.\n             To install anyways, use '--release <release>' or 'qx install ${repo_name}@<release>'.\n             Please ask the library maintainer to release a compatible version.`\n          );\n\n          return;\n        }\n      }\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> Installing '${uri}', release '${tag_name}' for qooxdoo version: ${qxVersion}`\n        );\n      }\n      let { download_path } = await this.__download(repo_name, tag_name);\n      // iterate over contained libraries\n      let found = false;\n      let repo_data = this.getCache().repos.data[repo_name];\n      if (!repo_data) {\n        throw new qx.tool.utils.Utils.UserError(\n          `A repository '${repo_name}' cannot be found.`\n        );\n      }\n      let release_data = repo_data.releases.data[tag_name];\n      if (!release_data) {\n        throw new qx.tool.utils.Utils.UserError(\n          `'${repo_name}' has no release '${tag_name}'.`\n        );\n      }\n      // TO DO: the path in the cache data should be the path to the library containing Manifest.json, not to the Manifest.json itself\n      for (let { path: manifest_path } of release_data.manifests) {\n        if (package_path && path.dirname(manifest_path) !== package_path) {\n          // if a path component exists, only install the library in this path\n          continue;\n        }\n        let library_uri = path.join(repo_name, path.dirname(manifest_path));\n        found = true;\n        await this.__updateInstalledLibraryData(\n          library_uri,\n          tag_name,\n          download_path,\n          writeToManifest\n        );\n      }\n      if (!found) {\n        throw new qx.tool.utils.Utils.UserError(\n          `The package/library identified by '${uri}' could not be found.`\n        );\n      }\n    },\n\n    /**\n     * Installs libraries in a given repository from the given hash of a code tree\n     * independent from the library cache. This ignores dependency constraints.\n     * The given uri must point to a folder containing Manifest.json\n     * @param {String} uri\n     *  The path to a library in a a repository\n     *  (e.g. qooxdoo/qxl.apiviewer or ergobyte/qookery/qookeryace)\n     * @param {String} hash\n     *  A path into the code tree on GitHub such as \"tree/892f44d1d1ae5d65c7dd99b18da6876de2f2a920\"\n     * @param {Boolean} writeToManifest Whether the library should be written to\n     * Manifest.json as a dependency\n     * @return {Promise<void>}\n     * @private\n     */\n    async __installFromTree(uri, hash, writeToManifest) {\n      let qxVersion = await this.getAppQxVersion();\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> Installing '${uri}' from tree hash '${hash}' for qooxdoo version ${qxVersion}`\n        );\n      }\n      let { repo_name } = this.__getUriInfo(uri);\n      let { download_path } = await this.__download(repo_name, hash);\n      await this.__updateInstalledLibraryData(\n        uri,\n        hash,\n        download_path,\n        writeToManifest\n      );\n    },\n\n    /**\n     * Installs libraries from a local path\n     * @param {String} uri\n     *  The URI identifying a library (e.g. qooxdoo/qxl.apiviewer or\n     *  ergobyte/qookery/qookeryace)\n     * @param {String} dir\n     *  The path to a local directory\n     * @param {Boolean} writeToManifest\n     *  Whether the library should be written to Manifest.json as a dependency\n     * @return {Promise<void>}\n     * @private\n     */\n    async __installFromPath(uri, dir, writeToManifest = false) {\n      let qxVersion = await this.getAppQxVersion();\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> Installing '${uri}' from '${dir}' for qooxdoo version ${qxVersion}`\n        );\n      }\n      await this.__updateInstalledLibraryData(\n        uri,\n        undefined,\n        dir,\n        writeToManifest\n      );\n    },\n\n    /**\n     * Updates the data in the lockfile and (optionally) in the manifest\n     * @param {String} uri The path to a library in a a repository\n     * (e.g. qooxdoo/qxl.apiviewer or ergobyte/qookery/qookeryace)\n     * @param {String} id\n     *  The tag name of a release such as \"v1.1.0\" or a tree hash such as\n     *  tree/892f44d1d1ae5d65c7dd99b18da6876de2f2a920\n     * @param {String} download_path The path to the downloaded repository\n     * @param {Boolean} writeToManifest\n     *  Whether the library should be written to Manifest.json as a dependency\n     * @return {Promise<void>}\n     * @private\n     */\n    async __updateInstalledLibraryData(\n      uri,\n      id,\n      download_path,\n      writeToManifest\n    ) {\n      let { repo_name, package_path } = uri\n        ? this.__getUriInfo(uri)\n        : { repo_name: \"\", package_path: \"\" };\n      const [manifestModel, lockfileModel] = await this._getConfigData();\n      let library_path = path.join(download_path, package_path);\n      let manifest_path = path.join(\n        library_path,\n        qx.tool.config.Manifest.config.fileName\n      );\n\n      if (!fs.existsSync(manifest_path)) {\n        throw new qx.tool.utils.Utils.UserError(\n          `No manifest file in '${library_path}'.`\n        );\n      }\n      let { info } = qx.tool.utils.Json.parseJson(\n        fs.readFileSync(manifest_path, \"utf-8\")\n      );\n\n      let local_path = path.relative(process.cwd(), library_path);\n      // create entry\n      let lib = {\n        library_name: info.name,\n        library_version: info.version,\n        path: local_path\n      };\n\n      if (uri) {\n        lib.uri = uri;\n      }\n      // remote library info\n      if (repo_name) {\n        lib.repo_name = repo_name;\n        if (id) {\n          lib.repo_tag = id;\n        }\n      }\n\n      // do we already have an entry for the library that matches either the URI or the local path?\n      let index = lockfileModel\n        .getValue(\"libraries\")\n        .findIndex(\n          elem =>\n            (uri && elem.uri === uri) || (!uri && elem.path === local_path)\n        );\n\n      if (index >= 0) {\n        lockfileModel.setValue([\"libraries\", index], lib);\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(\n            `>>> Updating already existing lockfile entry for ${info.name}, ${\n              info.version\n            }, installed from '${uri ? uri : local_path}'.`\n          );\n        }\n      } else {\n        lockfileModel.transform(\"libraries\", libs => libs.push(lib) && libs);\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(\n            `>>> Added new lockfile entry for ${info.name}, ${\n              info.version\n            }, installed from '${uri ? uri : local_path}'.`\n          );\n        }\n      }\n      if (writeToManifest) {\n        manifestModel.setValue([\"requires\", uri], \"^\" + info.version);\n      }\n      let appsInstalled = await this.__installApplication(library_path);\n      if (!appsInstalled && this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> No applications installed for ${uri}.`\n        );\n      }\n      let depsInstalled = await this.__installDependenciesFromPath(\n        library_path\n      );\n\n      if (!depsInstalled && this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> No dependencies installed for ${uri}.`\n        );\n      }\n      if (!this.argv.quiet) {\n        qx.tool.compiler.Console.info(\n          `Installed ${info.name} (${uri}, ${info.version})`\n        );\n      }\n    },\n\n    /**\n     * Given a download path of a library, install its dependencies\n     * @param {String} downloadPath\n     * @return {Promise<Boolean>} Wether any libraries were installed\n     */\n    async __installDependenciesFromPath(downloadPath) {\n      let manifest_file = path.join(\n        downloadPath,\n        qx.tool.config.Manifest.config.fileName\n      );\n\n      let manifest = await qx.tool.utils.Json.loadJsonAsync(manifest_file);\n      if (!manifest.requires) {\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(\n            `>>> ${manifest_file} does not contain library dependencies.`\n          );\n        }\n        return false;\n      }\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> Installing libraries from ${manifest_file}.`\n        );\n      }\n      return this.__installDependenciesFromManifest(manifest);\n    },\n\n    /**\n     * Given a library's manifest data, install its dependencies\n     * @param {Object} manifest\n     * @return {Promise<Boolean>} Wether any libraries were installed\n     */\n    async __installDependenciesFromManifest(manifest) {\n      for (let lib_uri of Object.getOwnPropertyNames(manifest.requires)) {\n        let lib_range = manifest.requires[lib_uri];\n        switch (lib_uri) {\n          case \"@qooxdoo/compiler\":\n          case \"qooxdoo-sdk\":\n          case \"qooxdoo-compiler\":\n            // ignore legacy entries\n            break;\n          case \"@qooxdoo/framework\": {\n            let qxVersion = await this.getAppQxVersion();\n            if (\n              !semver.satisfies(qxVersion, lib_range, { loose: true }) &&\n              this.argv.ignore\n            ) {\n              throw new qx.tool.utils.Utils.UserError(\n                `Library '${lib_uri}' needs @qooxdoo/framework version ${lib_range}, found ${qxVersion}`\n              );\n            }\n            break;\n          }\n          default: {\n            // version info is semver range -> released version\n            if (semver.validRange(lib_range)) {\n              let { tag } = this.__getHighestCompatibleVersion(\n                lib_uri,\n                lib_range\n              );\n\n              if (!tag) {\n                throw new qx.tool.utils.Utils.UserError(\n                  `No satisfying release found for ${lib_uri}@${lib_range}!`\n                );\n              }\n              if (!(await this.isInstalled(lib_uri, tag))) {\n                await this.__installFromRelease(lib_uri, tag, false);\n                break;\n              }\n              if (this.argv.verbose) {\n                qx.tool.compiler.Console.info(\n                  `>>> ${lib_uri}@${tag} is already installed.`\n                );\n              }\n              break;\n            }\n            // treat version info as tree-ish identifier\n            if (!(await this.isInstalled(lib_uri, lib_range))) {\n              try {\n                await this.__installFromTree(lib_uri, lib_range, false);\n                break;\n              } catch (e) {\n                throw new qx.tool.utils.Utils.UserError(\n                  `Could not install ${lib_uri}@${lib_range}: ${e.message}`\n                );\n              }\n            }\n            if (this.argv.verbose) {\n              qx.tool.compiler.Console.info(\n                `>>> ${lib_uri}@${lib_range} is already installed.`\n              );\n            }\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Given the URI of a library repo and a semver range, returns the highest\n     * version compatible with the semver range and the release tag containing\n     * this version.\n     * @param {String} lib_uri The URI of the library\n     * @param {String} lib_range The semver range\n     * @return {Object} Returns an object with the keys \"tag\" and \"version\"\n     * @private\n     */\n    __getHighestCompatibleVersion(lib_uri, lib_range) {\n      let { repo_name } = this.__getUriInfo(lib_uri);\n      let lib = this.getCache().repos.data[repo_name];\n      if (!lib) {\n        throw new qx.tool.utils.Utils.UserError(\n          `${lib_uri} is not in the library registry!`\n        );\n      }\n      // map version to release (this helps with prereleases)\n      let version2release = {};\n      let versionList = lib.releases.list\n        .map(tag => {\n          // all libraries in a package MUST have the same version\n          let manifest = lib.releases.data[tag].manifests[0];\n          if (\n            !qx.lang.Type.isObject(manifest) ||\n            !qx.lang.Type.isObject(manifest.info) ||\n            !manifest.info.version\n          ) {\n            this.debug(`${repo_name}/${tag}: Invalid Manifest!`);\n            return null;\n          }\n          let version = manifest.info.version;\n          version2release[version] = tag;\n          return version;\n        })\n        .filter(version => Boolean(version));\n      let highestCompatibleVersion = semver.maxSatisfying(\n        versionList,\n        lib_range,\n        { loose: true }\n      );\n\n      return {\n        version: highestCompatibleVersion,\n        tag: version2release[highestCompatibleVersion]\n      };\n    },\n\n    /**\n     * Given the download path of a library, install its applications\n     * todo use config API, use compile.js where it exists\n     * @param {String} downloadPath\n     * @return {Promise<Boolean>} Returns true if applications were installed\n     */\n    async __installApplication(downloadPath) {\n      let manifest = await qx.tool.utils.Json.loadJsonAsync(\n        path.join(downloadPath, qx.tool.config.Manifest.config.fileName)\n      );\n\n      if (!manifest.provides || !manifest.provides.application) {\n        return false;\n      }\n      let manifestApp = manifest.provides.application;\n      const compileConfigModel = await qx.tool.config.Compile.getInstance();\n      if (!(await compileConfigModel.exists())) {\n        qx.tool.compiler.Console.info(\n          \">>> Cannot install application \" +\n            (manifestApp.name || manifestApp[\"class\"]) +\n            \" because compile.json does not exist (you must manually add it)\"\n        );\n\n        return false;\n      }\n      await compileConfigModel.load();\n      let app = compileConfigModel.getValue(\"applications\").find(app => {\n        if (manifestApp.name && app.name) {\n          return manifestApp.name === app.name;\n        }\n        return manifestApp[\"class\"] === app[\"class\"];\n      });\n      if (!app) {\n        compileConfigModel.transform(\"applications\", apps =>\n          apps.concat([manifestApp])\n        );\n\n        app = manifestApp;\n      }\n      if (compileConfigModel.isDirty()) {\n        await compileConfigModel.save();\n      }\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          \">>> Installed application \" + (app.name || app[\"class\"])\n        );\n      }\n      return true;\n    },\n\n    /**\n     * Download repos listed in the lockfile\n     * @return {Promise<void>}\n     * @private\n     */\n    async __downloadLibrariesInLockfile() {\n      if (this.argv.verbose) {\n        qx.tool.compiler.Console.info(\n          `>>> Downloading libraries listed in ${qx.tool.config.Lockfile.config.fileName}...`\n        );\n      }\n      let libraries = (await this.getLockfileData()).libraries;\n      return qx.Promise.all(\n        libraries\n          .filter(lib => lib.repo_name && lib.repo_tag)\n          .map(lib => this.__download(lib.repo_name, lib.repo_tag))\n      );\n    },\n\n    /**\n     * Downloads a release\n     * @return {Object} A map containing {release_data, download_path}\n     * @param {String} repo_name The name of the repository\n     * @param {String} treeish\n     *  If prefixed by \"v\", the name of a release tag. Otherwise, arbitrary\n     *  tree-ish expression (see https://help.github.com/en/articles/getting-permanent-links-to-files)\n     * @param {Boolean} force Overwrite existing downloads\n     * @return {{download_path:String}}\n     */\n    async __download(repo_name, treeish = null, force = false) {\n      qx.core.Assert.assertNotNull(treeish, \"Empty tree-ish id is not allowed\");\n      let url = `https://github.com/${repo_name}/archive/${treeish}.zip`;\n      // create local directory\n      let dir_name = `${repo_name}_${treeish}`.replace(/[\\^./*?\"'<>:]/g, \"_\");\n      let parts = [\n        process.cwd(),\n        qx.tool.cli.commands.Package.cache_dir,\n        dir_name\n      ];\n\n      let dir_exists;\n      let download_path = parts.reduce((prev, current) => {\n        let dir = prev + path.sep + current;\n        if (!fs.existsSync(dir)) {\n          fs.mkdirSync(dir);\n          dir_exists = false;\n        } else {\n          dir_exists = true;\n        }\n        return dir;\n      });\n      // download zip\n      if (!force && dir_exists) {\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(\n            `>>> Repository '${repo_name}', '${treeish}' has already been downloaded to ${download_path}. To download again, execute 'qx clean'.`\n          );\n        }\n      } else {\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(\n            `>>> Downloading repository '${repo_name}', '${treeish}' from ${url} to ${download_path}`\n          );\n        }\n        try {\n          await download(url, download_path, { extract: true, strip: 1 });\n        } catch (e) {\n          // remove download path so that failed downloads do not result in empty folder\n          if (this.argv.verbose) {\n            qx.tool.compiler.Console.info(\n              `>>> Download failed: ${e.message}. Removing download folder.`\n            );\n          }\n          rimraf.sync(download_path);\n          qx.tool.compiler.Console.error(\n            `Could not install '${repo_name}@${treeish}'. Use the --verbose flag for more information.`\n          );\n\n          process.exit(1);\n        }\n      }\n      return { download_path, dir_exists };\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}