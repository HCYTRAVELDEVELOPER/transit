{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "process",
    "require",
    "Search",
    "Repository",
    "fetch",
    "semver",
    "inquirer",
    "path",
    "Class",
    "define",
    "extend",
    "tool",
    "cli",
    "commands",
    "Package",
    "statics",
    "getYargsCommand",
    "command",
    "describe",
    "builder",
    "file",
    "alias",
    "search",
    "verbose",
    "quiet",
    "members",
    "__names",
    "argv",
    "exportOnly",
    "compiler",
    "Console",
    "error",
    "exit",
    "exportCache",
    "repository",
    "clearCache",
    "cfg",
    "ConfigDb",
    "getInstance",
    "github",
    "db",
    "updateFromRepository",
    "token",
    "response",
    "prompt",
    "type",
    "name",
    "message",
    "save",
    "updateFromGitHubAPI",
    "num_libraries",
    "getCache",
    "info",
    "saveCache",
    "url",
    "getRepositoryCacheUrl",
    "res",
    "data",
    "json",
    "setCache",
    "e",
    "utils",
    "Utils",
    "UserError",
    "auth",
    "query",
    "result",
    "forRepositories",
    "q",
    "result2",
    "repos",
    "concat",
    "repo_lookup",
    "repos_data",
    "repo",
    "full_name",
    "push",
    "description",
    "releases",
    "list",
    "releases_data",
    "listReleases",
    "filter",
    "r",
    "valid",
    "tag_name",
    "map",
    "version",
    "sort",
    "a",
    "b",
    "compare",
    "i",
    "length",
    "major",
    "versions",
    "join",
    "release",
    "manifests",
    "qooxdoo_data",
    "debug",
    "getContents",
    "Json",
    "parseJson",
    "warn",
    "libraries",
    "contribs",
    "match",
    "index",
    "manifest_path",
    "entries",
    "manifest_data",
    "config",
    "Manifest",
    "fileName",
    "qx_version_range",
    "requires",
    "validRange",
    "loose",
    "qx_versions",
    "provides",
    "stdout",
    "write",
    "zip_url",
    "id",
    "published_at",
    "comment",
    "body",
    "title",
    "prerelease",
    "Lockfile",
    "getVersion",
    "package",
    "Update"
  ],
  "sources": [
    "/home/andresf/workspace_qooxdoo/qooxdoo/qooxdoo-7.0/source/class/qx/tool/cli/commands/package/Update.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (info@bibliograph.org, @cboulanger)\n\n************************************************************************ */\nconst process = require(\"process\");\nconst Search = require(\"github-api/dist/components/Search\");\nconst Repository = require(\"github-api/dist/components/Repository\");\nconst fetch = require(\"node-fetch\");\nconst semver = require(\"semver\");\nconst inquirer = require(\"inquirer\");\nconst path = require(\"upath\");\n\n/**\n * Updates the local cache with information of available library packages\n * @ignore(github.*)\n */\nqx.Class.define(\"qx.tool.cli.commands.package.Update\", {\n  extend: qx.tool.cli.commands.Package,\n\n  statics: {\n    getYargsCommand() {\n      return {\n        command: \"update [repository]\",\n        describe:\n          \"updates information on packages from github. Has to be called before the other commands. If a package URI is supplied, only update information on that package\",\n        builder: {\n          file: {\n            alias: \"f\",\n            describe: \"Output result to a file\"\n          },\n\n          search: {\n            alias: \"S\",\n            describe:\n              \"Search GitHub for repos (as opposed to using the cached nightly data)\"\n          },\n\n          \"all-versions\": {\n            alias: \"a\",\n            describe:\n              \"Retrieve all releases (as opposed to the latest minor/patch release of each major release)\"\n          },\n\n          verbose: {\n            alias: \"v\",\n            describe: \"Verbose logging\"\n          },\n\n          quiet: {\n            alias: \"q\",\n            describe: \"No output\"\n          },\n\n          \"export-only\": {\n            alias: \"E\",\n            describe:\n              \"Export the current cache without updating it first (requires --file)\"\n          }\n        }\n      };\n    }\n  },\n\n  members: {\n    __names: null,\n\n    /**\n     * Updates the cache with information from GitHub.\n     */\n    async process() {\n      super.process();\n\n      // init\n      this.__names = [];\n\n      // export only\n      if (this.argv.exportOnly) {\n        if (!this.argv.file) {\n          qx.tool.compiler.Console.error(\"Path required via --file argument.\");\n          process.exit(1);\n        }\n        this.exportCache(this.argv.file);\n        return;\n      }\n\n      if (!this.argv.repository) {\n        this.clearCache();\n      }\n\n      let cfg = await qx.tool.cli.ConfigDb.getInstance();\n      let github = cfg.db(\"github\", {});\n\n      // Create the cache\n      if (!this.argv.search) {\n        // Retrieve the data from the repository\n        await this.updateFromRepository();\n      } else {\n        if (!github.token) {\n          let response = await inquirer.prompt([\n            {\n              type: \"input\",\n              name: \"token\",\n              message:\n                \"Searching GitHub requires an API token - visit https://github.com/settings/tokens to obtain one \" +\n                \"(you do not need to assign any permissions, just create a token);\\nWhat is your GitHub API Token ? \"\n            }\n          ]);\n\n          if (!response.token) {\n            qx.tool.compiler.Console.error(\n              \"You have not provided a GitHub token.\"\n            );\n\n            return;\n          }\n          github.token = response.token;\n          cfg.save();\n        }\n\n        // Generate data from GitHub API\n        await this.updateFromGitHubAPI(github.token);\n      }\n\n      let num_libraries = this.getCache().num_libraries;\n      if (num_libraries && !this.argv.quiet) {\n        qx.tool.compiler.Console.info(\n          `Found ${num_libraries} releases of libraries.`\n        );\n\n        qx.tool.compiler.Console.info(\n          `Run 'qx package list' in the root dir of your project to see which versions of these libraries are compatible.`\n        );\n      }\n\n      // save cache and export it if requested\n      await this.saveCache();\n      if (this.argv.file) {\n        await this.exportCache(this.argv.file);\n      }\n    },\n\n    /**\n     * Update the package cache from the nightly cron job\n     * @return {Promise<void>}\n     */\n    async updateFromRepository() {\n      if (!this.argv.quiet) {\n        qx.tool.compiler.Console.info(\"Downloading cache from GitHub ...\");\n      }\n      let url = this.getRepositoryCacheUrl();\n      try {\n        let res = await fetch(url);\n        let data = await res.json();\n        this.setCache(data);\n      } catch (e) {\n        throw new qx.tool.utils.Utils.UserError(e.message);\n      }\n    },\n\n    /**\n     * Updates the package cache from the GitHub Api\n     * @param {String} token\n     * @return {Promise<void>}\n     */\n    async updateFromGitHubAPI(token) {\n      const auth = {\n        token\n      };\n\n      const search = new Search({}, auth);\n      let num_libraries = 0;\n\n      // repositories\n      if (!this.argv.quiet) {\n        qx.tool.compiler.Console.info(\n          \"Searching for package repositories on GitHub...\"\n        );\n      }\n\n      let query = \"topic:qooxdoo-package fork:true\";\n      if (this.argv.repository) {\n        query += \" \" + this.argv.repository;\n      }\n      let result = await search.forRepositories({ q: query });\n      // backwards-compatibility\n      query = \"topic:qooxdoo-contrib fork:true\";\n      if (this.argv.repository) {\n        query += \" \" + this.argv.repository;\n      }\n      let result2 = await search.forRepositories({ q: query });\n      let repos = result.data.concat(result2.data);\n      let repo_lookup = {};\n\n      let repos_data = this.getCache().repos.data;\n\n      // iterate over repositories\n      for (let repo of repos) {\n        let name = repo.full_name;\n        // already dealt with\n        if (repo_lookup[name]) {\n          continue;\n        }\n        repo_lookup[name] = repo;\n        // if a repository name has been given, only update this repo\n        if (this.argv.repository && name !== this.argv.repository) {\n          continue;\n        }\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(`### Found ${name} ...`);\n        }\n        this.__names.push(name);\n        let repository = new Repository(name, auth);\n        repos_data[name] = {\n          description: repo.description,\n          url: repo.url,\n          releases: {\n            list: [],\n            data: {}\n          }\n        };\n\n        // get releases\n        try {\n          var releases_data = await repository.listReleases();\n        } catch (e) {\n          qx.tool.compiler.Console.error(\"Error retrieving releases: \" + e);\n          continue;\n        }\n\n        // filter releases to speed up updates\n        let releases = releases_data.data\n          // filter out invalid release names unless \"--all-versions\"\n          .filter(r =>\n            this.argv[\"all-versions\"] ? true : semver.valid(r.tag_name, true)\n          )\n\n          // attach a clean version number\n          .map(r => {\n            r.version = semver.valid(r.tag_name, true) || \"0.0.0\";\n            return r;\n          })\n          // sort by version number\n          .sort((a, b) => semver.compare(a.version, b.version))\n          // use only the latest minor/patch unless \"--all-versions\"\n          .filter(\n            (r, i, a) =>\n              r.version !== \"0.0.0\" &&\n              (this.argv[\"all-versions\"]\n                ? true\n                : i === a.length - 1 ||\n                  semver.major(a[i + 1].version) > semver.major(r.version))\n          );\n\n        let versions = releases.map(r => r.version);\n        if (this.argv.verbose) {\n          qx.tool.compiler.Console.info(\n            `>>> Retrieved ${\n              releases.length\n            } release(s) of ${name}: ${versions.join(\", \")}.`\n          );\n        }\n\n        // get Manifest.json of each release to determine compatible qooxdoo versions\n        for (let release of releases) {\n          let tag_name = release.tag_name;\n          let releases = repos_data[name].releases;\n\n          // list of paths to manifest files, default is Manifest.json in the root dir\n          let manifests = [{ path: \".\" }];\n\n          // can be overridden by a qoxdoo.json in the root dir\n          let qooxdoo_data;\n          if (this.argv.verbose) {\n            this.debug(\n              `>>> Trying to retrieve 'qooxdoo.json' for ${name} ${tag_name}...`\n            );\n          }\n          try {\n            // @todo check if the method can return JSON to save parsing\n            qooxdoo_data = await repository.getContents(\n              tag_name,\n              \"qooxdoo.json\",\n              true\n            );\n\n            if (this.argv.verbose) {\n              this.debug(`>>>  File exists, checking for libraries...`);\n            }\n            let data = qooxdoo_data.data;\n            if (typeof data == \"string\") {\n              try {\n                data = qx.tool.utils.Json.parseJson(data);\n              } catch (e) {\n                if (this.argv.verbose) {\n                  qx.tool.compiler.Console.warn(\n                    `!!!  Parse error: ${e.message}`\n                  );\n                }\n              }\n            }\n            // we have a list of Manifest.json paths!\n            manifests = data.libraries || data.contribs; // to do remove data.contribs. eventually, only there for BC\n          } catch (e) {\n            // no qooxdoo.json\n            if (e.message.match(/404/)) {\n              if (this.argv.verbose) {\n                this.debug(`>>> No qooxdoo.json`);\n              }\n            } else if (this.argv.verbose) {\n              qx.tool.compiler.Console.warn(`!!! Error: ${e.message}`);\n            }\n          }\n\n          // create a list of libraries via their manifests\n          for (let [index, { path: manifest_path }] of manifests.entries()) {\n            let manifest_data;\n            manifest_path = path.join(\n              manifest_path,\n              qx.tool.config.Manifest.config.fileName\n            );\n\n            try {\n              if (this.argv.verbose) {\n                this.debug(\n                  `>>> Retrieving Manifest file '${manifest_path}' for ${name} ${tag_name}...`\n                );\n              }\n              manifest_data = await repository.getContents(\n                tag_name,\n                manifest_path,\n                true\n              );\n            } catch (e) {\n              if (e.message.match(/404/)) {\n                if (this.argv.verbose) {\n                  qx.tool.compiler.Console.warn(`!!!  File does not exist.`);\n                }\n              } else if (this.argv.verbose) {\n                qx.tool.compiler.Console.warn(`!!! Error: ${e.message}`);\n              }\n              continue;\n            }\n            // retrieve compatible qooxdoo versions\n            let data = manifest_data.data;\n            // @todo check if the method can return JSON to save parsing\n            if (typeof data == \"string\") {\n              try {\n                data = qx.tool.utils.Json.parseJson(data);\n              } catch (e) {\n                if (this.argv.verbose) {\n                  qx.tool.compiler.Console.warn(\n                    `!!! Parse error: ${e.message}`\n                  );\n\n                  this.debug(data);\n                }\n                continue;\n              }\n            }\n\n            var qx_version_range =\n              data.requires && data.requires[\"@qooxdoo/framework\"];\n            if (!qx_version_range) {\n              if (this.argv.verbose) {\n                qx.tool.compiler.Console.warn(\n                  `!!! No valid qooxdoo version information in the manifest, skipping...`\n                );\n              }\n              continue;\n            }\n\n            if (!semver.validRange(qx_version_range, { loose: true })) {\n              if (this.argv.verbose) {\n                qx.tool.compiler.Console.warn(\n                  `!!! Invalid qooxdoo version information in the Manifest, skipping...`\n                );\n              }\n              continue;\n            }\n\n            // add information to manifest index\n            manifests[index] = {\n              path: manifest_path,\n              qx_versions: qx_version_range,\n              info: data.info,\n              requires: data.requires,\n              provides: data.provides\n            };\n\n            num_libraries++;\n            if (this.argv.verbose) {\n              this.debug(\n                `>>> ${name} ${tag_name}: Found package '${data.info.name}' (compatible with ${qx_version_range})`\n              );\n            } else if (!this.argv.quiet) {\n              process.stdout.write(\".\"); // output dots to indicate progress\n            }\n          } // end iteration over manifests\n          // save data in cache\n          let zip_url = `https://github.com/${name}/archive/${tag_name}.zip`;\n          releases.list.push(tag_name);\n          releases.data[tag_name] = {\n            id: release.id,\n            published_at: release.published_at,\n            comment: release.body,\n            title: release.name,\n            prerelease: release.prerelease,\n            manifests,\n            zip_url\n          };\n        } // end iteration over releases\n      } // end iteration over repos\n\n      // wrap-up\n      this.getCache().version =\n        qx.tool.config.Lockfile.getInstance().getVersion();\n      this.getCache().num_libraries = num_libraries;\n      if (!this.argv.repository) {\n        this.getCache().repos.list = this.__names.sort();\n      }\n      if (!this.argv.quiet && !this.argv.verbose) {\n        process.stdout.write(\"\\n\");\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}